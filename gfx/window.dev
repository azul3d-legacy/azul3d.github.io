

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">

		
		<link rel="image_src" href="http://azul3d.org/content/symbol_256x256.png">
		<meta property="og:image" content="http://azul3d.org/content/symbol_256x256.png">

		
			<title>Azul3D</title>
		
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>






































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc">Doc</a> | <a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package window</h1>
<span class="section pkg general">
	
		<p><em>In Development</em></p>
	
	<span class="pkg import">import "azul3d.org/gfx/window.dev"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	
		<h2>WARNING!</h2>
		<span class="sub">
			
				<p>This version is the in-development -- <em><strong>unstable</strong></em> -- version of this package. Backwards incompatible changes will be made to this package in the future and as such <em>you should not use this version</em>! Please use the latest release <a href="/gfx/window.v2">here</a>.</p>
			
		</span>
	

	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing an older version of this package (dev).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="gfx/window.v2" title="azul3d.org/gfx/window.v2">v2</a> (latest version)</span></span>
				
			
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="gfx/window.v1" title="azul3d.org/gfx/window.v1">v1</a></span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="gfx/window.dev" title="azul3d.org/gfx/window.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package window is the easiest way to open a window and render graphics.
</p>
<p>
The window package effectively provides an easy cross-platform way to create
and configure a window, as well as manipulate it and receive user input from
it efficiently.
</p>
<p>
The window package lays the groundwork for developing applications that are
truly cross-platform (i.e. desktop and mobile applications) using nearly the
exact same API in the future. As such, the window package is mostly just an
abstraction layer for GLFW on desktop operating systems.
</p>
<p>
If you truly need features not found in this package then you might be best
using GLFW directly if you intend to just write desktop applications. Some
features are not supported by this package intentionally, like multiple
windows because mobile devices don&#39;t have them.
</p>
<p>
The goal of the window package is not to provide a one solution fits all, it
is instead to abstract away the tedious parts of writing cross-device
applications in the future.
</p>
<p>
The window package is also extremely simple to use:
</p>
<pre>func gfxLoop(w window.Window, r gfx.Renderer) {
    // Initialization here.
    for {
        // Render loop here.
    }
}

func main() {
    window.Run(gfxLoop, nil)
}
</pre>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#variables">Variables</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Run">func Run(gfxLoop func(w Window, r gfx.Renderer), p *Props)</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Close">type Close</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Close.String">func (ev Close) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Close.Time">func (ev Close) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorEnter">type CursorEnter</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorEnter.String">func (ev CursorEnter) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorEnter.Time">func (ev CursorEnter) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorExit">type CursorExit</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorExit.String">func (ev CursorExit) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorExit.Time">func (ev CursorExit) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorMoved">type CursorMoved</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorMoved.String">func (ev CursorMoved) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorMoved.Time">func (ev CursorMoved) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Damaged">type Damaged</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Damaged.String">func (ev Damaged) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Damaged.Time">func (ev Damaged) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Event">type Event</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#EventMask">type EventMask</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FramebufferResized">type FramebufferResized</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FramebufferResized.String">func (ev FramebufferResized) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FramebufferResized.Time">func (ev FramebufferResized) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GainedFocus">type GainedFocus</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GainedFocus.String">func (ev GainedFocus) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GainedFocus.Time">func (ev GainedFocus) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ItemsDropped">type ItemsDropped</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ItemsDropped.String">func (ev ItemsDropped) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ItemsDropped.Time">func (ev ItemsDropped) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LostFocus">type LostFocus</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LostFocus.String">func (ev LostFocus) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LostFocus.Time">func (ev LostFocus) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Minimized">type Minimized</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Minimized.String">func (ev Minimized) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Minimized.Time">func (ev Minimized) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Moved">type Moved</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Moved.String">func (ev Moved) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Moved.Time">func (ev Moved) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props">type Props</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewProps">func NewProps() *Props</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.AlwaysOnTop">func (p *Props) AlwaysOnTop() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.CursorGrabbed">func (p *Props) CursorGrabbed() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.CursorPos">func (p *Props) CursorPos() (x, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Decorated">func (p *Props) Decorated() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Focused">func (p *Props) Focused() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.FramebufferSize">func (p *Props) FramebufferSize() (width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Fullscreen">func (p *Props) Fullscreen() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Minimized">func (p *Props) Minimized() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Pos">func (p *Props) Pos() (x, y int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Precision">func (p *Props) Precision() gfx.Precision</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Resizable">func (p *Props) Resizable() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetAlwaysOnTop">func (p *Props) SetAlwaysOnTop(alwaysOnTop bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetCursorGrabbed">func (p *Props) SetCursorGrabbed(grabbed bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetCursorPos">func (p *Props) SetCursorPos(x, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetDecorated">func (p *Props) SetDecorated(decorated bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetFocused">func (p *Props) SetFocused(focused bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetFramebufferSize">func (p *Props) SetFramebufferSize(width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetFullscreen">func (p *Props) SetFullscreen(fullscreen bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetMinimized">func (p *Props) SetMinimized(minimized bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetPos">func (p *Props) SetPos(x, y int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetPrecision">func (p *Props) SetPrecision(precision gfx.Precision)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetResizable">func (p *Props) SetResizable(resizable bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetShouldClose">func (p *Props) SetShouldClose(shouldClose bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetSize">func (p *Props) SetSize(width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetTitle">func (p *Props) SetTitle(title string)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetVSync">func (p *Props) SetVSync(vsync bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.SetVisible">func (p *Props) SetVisible(visible bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.ShouldClose">func (p *Props) ShouldClose() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Size">func (p *Props) Size() (width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.String">func (p *Props) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Title">func (p *Props) Title() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.VSync">func (p *Props) VSync() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Props.Visible">func (p *Props) Visible() bool</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Resized">type Resized</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Resized.String">func (ev Resized) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Resized.Time">func (ev Resized) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Restored">type Restored</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Restored.String">func (ev Restored) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Restored.Time">func (ev Restored) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window">type Window</a></span></span>
			
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	// Event mask matching no events at all.
	NoEvents	EventMask	= 0

	// Each event mask below matches it&#39;s corresponding event (defined in this
	// package) without the `Events` suffix.
	CloseEvents			EventMask	= 1 &lt;&lt; 0
	DamagedEvents			EventMask	= 1 &lt;&lt; 1
	CursorMovedEvents		EventMask	= 1 &lt;&lt; 2
	CursorEnterEvents		EventMask	= 1 &lt;&lt; 3
	CursorExitEvents		EventMask	= 1 &lt;&lt; 4
	MinimizedEvents			EventMask	= 1 &lt;&lt; 5
	RestoredEvents			EventMask	= 1 &lt;&lt; 6
	GainedFocusEvents		EventMask	= 1 &lt;&lt; 7
	LostFocusEvents			EventMask	= 1 &lt;&lt; 8
	MovedEvents			EventMask	= 1 &lt;&lt; 9
	ResizedEvents			EventMask	= 1 &lt;&lt; 10
	FramebufferResizedEvents	EventMask	= 1 &lt;&lt; 11
	ItemsDroppedEvents		EventMask	= 1 &lt;&lt; 12

	// Event mask for the mouse.Event event type.
	MouseEvents	EventMask	= 1 &lt;&lt; 13

	// Event mask for the mouse.Scrolled event type.
	MouseScrolledEvents	EventMask	= 1 &lt;&lt; 14

	// Event mask for the keyboard.TypedEvent event type.
	KeyboardTypedEvents	EventMask	= 1 &lt;&lt; 15

	// Event mask for the keyboard.StateEvent event type.
	KeyboardStateEvents	EventMask	= 1 &lt;&lt; 16

	// Event mask matching all possible events.
	AllEvents	= EventMask(math.MaxUint32)
)</pre>
		<p></p>
	
</span>





<h1 id="variables" class="hdr pkg hdr-variables"><a href="#variables" title="permalink">»</a>&nbsp;Variables <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg variables">
	
		<pre>var DefaultProps = NewProps()</pre>
		<p>DefaultProps is the default set of window properties. You may modify them as
you see fit.

They are used in place of nil properties (e.g. see the Run function).
</p>
	
</span>





	<h1 id="Run" class="hdr pkg hdr-function"><a href="#Run" title="permalink">»</a>&nbsp;func Run(gfxLoop func(w Window, r gfx.Renderer), p *Props) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Run(gfxLoop func(w Window, r gfx.Renderer), p *Props)</pre>
		<p>
Run opens a window with the given properties and runs the given graphics
loop in a separate goroutine.
</p>
<p>
Interpretation of the given properties is left strictly up to the platform
dependant implementation (for instance, on Android you cannot set the
window&#39;s size so it is simply ignored).
</p>
<p>
Requesting a specific framebuffer configuration via Props.SetPrecision is
just a request. You may be given some other configuration (most likely one
closest to it). You can check what you received by looking at:
</p>
<pre>r.Canvas.Precision()
</pre>
<p>
If the properties are nil, DefaultProps is used instead.
</p>

	</span>





	
	<h1 id="Close" class="hdr pkg hdr-type"><a href="#Close" title="permalink">»</a>&nbsp;type Close <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Close struct {
	T time.Time
}</pre>
		<p>
Close is sent when the user requests that the application window be closed,
using the exit button or a quick-key combination like Alt + F4, etc.
</p>

	</span>

	
	

	
	
		
		<h1 id="Close.String" class="hdr pkg hdr-method"><a href="#Close.String" title="permalink">»</a>&nbsp;func (ev Close) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Close) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="Close.Time" class="hdr pkg hdr-method"><a href="#Close.Time" title="permalink">»</a>&nbsp;func (ev Close) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Close) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="CursorEnter" class="hdr pkg hdr-type"><a href="#CursorEnter" title="permalink">»</a>&nbsp;type CursorEnter <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CursorEnter struct {
	T time.Time
}</pre>
		<p>
CursorEnter is an event where the user moved the mouse cursor inside of the
window.
</p>

	</span>

	
	

	
	
		
		<h1 id="CursorEnter.String" class="hdr pkg hdr-method"><a href="#CursorEnter.String" title="permalink">»</a>&nbsp;func (ev CursorEnter) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev CursorEnter) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="CursorEnter.Time" class="hdr pkg hdr-method"><a href="#CursorEnter.Time" title="permalink">»</a>&nbsp;func (ev CursorEnter) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev CursorEnter) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="CursorExit" class="hdr pkg hdr-type"><a href="#CursorExit" title="permalink">»</a>&nbsp;type CursorExit <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CursorExit struct {
	T time.Time
}</pre>
		<p>
CursorExit is an event where the user moved the mouse cursor outside of the
window.
</p>

	</span>

	
	

	
	
		
		<h1 id="CursorExit.String" class="hdr pkg hdr-method"><a href="#CursorExit.String" title="permalink">»</a>&nbsp;func (ev CursorExit) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev CursorExit) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="CursorExit.Time" class="hdr pkg hdr-method"><a href="#CursorExit.Time" title="permalink">»</a>&nbsp;func (ev CursorExit) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev CursorExit) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="CursorMoved" class="hdr pkg hdr-type"><a href="#CursorMoved" title="permalink">»</a>&nbsp;type CursorMoved <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CursorMoved struct {
	// Position of cursor relative to the upper-left corner of the window.
	X, Y	float64

	// Whether or not the event&#39;s X and Y values are actually relative delta
	// values (e.g. for a FPS style camera).
	Delta	bool

	T	time.Time
}</pre>
		<p>
CursorMoved is sent when the user has moved the mouse cursor.
</p>

	</span>

	
	

	
	
		
		<h1 id="CursorMoved.String" class="hdr pkg hdr-method"><a href="#CursorMoved.String" title="permalink">»</a>&nbsp;func (ev CursorMoved) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev CursorMoved) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="CursorMoved.Time" class="hdr pkg hdr-method"><a href="#CursorMoved.Time" title="permalink">»</a>&nbsp;func (ev CursorMoved) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev CursorMoved) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="Damaged" class="hdr pkg hdr-type"><a href="#Damaged" title="permalink">»</a>&nbsp;type Damaged <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Damaged struct {
	T time.Time
}</pre>
		<p>
Damaged is sent when the window&#39;s client area has been damaged and the window
needs to be redrawn.
</p>

	</span>

	
	

	
	
		
		<h1 id="Damaged.String" class="hdr pkg hdr-method"><a href="#Damaged.String" title="permalink">»</a>&nbsp;func (ev Damaged) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Damaged) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="Damaged.Time" class="hdr pkg hdr-method"><a href="#Damaged.Time" title="permalink">»</a>&nbsp;func (ev Damaged) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Damaged) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="Event" class="hdr pkg hdr-type"><a href="#Event" title="permalink">»</a>&nbsp;type Event <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Event interface {
	Time() time.Time
}</pre>
		<p>
Event represents an event of some sort. The only requirement is that the
event specify the point in time at which it happened.
</p>
<p>
Using a type assertion or a type switch you can determine the actualy type
of event which contains much more information:
</p>
<pre>select ev := event.(type){
case *keyboard.StateEvent:
    fmt.Println(&#34;The keyboard button&#34;, ev.Key, &#34;is now&#34;, ev.State)
    // example: &#34;The keyboard button keyboard.A is now keyboard.Down&#34;
}
</pre>

	</span>

	
	

	
	

	
	<h1 id="EventMask" class="hdr pkg hdr-type"><a href="#EventMask" title="permalink">»</a>&nbsp;type EventMask <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type EventMask uint32</pre>
		<p>
EventMask is a bitmask of event types. They can be combined, for instance:
</p>
<pre>mask := GenericEvents
mask |= MouseEvents
mask |= KeyboardEvents
</pre>
<p>
would select generic, mouse, and keyboard events.
</p>

	</span>

	
	

	
	

	
	<h1 id="FramebufferResized" class="hdr pkg hdr-type"><a href="#FramebufferResized" title="permalink">»</a>&nbsp;type FramebufferResized <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type FramebufferResized struct {
	// Size of the framebuffer in pixels.
	Width, Height	int

	T	time.Time
}</pre>
		<p>
FramebufferResized is an event where the framebuffer of the window has been
resized.
</p>

	</span>

	
	

	
	
		
		<h1 id="FramebufferResized.String" class="hdr pkg hdr-method"><a href="#FramebufferResized.String" title="permalink">»</a>&nbsp;func (ev FramebufferResized) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev FramebufferResized) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="FramebufferResized.Time" class="hdr pkg hdr-method"><a href="#FramebufferResized.Time" title="permalink">»</a>&nbsp;func (ev FramebufferResized) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev FramebufferResized) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="GainedFocus" class="hdr pkg hdr-type"><a href="#GainedFocus" title="permalink">»</a>&nbsp;type GainedFocus <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type GainedFocus struct {
	T time.Time
}</pre>
		<p>
GainedFocus is an event where the window has gained focus.
</p>

	</span>

	
	

	
	
		
		<h1 id="GainedFocus.String" class="hdr pkg hdr-method"><a href="#GainedFocus.String" title="permalink">»</a>&nbsp;func (ev GainedFocus) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev GainedFocus) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="GainedFocus.Time" class="hdr pkg hdr-method"><a href="#GainedFocus.Time" title="permalink">»</a>&nbsp;func (ev GainedFocus) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev GainedFocus) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="ItemsDropped" class="hdr pkg hdr-type"><a href="#ItemsDropped" title="permalink">»</a>&nbsp;type ItemsDropped <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type ItemsDropped struct {
	Items	[]string

	T	time.Time
}</pre>
		<p>
ItemsDropped is an event where the user dropped an item (or multiple items)
onto the window.
</p>

	</span>

	
	

	
	
		
		<h1 id="ItemsDropped.String" class="hdr pkg hdr-method"><a href="#ItemsDropped.String" title="permalink">»</a>&nbsp;func (ev ItemsDropped) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev ItemsDropped) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="ItemsDropped.Time" class="hdr pkg hdr-method"><a href="#ItemsDropped.Time" title="permalink">»</a>&nbsp;func (ev ItemsDropped) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev ItemsDropped) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="LostFocus" class="hdr pkg hdr-type"><a href="#LostFocus" title="permalink">»</a>&nbsp;type LostFocus <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type LostFocus struct {
	T time.Time
}</pre>
		<p>
LostFocus is an event where the window has lost focus.
</p>

	</span>

	
	

	
	
		
		<h1 id="LostFocus.String" class="hdr pkg hdr-method"><a href="#LostFocus.String" title="permalink">»</a>&nbsp;func (ev LostFocus) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev LostFocus) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="LostFocus.Time" class="hdr pkg hdr-method"><a href="#LostFocus.Time" title="permalink">»</a>&nbsp;func (ev LostFocus) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev LostFocus) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="Minimized" class="hdr pkg hdr-type"><a href="#Minimized" title="permalink">»</a>&nbsp;type Minimized <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Minimized struct {
	T time.Time
}</pre>
		<p>
Minimized is an event where the user minimized the window.
</p>

	</span>

	
	

	
	
		
		<h1 id="Minimized.String" class="hdr pkg hdr-method"><a href="#Minimized.String" title="permalink">»</a>&nbsp;func (ev Minimized) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Minimized) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="Minimized.Time" class="hdr pkg hdr-method"><a href="#Minimized.Time" title="permalink">»</a>&nbsp;func (ev Minimized) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Minimized) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="Moved" class="hdr pkg hdr-type"><a href="#Moved" title="permalink">»</a>&nbsp;type Moved <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Moved struct {
	// Position of the window&#39;s client area, relative to the top-left of the
	// screen.
	X, Y	int

	T	time.Time
}</pre>
		<p>
Moved is an event where the user changed the position of the window.
</p>

	</span>

	
	

	
	
		
		<h1 id="Moved.String" class="hdr pkg hdr-method"><a href="#Moved.String" title="permalink">»</a>&nbsp;func (ev Moved) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Moved) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="Moved.Time" class="hdr pkg hdr-method"><a href="#Moved.Time" title="permalink">»</a>&nbsp;func (ev Moved) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Moved) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="Props" class="hdr pkg hdr-type"><a href="#Props" title="permalink">»</a>&nbsp;type Props <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Props struct {
	// contains filtered or unexported fields
}</pre>
		<p>
Props represents window properties. Properties are safe for use concurrently
from multiple goroutines.
</p>

	</span>

	
	
		<h1 id="NewProps" class="hdr pkg hdr-function"><a href="#NewProps" title="permalink">»</a>&nbsp;func NewProps() *Props <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewProps() *Props</pre>
			<p>
NewProps returns a new initialized set of window properties. The default
values for each property are as follows:
</p>
<pre>Title: &#34;Azul3D - {FPS}&#34;
Size: 800x450
Pos: -1, -1 (centered on screen)
CursorPos: -1.0, -1.0 (current position)
ShouldClose: true
Visible: true
Minimized: false
Fullscreen: false
Focused: true
VSync: true
Resizable: true
Decorated: true
AlwaysOnTop: false
CursorGrabbed: false
FramebufferSize: 1x1 (set via window owner)
Precision: gfx.Precision{
    RedBits: 8, GreenBits: 8, BlueBits: 8, AlphaBits: 0,
    DepthBits: 24,
    StencilBits: 0,
    Samples: 2,
}
</pre>

		</span>
	

	
	
		
		<h1 id="Props.AlwaysOnTop" class="hdr pkg hdr-method"><a href="#Props.AlwaysOnTop" title="permalink">»</a>&nbsp;func (p *Props) AlwaysOnTop() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) AlwaysOnTop() bool</pre>
			<p>
AlwaysOnTop tells whether or not the window is set to be always on top of
other windows.
</p>

		</span>
	
		
		<h1 id="Props.CursorGrabbed" class="hdr pkg hdr-method"><a href="#Props.CursorGrabbed" title="permalink">»</a>&nbsp;func (p *Props) CursorGrabbed() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) CursorGrabbed() bool</pre>
			<p>
CursorGrabbed returns whether or not the cursor is grabbed.
</p>

		</span>
	
		
		<h1 id="Props.CursorPos" class="hdr pkg hdr-method"><a href="#Props.CursorPos" title="permalink">»</a>&nbsp;func (p *Props) CursorPos() (x, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) CursorPos() (x, y float64)</pre>
			<p>
CursorPos returns the position of the mouse cursor.
</p>

		</span>
	
		
		<h1 id="Props.Decorated" class="hdr pkg hdr-method"><a href="#Props.Decorated" title="permalink">»</a>&nbsp;func (p *Props) Decorated() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Decorated() bool</pre>
			<p>
Decorated tells whether or not the window has it&#39;s decorations shown.
</p>

		</span>
	
		
		<h1 id="Props.Focused" class="hdr pkg hdr-method"><a href="#Props.Focused" title="permalink">»</a>&nbsp;func (p *Props) Focused() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Focused() bool</pre>
			<p>
Focused tells whether or not the window has focus.
</p>

		</span>
	
		
		<h1 id="Props.FramebufferSize" class="hdr pkg hdr-method"><a href="#Props.FramebufferSize" title="permalink">»</a>&nbsp;func (p *Props) FramebufferSize() (width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) FramebufferSize() (width, height int)</pre>
			<p>
FramebufferSize returns the size of the framebuffer in pixels.
</p>

		</span>
	
		
		<h1 id="Props.Fullscreen" class="hdr pkg hdr-method"><a href="#Props.Fullscreen" title="permalink">»</a>&nbsp;func (p *Props) Fullscreen() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Fullscreen() bool</pre>
			<p>
Fullscreen tells whether or not the window is fullscreen.
</p>

		</span>
	
		
		<h1 id="Props.Minimized" class="hdr pkg hdr-method"><a href="#Props.Minimized" title="permalink">»</a>&nbsp;func (p *Props) Minimized() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Minimized() bool</pre>
			<p>
Minimized tells whether or not the window is minimized.
</p>

		</span>
	
		
		<h1 id="Props.Pos" class="hdr pkg hdr-method"><a href="#Props.Pos" title="permalink">»</a>&nbsp;func (p *Props) Pos() (x, y int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Pos() (x, y int)</pre>
			<p>
Pos returns the position of the upper-left corner of the client area of the
window in screen coordinates.
</p>

		</span>
	
		
		<h1 id="Props.Precision" class="hdr pkg hdr-method"><a href="#Props.Precision" title="permalink">»</a>&nbsp;func (p *Props) Precision() gfx.Precision <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Precision() gfx.Precision</pre>
			<p>
Precision returns the requested framebuffer precision to be requested.
</p>

		</span>
	
		
		<h1 id="Props.Resizable" class="hdr pkg hdr-method"><a href="#Props.Resizable" title="permalink">»</a>&nbsp;func (p *Props) Resizable() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Resizable() bool</pre>
			<p>
Resizable tells whether or not the window can be resized.
</p>

		</span>
	
		
		<h1 id="Props.SetAlwaysOnTop" class="hdr pkg hdr-method"><a href="#Props.SetAlwaysOnTop" title="permalink">»</a>&nbsp;func (p *Props) SetAlwaysOnTop(alwaysOnTop bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetAlwaysOnTop(alwaysOnTop bool)</pre>
			<p>
SetAlwaysOnTop sets whether or not the window is always on top of other
windows.
</p>

		</span>
	
		
		<h1 id="Props.SetCursorGrabbed" class="hdr pkg hdr-method"><a href="#Props.SetCursorGrabbed" title="permalink">»</a>&nbsp;func (p *Props) SetCursorGrabbed(grabbed bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetCursorGrabbed(grabbed bool)</pre>
			<p>
SetCursorGrabbed sets whether or not the cursor should be grabbed. If the
cursor is grabbed, it is hidden from sight and cannot leave the window.
</p>
<p>
When grabbed, a window generates CursorMoved events with Delta=true, this
is useful for e.g. FPS style cameras.
</p>

		</span>
	
		
		<h1 id="Props.SetCursorPos" class="hdr pkg hdr-method"><a href="#Props.SetCursorPos" title="permalink">»</a>&nbsp;func (p *Props) SetCursorPos(x, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetCursorPos(x, y float64)</pre>
			<p>
SetCursorPos sets the position of the mouse cursor.
</p>
<p>
A special value of x=-1.0, y=-1.0 means to not move the mouse cursor at all.
</p>

		</span>
	
		
		<h1 id="Props.SetDecorated" class="hdr pkg hdr-method"><a href="#Props.SetDecorated" title="permalink">»</a>&nbsp;func (p *Props) SetDecorated(decorated bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetDecorated(decorated bool)</pre>
			<p>
SetDecorated sets whether or not the window has it&#39;s decorations shown.
</p>

		</span>
	
		
		<h1 id="Props.SetFocused" class="hdr pkg hdr-method"><a href="#Props.SetFocused" title="permalink">»</a>&nbsp;func (p *Props) SetFocused(focused bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetFocused(focused bool)</pre>
			<p>
SetFocused sets whether or not the window has focus.
</p>

		</span>
	
		
		<h1 id="Props.SetFramebufferSize" class="hdr pkg hdr-method"><a href="#Props.SetFramebufferSize" title="permalink">»</a>&nbsp;func (p *Props) SetFramebufferSize(width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetFramebufferSize(width, height int)</pre>
			<p>
SetFramebufferSize sets the size of the framebuffer in pixels. Each value is
clamped to at least a value of 1.
</p>
<p>
Only the window owner should ever set the framebuffer size.
</p>

		</span>
	
		
		<h1 id="Props.SetFullscreen" class="hdr pkg hdr-method"><a href="#Props.SetFullscreen" title="permalink">»</a>&nbsp;func (p *Props) SetFullscreen(fullscreen bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetFullscreen(fullscreen bool)</pre>
			<p>
SetFullscreen sets whether or not the window is fullscreen.
</p>

		</span>
	
		
		<h1 id="Props.SetMinimized" class="hdr pkg hdr-method"><a href="#Props.SetMinimized" title="permalink">»</a>&nbsp;func (p *Props) SetMinimized(minimized bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetMinimized(minimized bool)</pre>
			<p>
SetMinimized sets whether or not the window is minimized.
</p>

		</span>
	
		
		<h1 id="Props.SetPos" class="hdr pkg hdr-method"><a href="#Props.SetPos" title="permalink">»</a>&nbsp;func (p *Props) SetPos(x, y int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetPos(x, y int)</pre>
			<p>
SetPos sets the position of the upper-left corner of the client area of the
window in screen coordinates.
</p>
<p>
A special value of x=-1, y=-1 means to center the window on the screen.
</p>

		</span>
	
		
		<h1 id="Props.SetPrecision" class="hdr pkg hdr-method"><a href="#Props.SetPrecision" title="permalink">»</a>&nbsp;func (p *Props) SetPrecision(precision gfx.Precision) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetPrecision(precision gfx.Precision)</pre>
			<p>
SetPrecision sets the framebuffer precision to be requested.
</p>

		</span>
	
		
		<h1 id="Props.SetResizable" class="hdr pkg hdr-method"><a href="#Props.SetResizable" title="permalink">»</a>&nbsp;func (p *Props) SetResizable(resizable bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetResizable(resizable bool)</pre>
			<p>
SetResizable sets whether or not the window can be resized.
</p>

		</span>
	
		
		<h1 id="Props.SetShouldClose" class="hdr pkg hdr-method"><a href="#Props.SetShouldClose" title="permalink">»</a>&nbsp;func (p *Props) SetShouldClose(shouldClose bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetShouldClose(shouldClose bool)</pre>
			<p>
SetShouldClose sets whether the window should close or not when the user
tries to close the window.
</p>

		</span>
	
		
		<h1 id="Props.SetSize" class="hdr pkg hdr-method"><a href="#Props.SetSize" title="permalink">»</a>&nbsp;func (p *Props) SetSize(width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetSize(width, height int)</pre>
			<p>
SetSize sets the size of the window in screen coordinates. Each value is
clamped to at least a value of 1.
</p>

		</span>
	
		
		<h1 id="Props.SetTitle" class="hdr pkg hdr-method"><a href="#Props.SetTitle" title="permalink">»</a>&nbsp;func (p *Props) SetTitle(title string) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetTitle(title string)</pre>
			<p>
SetTitle sets the title of the window. The backend will replace the first
string in the title matching &#34;{FPS}&#34; with the actual frames per second.
</p>
<p>
For example, a title &#34;Hello World - {FPS}&#34; would end up as:
</p>
<pre>&#34;Hello world - 60FPS&#34;
</pre>

		</span>
	
		
		<h1 id="Props.SetVSync" class="hdr pkg hdr-method"><a href="#Props.SetVSync" title="permalink">»</a>&nbsp;func (p *Props) SetVSync(vsync bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetVSync(vsync bool)</pre>
			<p>
SetVSync turns on or off vertical refresh rate synchronization (vsync).
</p>

		</span>
	
		
		<h1 id="Props.SetVisible" class="hdr pkg hdr-method"><a href="#Props.SetVisible" title="permalink">»</a>&nbsp;func (p *Props) SetVisible(visible bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) SetVisible(visible bool)</pre>
			<p>
SetVisible sets whether or not the window is visible or hidden.
</p>

		</span>
	
		
		<h1 id="Props.ShouldClose" class="hdr pkg hdr-method"><a href="#Props.ShouldClose" title="permalink">»</a>&nbsp;func (p *Props) ShouldClose() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) ShouldClose() bool</pre>
			<p>
ShouldClose tells if the window will close or not when the user tries to
close the window.
</p>

		</span>
	
		
		<h1 id="Props.Size" class="hdr pkg hdr-method"><a href="#Props.Size" title="permalink">»</a>&nbsp;func (p *Props) Size() (width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Size() (width, height int)</pre>
			<p>
Size returns the size of the window in screen coordinates.
</p>

		</span>
	
		
		<h1 id="Props.String" class="hdr pkg hdr-method"><a href="#Props.String" title="permalink">»</a>&nbsp;func (p *Props) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) String() string</pre>
			<p>
String returns a string like:
</p>
<pre>&#34;Window(Title=&#34;Hello World!&#34;, Fullscreen=false)&#34;
</pre>

		</span>
	
		
		<h1 id="Props.Title" class="hdr pkg hdr-method"><a href="#Props.Title" title="permalink">»</a>&nbsp;func (p *Props) Title() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Title() string</pre>
			<p>
Title returns the title of the window, as previously set via SetTitle.
</p>

		</span>
	
		
		<h1 id="Props.VSync" class="hdr pkg hdr-method"><a href="#Props.VSync" title="permalink">»</a>&nbsp;func (p *Props) VSync() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) VSync() bool</pre>
			<p>
VSync tells if vertical refresh rate synchronization (vsync) is on or off.
</p>

		</span>
	
		
		<h1 id="Props.Visible" class="hdr pkg hdr-method"><a href="#Props.Visible" title="permalink">»</a>&nbsp;func (p *Props) Visible() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p *Props) Visible() bool</pre>
			<p>
Visible tells whether or not the window is visible or hidden.
</p>

		</span>
	

	
	<h1 id="Resized" class="hdr pkg hdr-type"><a href="#Resized" title="permalink">»</a>&nbsp;type Resized <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Resized struct {
	// Size of the window in screen coordinates.
	Width, Height	int

	T	time.Time
}</pre>
		<p>
Resized is an event where the user changed the size of the window.
</p>

	</span>

	
	

	
	
		
		<h1 id="Resized.String" class="hdr pkg hdr-method"><a href="#Resized.String" title="permalink">»</a>&nbsp;func (ev Resized) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Resized) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="Resized.Time" class="hdr pkg hdr-method"><a href="#Resized.Time" title="permalink">»</a>&nbsp;func (ev Resized) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Resized) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="Restored" class="hdr pkg hdr-type"><a href="#Restored" title="permalink">»</a>&nbsp;type Restored <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Restored struct {
	T time.Time
}</pre>
		<p>
Restored is an event where the user restored (un-minimized) the window.
</p>

	</span>

	
	

	
	
		
		<h1 id="Restored.String" class="hdr pkg hdr-method"><a href="#Restored.String" title="permalink">»</a>&nbsp;func (ev Restored) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Restored) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="Restored.Time" class="hdr pkg hdr-method"><a href="#Restored.Time" title="permalink">»</a>&nbsp;func (ev Restored) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Restored) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="Window" class="hdr pkg hdr-type"><a href="#Window" title="permalink">»</a>&nbsp;type Window <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Window interface {
	// Props returns the window&#39;s properties.
	Props() *Props

	// Request makes a request to use a new set of properties, p. It is then
	// reccomended to make changes to the window using something like:
	//  props := window.Props()
	//  props.SetTitle(&#34;Hello World!&#34;)
	//  props.SetSize(640, 480)
	//  window.Request(props)
	//
	// Interpretation of the given properties is left strictly up to the
	// platform dependant implementation (for instance, on Android you cannot
	// set the window&#39;s size, so instead a request for this is simply ignored.
	Request(p *Props)

	// Keyboard returns a keyboard watcher for the window. It can be used to
	// tell if certain keyboard buttons are currently held down, for instance:
	//
	//  if w.Keyboard().Down(keyboard.W) {
	//      fmt.Println(&#34;The W key is currently held down&#34;)
	//  }
	Keyboard() *keyboard.Watcher

	// Mouse returns a mouse watcher for the window. It can be used to tell if
	// certain mouse buttons are currently held down, for instance:
	//
	//  if w.Mouse().Down(mouse.Left) {
	//      fmt.Println(&#34;The left mouse button is currently held down&#34;)
	//  }
	Mouse() *mouse.Watcher

	// SetClipboard sets the clipboard string.
	SetClipboard(clipboard string)

	// Clipboard returns the clipboard string.
	Clipboard() string

	// Notify causes the window to relay window events to ch based on the event
	// mask.
	//
	// The special event mask NoEvents causes the window to stop relaying any
	// events to the given channel. You should always perform this action when
	// you are done using the event channel.
	//
	// The window will not block sending events to ch: the caller must ensure
	// that ch has a sufficient amount of buffer space to keep up with the
	// event rate.
	//
	// If you only expect to receive a single event like Close then a buffer
	// size of one is acceptable.
	//
	// You are allowed to make multiple calls to this method with the same
	// channel, if you do then the same event will be sent over the channel
	// multiple times. When you no longer want the channel to receive events
	// then call this function again with NoEvents:
	//  w.Notify(ch, NoEvents)
	//
	// Multiple calls to Events with different channels works as you would
	// expect, each channel receives a copy of the events independant of other
	// ones.
	//
	// Warning: Many people use high-precision mice, some which can reach well
	// above 1000hz, so for cursor events a generous buffer size (256, etc) is
	// highly recommended.
	//
	// Warning: Depending on the operating system, window manager, etc, some of
	// the events may never be sent or may only be sent sporiadically, so plan
	// for this.
	Notify(ch chan&lt;- Event, m EventMask)

	// Close closes the window, and causes Run() to return.
	Close()
}</pre>
		<p>
Window represents a single window that graphics can be rendered to. The
window is safe for use concurrently from multiple goroutines.
</p>

	</span>

	
	

	
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/gfx-window/blob/dev/doc.go" title="view source">doc.go</a>
	
	<a href="https:/github.com/azul3d/gfx-window/blob/dev/events.go" title="view source">events.go</a>
	
	<a href="https:/github.com/azul3d/gfx-window/blob/dev/glfwconvert.go" title="view source">glfwconvert.go</a>
	
	<a href="https:/github.com/azul3d/gfx-window/blob/dev/glfwwindow.go" title="view source">glfwwindow.go</a>
	
	<a href="https:/github.com/azul3d/gfx-window/blob/dev/props.go" title="view source">props.go</a>
	
	<a href="https:/github.com/azul3d/gfx-window/blob/dev/window.go" title="view source">window.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files"></span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div><a href="/doc/license.html">License</a> | <a href="/doc/authors.html">Authors</a></div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



