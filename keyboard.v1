

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">
		<title>Azul3D</title>
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>

































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package keyboard</h1>
<span class="section pkg general">
	
		
			<p><em>Version 1</em></p>
		
	
	<span class="pkg import">import "azul3d.org/keyboard.v1"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	

	
		
	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing the latest version of this package (v1).</p>
	
	<p>Other versions of this package are available as follows. Version zero (v0) is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="keyboard.v1" title="azul3d.org/keyboard.v1">v1</a> (latest version)</span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="keyboard.v0" title="azul3d.org/keyboard.v0">v0</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package keyboard implements various keyboard related data types.
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Key">type Key</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Key.String">func (k Key) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#State">type State</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#State.String">func (s State) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#StateEvent">type StateEvent</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#StateEvent.String">func (e StateEvent) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#StateEvent.Time">func (e StateEvent) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TypedEvent">type TypedEvent</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TypedEvent.String">func (e TypedEvent) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TypedEvent.Time">func (e TypedEvent) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher">type Watcher</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewWatcher">func NewWatcher() *Watcher</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.Down">func (w *Watcher) Down(key Key) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.RawDown">func (w *Watcher) RawDown(raw uint64) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.RawState">func (w *Watcher) RawState(raw uint64) State</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.RawStates">func (w *Watcher) RawStates() map[uint64]State</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.RawUp">func (w *Watcher) RawUp(raw uint64) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.SetRawState">func (w *Watcher) SetRawState(raw uint64, state State)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.SetState">func (w *Watcher) SetState(key Key, state State)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.State">func (w *Watcher) State(key Key) State</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.States">func (w *Watcher) States() map[Key]State</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.String">func (w *Watcher) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.Up">func (w *Watcher) Up(key Key) bool</a></span></span>
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	Invalid	Key	= iota

	// http://en.wikipedia.org/wiki/File:KB_United_States-NoAltGr.svg
	Tilde		// &#34;~&#34;
	Dash		// &#34;-&#34;
	Equals		// &#34;=&#34;
	Semicolon	// &#34;;&#34;
	Apostrophe	// &#34;&#39;&#34;
	Comma		// &#34;,&#34;
	Period		// &#34;.&#34;
	ForwardSlash	// &#34;/&#34;
	BackSlash	// &#34;\&#34;
	Backspace
	Tab	// &#34;\t&#34;
	CapsLock
	Space	// &#34; &#34;
	Enter	// &#34;\r&#34;, &#34;\n&#34;, &#34;\r\n&#34;
	Escape
	Insert
	PrintScreen
	Delete
	PageUp
	PageDown
	Home
	End
	Pause
	Sleep
	Clear
	Select
	Print
	Execute
	Help
	Applications
	ScrollLock
	Play
	Zoom

	// Arrow keys
	ArrowLeft
	ArrowRight
	ArrowDown
	ArrowUp

	// Lefties
	LeftBracket	// [
	LeftShift
	LeftCtrl
	LeftSuper
	LeftAlt

	// Righties
	RightBracket	// ]
	RightShift
	RightCtrl
	RightSuper
	RightAlt

	// Numbers
	Zero	// &#34;0&#34;
	One	// &#34;1&#34;
	Two	// &#34;2&#34;
	Three	// &#34;3&#34;
	Four	// &#34;4&#34;
	Five	// &#34;5&#34;
	Six	// &#34;6&#34;
	Seven	// &#34;7&#34;
	Eight	// &#34;8&#34;
	Nine	// &#34;9&#34;

	// Functions
	F1
	F2
	F3
	F4
	F5
	F6
	F7
	F8
	F9
	F10
	F11
	F12
	F13
	F14
	F15
	F16
	F17
	F18
	F19
	F20
	F21
	F22
	F23
	F24

	// English characters
	A	// &#34;a&#34;
	B	// &#34;b&#34;
	C	// &#34;c&#34;
	D	// &#34;d&#34;
	E	// &#34;e&#34;
	F	// &#34;f&#34;
	G	// &#34;g&#34;
	H	// &#34;h&#34;
	I	// &#34;i&#34;
	J	// &#34;j&#34;
	K	// &#34;k&#34;
	L	// &#34;l&#34;
	M	// &#34;m&#34;
	N	// &#34;n&#34;
	O	// &#34;o&#34;
	P	// &#34;p&#34;
	Q	// &#34;q&#34;
	R	// &#34;r&#34;
	S	// &#34;s&#34;
	T	// &#34;t&#34;
	U	// &#34;u&#34;
	V	// &#34;v&#34;
	W	// &#34;w&#34;
	X	// &#34;x&#34;
	Y	// &#34;y&#34;
	Z	// &#34;z&#34;

	// Number pads
	NumLock
	NumMultiply	// &#34;*&#34;
	NumDivide	// &#34;/&#34;
	NumAdd		// &#34;&#43;&#34;
	NumSubtract	// &#34;-&#34;
	NumZero		// &#34;0&#34;
	NumOne		// &#34;1&#34;
	NumTwo		// &#34;2&#34;
	NumThree	// &#34;3&#34;
	NumFour		// &#34;4&#34;
	NumFive		// &#34;5&#34;
	NumSix		// &#34;6&#34;
	NumSeven	// &#34;7&#34;
	NumEight	// &#34;8&#34;
	NumNine		// &#34;9&#34;
	NumDecimal	// &#34;.&#34;
	NumComma	// &#34;,&#34;
	NumEnter

	BrowserBack
	BrowserForward
	BrowserRefresh
	BrowserStop
	BrowserSearch
	BrowserFavorites
	BrowserHome

	MediaNext
	MediaPrevious
	MediaStop
	MediaPlayPause

	LaunchMail
	LaunchMedia
	LaunchAppOne
	LaunchAppTwo

	Kana
	Kanji
	Junja
	Attn
	CrSel
	ExSel
	EraseEOF
)</pre>
		<p></p>
	
		<pre>const (
	InvalidState	State	= iota
	Down			// Being held down currently
	Up			// No longer being held down (released)
	On		= Down	// the on/active state (for lock keys; Caps Lock; Num Lock; etc..)
	Off		= Up	// the off/inactive state (for lock keys; Caps Lock; Num Lock; etc..)
)</pre>
		<p></p>
	
</span>













	
	<h1 id="Key" class="hdr pkg hdr-type"><a href="#Key" title="permalink">»</a>&nbsp;type Key <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Key int</pre>
		<p>
Key represents an single keyboard button.
</p>
<p>
It should be noted that it does not represent an character that pressing an
keyboard button would otherwise generate (hence you will find no capital
keys defined).
</p>

	</span>

	
	

	
	
		
		<h1 id="Key.String" class="hdr pkg hdr-method"><a href="#Key.String" title="permalink">»</a>&nbsp;func (k Key) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (k Key) String() string</pre>
			
		</span>
	

	
	<h1 id="State" class="hdr pkg hdr-type"><a href="#State" title="permalink">»</a>&nbsp;type State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type State uint8</pre>
		
	</span>

	
	

	
	
		
		<h1 id="State.String" class="hdr pkg hdr-method"><a href="#State.String" title="permalink">»</a>&nbsp;func (s State) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s State) String() string</pre>
			<p>
String returns a string representation of this keyboard key state.
</p>

		</span>
	

	
	<h1 id="StateEvent" class="hdr pkg hdr-type"><a href="#StateEvent" title="permalink">»</a>&nbsp;type StateEvent <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type StateEvent struct {
	T	time.Time
	Key	Key
	State	State
	Raw	uint64
}</pre>
		<p>
StateEvent represents an event when an keyboard key changes state (i.e.
being pushed down when it was previously up, or being toggled on when it was
previously off, etc)
</p>
<p>
If Key == Invalid then the key may not be known, but it can still be
uniquely identified and it&#39;s state watched via the Raw member (e.g. for
special or non-US keys).
</p>
<p>
The Raw member must uniquely identify the keyboard button whose state is
changing, and must always be present regardless of whether or not Key ==
Invalid.
</p>

	</span>

	
	

	
	
		
		<h1 id="StateEvent.String" class="hdr pkg hdr-method"><a href="#StateEvent.String" title="permalink">»</a>&nbsp;func (e StateEvent) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (e StateEvent) String() string</pre>
			<p>
String returns an string representation of this event.
</p>

		</span>
	
		
		<h1 id="StateEvent.Time" class="hdr pkg hdr-method"><a href="#StateEvent.Time" title="permalink">»</a>&nbsp;func (e StateEvent) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (e StateEvent) Time() time.Time</pre>
			<p>
Time returns the time at which this event occured.
</p>

		</span>
	

	
	<h1 id="TypedEvent" class="hdr pkg hdr-type"><a href="#TypedEvent" title="permalink">»</a>&nbsp;type TypedEvent <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TypedEvent struct {
	T	time.Time
	Rune	rune
}</pre>
		<p>
TypedEvent represents an event where some sort of user input has generated
an input character which should be considered input.
</p>

	</span>

	
	

	
	
		
		<h1 id="TypedEvent.String" class="hdr pkg hdr-method"><a href="#TypedEvent.String" title="permalink">»</a>&nbsp;func (e TypedEvent) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (e TypedEvent) String() string</pre>
			<p>
String returns an string representation of this event.
</p>

		</span>
	
		
		<h1 id="TypedEvent.Time" class="hdr pkg hdr-method"><a href="#TypedEvent.Time" title="permalink">»</a>&nbsp;func (e TypedEvent) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (e TypedEvent) Time() time.Time</pre>
			<p>
Time returns the time at which this event occured.
</p>

		</span>
	

	
	<h1 id="Watcher" class="hdr pkg hdr-type"><a href="#Watcher" title="permalink">»</a>&nbsp;type Watcher <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Watcher struct {
	// contains filtered or unexported fields
}</pre>
		<p>
Watcher watches the state of various keyboard keys.
</p>

	</span>

	
	
		<h1 id="NewWatcher" class="hdr pkg hdr-function"><a href="#NewWatcher" title="permalink">»</a>&nbsp;func NewWatcher() *Watcher <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewWatcher() *Watcher</pre>
			<p>
NewWatcher returns a new, initialized, watcher.
</p>

		</span>
	

	
	
		
		<h1 id="Watcher.Down" class="hdr pkg hdr-method"><a href="#Watcher.Down" title="permalink">»</a>&nbsp;func (w *Watcher) Down(key Key) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) Down(key Key) bool</pre>
			<p>
Down tells whether the specified key is currently in the down state.
</p>

		</span>
	
		
		<h1 id="Watcher.RawDown" class="hdr pkg hdr-method"><a href="#Watcher.RawDown" title="permalink">»</a>&nbsp;func (w *Watcher) RawDown(raw uint64) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) RawDown(raw uint64) bool</pre>
			<p>
RawDown tells whether the specified raw key value is currently in the down state.
</p>

		</span>
	
		
		<h1 id="Watcher.RawState" class="hdr pkg hdr-method"><a href="#Watcher.RawState" title="permalink">»</a>&nbsp;func (w *Watcher) RawState(raw uint64) State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) RawState(raw uint64) State</pre>
			<p>
RawState returns the current state of the specified raw key value.
</p>

		</span>
	
		
		<h1 id="Watcher.RawStates" class="hdr pkg hdr-method"><a href="#Watcher.RawStates" title="permalink">»</a>&nbsp;func (w *Watcher) RawStates() map[uint64]State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) RawStates() map[uint64]State</pre>
			<p>
RawStates returns an copy of the internal raw key state map used by this watcher.
</p>

		</span>
	
		
		<h1 id="Watcher.RawUp" class="hdr pkg hdr-method"><a href="#Watcher.RawUp" title="permalink">»</a>&nbsp;func (w *Watcher) RawUp(raw uint64) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) RawUp(raw uint64) bool</pre>
			<p>
RawUp tells whether the specified raw key value is currently in the up state.
</p>

		</span>
	
		
		<h1 id="Watcher.SetRawState" class="hdr pkg hdr-method"><a href="#Watcher.SetRawState" title="permalink">»</a>&nbsp;func (w *Watcher) SetRawState(raw uint64, state State) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) SetRawState(raw uint64, state State)</pre>
			<p>
SetRawState specifies the current state of the specified raw key value.
</p>

		</span>
	
		
		<h1 id="Watcher.SetState" class="hdr pkg hdr-method"><a href="#Watcher.SetState" title="permalink">»</a>&nbsp;func (w *Watcher) SetState(key Key, state State) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) SetState(key Key, state State)</pre>
			<p>
SetState specifies the current state of the specified key.
</p>

		</span>
	
		
		<h1 id="Watcher.State" class="hdr pkg hdr-method"><a href="#Watcher.State" title="permalink">»</a>&nbsp;func (w *Watcher) State(key Key) State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) State(key Key) State</pre>
			<p>
State returns the current state of the specified key.
</p>

		</span>
	
		
		<h1 id="Watcher.States" class="hdr pkg hdr-method"><a href="#Watcher.States" title="permalink">»</a>&nbsp;func (w *Watcher) States() map[Key]State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) States() map[Key]State</pre>
			<p>
States returns an copy of the internal key state map used by this watcher.
</p>

		</span>
	
		
		<h1 id="Watcher.String" class="hdr pkg hdr-method"><a href="#Watcher.String" title="permalink">»</a>&nbsp;func (w *Watcher) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) String() string</pre>
			<p>
String returns a multi-line string representation of this keyboard watcher
and it&#39;s associated states (but not raw ones).
</p>

		</span>
	
		
		<h1 id="Watcher.Up" class="hdr pkg hdr-method"><a href="#Watcher.Up" title="permalink">»</a>&nbsp;func (w *Watcher) Up(key Key) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) Up(key Key) bool</pre>
			<p>
Up tells whether the specified key is currently in the up state.
</p>

		</span>
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/keyboard/blob/v1/event.go" title="view source">event.go</a>
	
	<a href="https:/github.com/azul3d/keyboard/blob/v1/keys.go" title="view source">keys.go</a>
	
	<a href="https:/github.com/azul3d/keyboard/blob/v1/state.go" title="view source">state.go</a>
	
	<a href="https:/github.com/azul3d/keyboard/blob/v1/watcher.go" title="view source">watcher.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files"></span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div>Unless noted otherwise, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a BSD license.</div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



