

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">
		<title>Azul3D</title>
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>






































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package mouse</h1>
<span class="section pkg general">
	
		
			<p><em>Version 1</em></p>
		
	
	<span class="pkg import">import "azul3d.org/mouse.v1"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	

	
		
	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing the latest version of this package (v1).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="mouse.v1" title="azul3d.org/mouse.v1">v1</a> (latest version)</span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="mouse.dev" title="azul3d.org/mouse.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package mouse implements various mouse related data types.
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Button">type Button</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Button.String">func (b Button) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Event">type Event</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Event.String">func (e Event) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Event.Time">func (e Event) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Scrolled">type Scrolled</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Scrolled.String">func (ev Scrolled) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Scrolled.Time">func (ev Scrolled) Time() time.Time</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#State">type State</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#State.String">func (s State) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher">type Watcher</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewWatcher">func NewWatcher() *Watcher</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.Down">func (s *Watcher) Down(button Button) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.SetState">func (s *Watcher) SetState(button Button, state State)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.State">func (s *Watcher) State(button Button) State</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.States">func (s *Watcher) States() map[Button]State</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.String">func (w *Watcher) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Watcher.Up">func (s *Watcher) Up(button Button) bool</a></span></span>
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	Left	= One
	Right	= Two
	Wheel	= Three
)</pre>
		<p></p>
	
		<pre>const (
	Invalid	Button	= iota
	One
	Two
	Three
	Four
	Five
	Six
	Seven
	Eight
)</pre>
		<p></p>
	
		<pre>const (
	InvalidState	State	= iota
	Down
	Up
	ScrollForward
	ScrollBack
	ScrollLeft
	ScrollRight
)</pre>
		<p></p>
	
</span>













	
	<h1 id="Button" class="hdr pkg hdr-type"><a href="#Button" title="permalink">»</a>&nbsp;type Button <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Button int</pre>
		<p>
Button represents an single mouse button.
</p>

	</span>

	
	

	
	
		
		<h1 id="Button.String" class="hdr pkg hdr-method"><a href="#Button.String" title="permalink">»</a>&nbsp;func (b Button) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Button) String() string</pre>
			<p>
String returns an string representation of the mouse button.
</p>

		</span>
	

	
	<h1 id="Event" class="hdr pkg hdr-type"><a href="#Event" title="permalink">»</a>&nbsp;type Event <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Event struct {
	T	time.Time
	Button	Button
	State	State
}</pre>
		<p>
Event represents an single mouse event, such as pushing a button. Use the
Scrolled type instead for scrolling events.
</p>

	</span>

	
	

	
	
		
		<h1 id="Event.String" class="hdr pkg hdr-method"><a href="#Event.String" title="permalink">»</a>&nbsp;func (e Event) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (e Event) String() string</pre>
			<p>
String returns an string representation of this event.
</p>

		</span>
	
		
		<h1 id="Event.Time" class="hdr pkg hdr-method"><a href="#Event.Time" title="permalink">»</a>&nbsp;func (e Event) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (e Event) Time() time.Time</pre>
			<p>
Time returns the time at which this event occured.
</p>

		</span>
	

	
	<h1 id="Scrolled" class="hdr pkg hdr-type"><a href="#Scrolled" title="permalink">»</a>&nbsp;type Scrolled <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Scrolled struct {
	T	time.Time

	// Amount of scrolling in horizontal (X) and vertical (Y) directions.
	X, Y	float64
}</pre>
		<p>
Scrolled is an event where the user has scrolled their mouse wheel.
</p>

	</span>

	
	

	
	
		
		<h1 id="Scrolled.String" class="hdr pkg hdr-method"><a href="#Scrolled.String" title="permalink">»</a>&nbsp;func (ev Scrolled) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Scrolled) String() string</pre>
			<p>
String returns a string representation of this event.
</p>

		</span>
	
		
		<h1 id="Scrolled.Time" class="hdr pkg hdr-method"><a href="#Scrolled.Time" title="permalink">»</a>&nbsp;func (ev Scrolled) Time() time.Time <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (ev Scrolled) Time() time.Time</pre>
			<p>
Time implements the Event interface.
</p>

		</span>
	

	
	<h1 id="State" class="hdr pkg hdr-type"><a href="#State" title="permalink">»</a>&nbsp;type State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type State int</pre>
		<p>
State represents an single mouse state, such as Up, Down, or a scroll
direction.
</p>

	</span>

	
	

	
	
		
		<h1 id="State.String" class="hdr pkg hdr-method"><a href="#State.String" title="permalink">»</a>&nbsp;func (s State) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s State) String() string</pre>
			<p>
String returns an string representation of the mouse state.
</p>

		</span>
	

	
	<h1 id="Watcher" class="hdr pkg hdr-type"><a href="#Watcher" title="permalink">»</a>&nbsp;type Watcher <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Watcher struct {
	// contains filtered or unexported fields
}</pre>
		<p>
Watcher watches the state of various mouse buttons and their states.
</p>

	</span>

	
	
		<h1 id="NewWatcher" class="hdr pkg hdr-function"><a href="#NewWatcher" title="permalink">»</a>&nbsp;func NewWatcher() *Watcher <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewWatcher() *Watcher</pre>
			<p>
NewWatcher returns a new, initialized, mouse watcher.
</p>

		</span>
	

	
	
		
		<h1 id="Watcher.Down" class="hdr pkg hdr-method"><a href="#Watcher.Down" title="permalink">»</a>&nbsp;func (s *Watcher) Down(button Button) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s *Watcher) Down(button Button) bool</pre>
			<p>
Down tells whether the specified mouse button is currently in the down state.
</p>

		</span>
	
		
		<h1 id="Watcher.SetState" class="hdr pkg hdr-method"><a href="#Watcher.SetState" title="permalink">»</a>&nbsp;func (s *Watcher) SetState(button Button, state State) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s *Watcher) SetState(button Button, state State)</pre>
			<p>
SetState specifies the current state of the specified mouse button.
</p>

		</span>
	
		
		<h1 id="Watcher.State" class="hdr pkg hdr-method"><a href="#Watcher.State" title="permalink">»</a>&nbsp;func (s *Watcher) State(button Button) State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s *Watcher) State(button Button) State</pre>
			<p>
State returns the current state of the specified mouse button.
</p>

		</span>
	
		
		<h1 id="Watcher.States" class="hdr pkg hdr-method"><a href="#Watcher.States" title="permalink">»</a>&nbsp;func (s *Watcher) States() map[Button]State <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s *Watcher) States() map[Button]State</pre>
			<p>
States returns an copy of the internal mouse button state map used by this watcher.
</p>

		</span>
	
		
		<h1 id="Watcher.String" class="hdr pkg hdr-method"><a href="#Watcher.String" title="permalink">»</a>&nbsp;func (w *Watcher) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Watcher) String() string</pre>
			<p>
String returns a multi-line string representation of this mouse watcher and
it&#39;s associated states.
</p>

		</span>
	
		
		<h1 id="Watcher.Up" class="hdr pkg hdr-method"><a href="#Watcher.Up" title="permalink">»</a>&nbsp;func (s *Watcher) Up(button Button) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s *Watcher) Up(button Button) bool</pre>
			<p>
Up tells whether the specified mouse button is currently in the up state.
</p>

		</span>
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/mouse/blob/v1/event.go" title="view source">event.go</a>
	
	<a href="https:/github.com/azul3d/mouse/blob/v1/mouse.go" title="view source">mouse.go</a>
	
	<a href="https:/github.com/azul3d/mouse/blob/v1/watcher.go" title="view source">watcher.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files"></span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div>Unless noted otherwise, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a BSD license.</div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



