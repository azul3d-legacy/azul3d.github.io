

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">
		
			<title>Azul3D</title>
		
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>






































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc">Doc</a> | <a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package tmx</h1>
<span class="section pkg general">
	
		<p><em>In Development</em></p>
	
	<span class="pkg import">import "azul3d.org/tmx.dev"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	
		<h2>WARNING!</h2>
		<span class="sub">
			
				<p>This version is the in-development -- <em><strong>unstable</strong></em> -- version of this package. Backwards incompatible changes will be made to this package in the future and as such <em>you should not use this version</em>! Please use the latest release <a href="/tmx.dev">here</a>.</p>
			
		</span>
	

	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing the latest version of this package (dev).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="tmx.dev" title="azul3d.org/tmx.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package tmx implements routines for rendering tmx maps.
</p>
<p>
It loads a 2D tmx map into a few meshes stored in a *gfx.Object and applies
textures such that it would render properly.
</p>
<p>
At present the package only supports orthogonal tile map rendering, and has
some issues with proper ordering of perspective (I.e. non-uniformly sized)
tiles (see for instance tiled-qt/examples/perspective_walls.tmx).
</p>
<p>
Package tmx implements a Tiled Map XML file loader.
</p>
<p>
The Tiled Map XML file specification can be found at:
</p>
<pre><a href="https://github.com/bjorn/tiled/wiki/TMX-Map-Format">https://github.com/bjorn/tiled/wiki/TMX-Map-Format</a>
</pre>
<p>
This package supports all of the current file specification with the
exception of embedded image data (I.e. non-external tileset images).
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#variables">Variables</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Load">func Load(m *Map, c *Config, tsImages map[string]*image.RGBA) (layers map[string]map[string]*gfx.Object)</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Config">type Config</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Coord">type Coord</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ellipse">type Ellipse</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Image">type Image</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Image.String">func (i *Image) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Layer">type Layer</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Layer.String">func (l *Layer) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Map">type Map</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LoadFile">func LoadFile(path string, c *Config) (*Map, map[string]map[string]*gfx.Object, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Parse">func Parse(data []byte) (*Map, error)</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Map.FindTileset">func (m *Map) FindTileset(gid uint32) *Tileset</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Map.String">func (m *Map) String() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Map.TilesetRect">func (m *Map) TilesetRect(ts *Tileset, width, height int, spacingAndMargins bool, gid uint32) image.Rectangle</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Map.TilesetTile">func (m *Map) TilesetTile(ts *Tileset, gid uint32) *Tile</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Object">type Object</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Object.String">func (o *Object) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ObjectGroup">type ObjectGroup</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ObjectGroup.String">func (o *ObjectGroup) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Orientation">type Orientation</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Point">type Point</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Polygon">type Polygon</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Polyline">type Polyline</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TerrainType">type TerrainType</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Tile">type Tile</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Tile.String">func (t *Tile) String() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Tileset">type Tileset</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Tileset.Load">func (t *Tileset) Load(data []byte) error</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Tileset.String">func (t *Tileset) String() string</a></span></span>
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	// Flags representing horizontal, vertical, and diagonal tile flipping.
	// These can be used in combination with gid&#39;s, like so:
	//
	// if (gid &amp; FLIPPED_HORIZONTALLY_FLAG) &gt; 0 {
	//     ...draw the tiled flipped horizontally...
	// }
	FLIPPED_HORIZONTALLY_FLAG	uint32	= 0x80000000
	FLIPPED_VERTICALLY_FLAG		uint32	= 0x40000000
	FLIPPED_DIAGONALLY_FLAG		uint32	= 0x20000000
)</pre>
		<p></p>
	
		<pre>const (
	// Invalid orientation for catching zero-value related issues
	Invalid	Orientation	= iota

	// Orthogonal map orientation
	Orthogonal

	// Isometric map orientation
	Isometric

	// Staggered map orientation
	Staggered
)</pre>
		<p></p>
	
</span>





<h1 id="variables" class="hdr pkg hdr-variables"><a href="#variables" title="permalink">»</a>&nbsp;Variables <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg variables">
	
		<pre>var (
	// Error representing an unknown encoding method inside of a tmx file
	ErrBadEncoding	= errors.New(&#34;tile data encoding type is not supported&#34;)

	// Error representing an unknown compression method inside of a tmx file
	ErrBadCompression	= errors.New(&#34;tile data compression type is not supported&#34;)
)</pre>
		<p></p>
	
		<pre>var (
	Shader *gfx.Shader
)</pre>
		<p></p>
	
</span>





	<h1 id="Load" class="hdr pkg hdr-function"><a href="#Load" title="permalink">»</a>&nbsp;func Load(m *Map, c *Config, tsImages map[string]*image.RGBA) (layers map[string]map[string]*gfx.Object) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Load(m *Map, c *Config, tsImages map[string]*image.RGBA) (layers map[string]map[string]*gfx.Object)</pre>
		<p>
Load loads the given tmx map, m, and returns a slice of *gfx.Object with the
proper meshes and textures attached to them.
</p>
<p>
If the configuration, c, is non-nil then it is used in place of the default
configuration.
</p>
<p>
The tsImages map should be a map of tileset image filenames and their
associated loaded RGBA images. Tiles who reference tilesets who are not
found in the map will be omited (not rendered) in the returned objects.
</p>

	</span>





	
	<h1 id="Config" class="hdr pkg hdr-type"><a href="#Config" title="permalink">»</a>&nbsp;type Config <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Config struct {
	// The value which is used to offset each layer on the Y axis.
	LayerOffset	float64

	// The value to offset each individual tile from one another on the Y axis.
	TileOffset	float64
}</pre>
		<p>
Config represents a tmx mesh configuration
</p>

	</span>

	
	

	
	

	
	<h1 id="Coord" class="hdr pkg hdr-type"><a href="#Coord" title="permalink">»</a>&nbsp;type Coord <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Coord struct {
	X, Y int
}</pre>
		<p>
Coord represents a single 2D coordinate pair (x, y)
</p>

	</span>

	
	

	
	

	
	<h1 id="Ellipse" class="hdr pkg hdr-type"><a href="#Ellipse" title="permalink">»</a>&nbsp;type Ellipse <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Ellipse struct {
	// The position and size of the ellipse.
	//
	// These values are identical to the parent object&#39;s fields of the same
	// name, they are only provided for convenience.
	X, Y, Width, Height int
}</pre>
		<p>
Ellipse represents an ellipse object, found in the Object.Value field.
</p>

	</span>

	
	

	
	

	
	<h1 id="Image" class="hdr pkg hdr-type"><a href="#Image" title="permalink">»</a>&nbsp;type Image <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Image struct {
	// Format of the embedded image data (if any).
	Format	string

	// The file path at which the image may be found
	Source	string

	// The color in the image representing transparency (if any).
	//
	// The alpha (A) component of the color will always be 255.
	Trans	color.RGBA

	// The width and height of the image (useful mostly only for correction
	// when the image&#39;s size changes from that known to the TMX file).
	Width, Height	int
}</pre>
		<p>
Image represents the source and properties of a image
</p>

	</span>

	
	

	
	
		
		<h1 id="Image.String" class="hdr pkg hdr-method"><a href="#Image.String" title="permalink">»</a>&nbsp;func (i *Image) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (i *Image) String() string</pre>
			<p>
String returns a string representation of this image.
</p>

		</span>
	

	
	<h1 id="Layer" class="hdr pkg hdr-type"><a href="#Layer" title="permalink">»</a>&nbsp;type Layer <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Layer struct {
	// The name of the layer.
	Name	string

	// Value between 0 and 1 representing the opacity of the layer.
	Opacity	float64

	// Boolean value representing whether or not the layer is visible.
	Visible	bool

	// A map of 2D coordinates in this layer to so called &#34;global tile IDs&#34;
	// (gids).
	//
	// 2D coordinates whose gid&#39;s are zero (I.e. &#39;no tile&#39;) are not stored in
	// the map for efficiency reasons (as a good majority are zero).
	//
	// gids are global, since they may refere to a tile from any of the
	// tilesets used by the map. In order to find out from which tileset the
	// tile is you need to find the tileset with the highest Firstgid that is
	// still lower or equal than the gid. The tilesets are always stored with
	// increasing firstgids.
	Tiles	map[Coord]uint32
}</pre>
		<p>
Layer represents a single map layer and all of it&#39;s tiles
</p>

	</span>

	
	

	
	
		
		<h1 id="Layer.String" class="hdr pkg hdr-method"><a href="#Layer.String" title="permalink">»</a>&nbsp;func (l *Layer) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (l *Layer) String() string</pre>
			<p>
String returns a string representation of this layer.
</p>

		</span>
	

	
	<h1 id="Map" class="hdr pkg hdr-type"><a href="#Map" title="permalink">»</a>&nbsp;type Map <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Map struct {
	// Version of the map.
	//
	// E.g. VersionMajor=1, VersionMinor=0 for &#34;1.0&#34;
	VersionMajor, VersionMinor	int

	// Orientation of the map.
	//
	// Like &#34;orthogonal&#34;, &#34;isometric&#34; or &#34;staggered&#34;.
	Orientation	Orientation

	// Width and height of the map in tiles.
	Width, Height	int

	// Width and height of a tile in pixels.
	TileWidth, TileHeight	int

	// Background color of the map.
	//
	// Like &#34;#FF0000&#34;.
	BackgroundColor	color.RGBA

	// Map of property names and values for all properties set on the map.
	Properties	map[string]string

	// A list of all loaded tilesets of this map.
	Tilesets	[]*Tileset

	// A list of all the layers of this map.
	Layers	[]*Layer

	// A list of all the object groups in this map.
	ObjectGroups	[]*ObjectGroup
}</pre>
		<p>
Map represents a single TMX map file.
</p>
<p>
Although TileWidth and TileHeight describe the general size of tiles in
pixels, individual tiles may have different sizes. Larger tiles will extend
at the top and right (E.g. they are anchored to the bottom left).
</p>

	</span>

	
	
		<h1 id="LoadFile" class="hdr pkg hdr-function"><a href="#LoadFile" title="permalink">»</a>&nbsp;func LoadFile(path string, c *Config) (*Map, map[string]map[string]*gfx.Object, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func LoadFile(path string, c *Config) (*Map, map[string]map[string]*gfx.Object, error)</pre>
			<p>
LoadFile works just like Load except it loads all associated dependencies
(external tsx tileset files, tileset texture images) for you.
</p>
<p>
Advanced clients who wish to have more control over file IO will use Load()
directly instead of using this function.
</p>

		</span>
	
		<h1 id="Parse" class="hdr pkg hdr-function"><a href="#Parse" title="permalink">»</a>&nbsp;func Parse(data []byte) (*Map, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func Parse(data []byte) (*Map, error)</pre>
			<p>
Parse parses the TMX map file data and returns a *Map.
</p>
<p>
nil and a error will be returned if there are any problems parsing the data.
</p>

		</span>
	

	
	
		
		<h1 id="Map.FindTileset" class="hdr pkg hdr-method"><a href="#Map.FindTileset" title="permalink">»</a>&nbsp;func (m *Map) FindTileset(gid uint32) *Tileset <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Map) FindTileset(gid uint32) *Tileset</pre>
			<p>
FindTileset returns the proper tileset for the given global tile id.
</p>
<p>
If the global tile id is invalid this function will return nil.
</p>

		</span>
	
		
		<h1 id="Map.String" class="hdr pkg hdr-method"><a href="#Map.String" title="permalink">»</a>&nbsp;func (m *Map) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Map) String() string</pre>
			<p>
String returns a string representation of this map.
</p>

		</span>
	
		
		<h1 id="Map.TilesetRect" class="hdr pkg hdr-method"><a href="#Map.TilesetRect" title="permalink">»</a>&nbsp;func (m *Map) TilesetRect(ts *Tileset, width, height int, spacingAndMargins bool, gid uint32) image.Rectangle <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Map) TilesetRect(ts *Tileset, width, height int, spacingAndMargins bool, gid uint32) image.Rectangle</pre>
			<p>
TilesetRect returns a image rectangle describing what part of the tileset
image represents the tile for the given gid.
</p>
<p>
The image width and height must be passed as parameters because
ts.Image.Width and ts.Image.Height are not always available.
</p>
<p>
If spacingAndMargins is true, then spacing and margins are applied to the
rectangle.
</p>

		</span>
	
		
		<h1 id="Map.TilesetTile" class="hdr pkg hdr-method"><a href="#Map.TilesetTile" title="permalink">»</a>&nbsp;func (m *Map) TilesetTile(ts *Tileset, gid uint32) *Tile <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Map) TilesetTile(ts *Tileset, gid uint32) *Tile</pre>
			<p>
TilesetTile returns the proper tile definition for the given global tile id.
</p>
<p>
If there is no tile definition for the given gid (can be common), or if the
global tile id is invalid this function will return nil.
</p>

		</span>
	

	
	<h1 id="Object" class="hdr pkg hdr-type"><a href="#Object" title="permalink">»</a>&nbsp;type Object <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Object struct {
	// The name of this object.
	Name	string

	// The type of this object, which is an arbitrary string.
	Type	string

	// The X and Y coordinates, as well as the width and height of this object
	// in pixels.
	X, Y, Width, Height	int

	// The rotation of this object in degrees clockwise.
	Rotation	float64

	// Reference to a tile (optional). If it is non-zero then this object is
	// represented by the image of the tile with this global ID. Currently that
	// means width and height are ignored for such objects. The image alignment
	// currently depends on the map orientation:
	//  Orthogonal - Aligned to the bottom-left
	//  Isometric - Aligned to the bottom-center
	Gid	uint32

	// Boolean value representing whether or not the object group is visible.
	Visible	bool

	// Map of properties for this object group.
	Properties	map[string]string

	// Value represents the underlying object value (which is sometimes nil).
	// You can use a type switch to determine it&#39;s value:
	//  switch v := obj.Value.(type) {
	//  case *tmx.Ellipse: handleEllipse(obj, v)
	//  case *tmx.Polygon: handlePolygon(obj, v)
	//  case *tmx.Polyline: handlePolyline(obj, v)
	//  case *tmx.Image: handleImage(obj, v)
	//  }
	Value	interface{}
}</pre>
		<p>
Object represents a single object, which are generally used to add custom
information to tile maps, like collision information, spawn points, etc.
</p>

	</span>

	
	

	
	
		
		<h1 id="Object.String" class="hdr pkg hdr-method"><a href="#Object.String" title="permalink">»</a>&nbsp;func (o *Object) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (o *Object) String() string</pre>
			<p>
String returns a string representation of this object, like:
</p>
<pre>Object(Name=&#34;the name&#34;, X=%d, Y=%d, Width=%d, Height=%d)
</pre>

		</span>
	

	
	<h1 id="ObjectGroup" class="hdr pkg hdr-type"><a href="#ObjectGroup" title="permalink">»</a>&nbsp;type ObjectGroup <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type ObjectGroup struct {
	// The name of this object group.
	Name	string

	// Color of this object group.
	Color	color.RGBA

	// Value between 0 and 1 representing the opacity of the object group.
	Opacity	float64

	// Boolean value representing whether or not the object group is visible.
	Visible	bool

	// Map of properties for this object group.
	Properties	map[string]string

	// List of objects in this object group.
	Objects	[]*Object
}</pre>
		<p>
ObjectGroup represents a group of objects.
</p>

	</span>

	
	

	
	
		
		<h1 id="ObjectGroup.String" class="hdr pkg hdr-method"><a href="#ObjectGroup.String" title="permalink">»</a>&nbsp;func (o *ObjectGroup) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (o *ObjectGroup) String() string</pre>
			<p>
String returns a string representation of this object group, like:
</p>
<pre>ObjectGroup(Name=&#34;the name&#34;, 500 objects)
</pre>

		</span>
	

	
	<h1 id="Orientation" class="hdr pkg hdr-type"><a href="#Orientation" title="permalink">»</a>&nbsp;type Orientation <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Orientation int</pre>
		<p>
Orientation represents the map&#39;s orientation. It will always be one of the
predefined Orientation constants and will never be Invalid.
</p>

	</span>

	
	

	
	

	
	<h1 id="Point" class="hdr pkg hdr-type"><a href="#Point" title="permalink">»</a>&nbsp;type Point <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Point struct {
	X, Y int
}</pre>
		<p>
Point represents a single point.
</p>

	</span>

	
	

	
	

	
	<h1 id="Polygon" class="hdr pkg hdr-type"><a href="#Polygon" title="permalink">»</a>&nbsp;type Polygon <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Polygon struct {
	// The position/origin of the polygon.
	//
	// These values are identical to the parent object&#39;s fields of the same
	// name, they are only provided for convenience.
	X, Y	int

	// Points making up the polygon, in pixels.
	Points	[]Point
}</pre>
		<p>
Polygon represents a polygon object, found in the Object.Value field.
</p>

	</span>

	
	

	
	

	
	<h1 id="Polyline" class="hdr pkg hdr-type"><a href="#Polyline" title="permalink">»</a>&nbsp;type Polyline <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Polyline struct {
	// The position/origin of the polyline.
	//
	// These values are identical to the parent object&#39;s fields of the same
	// name, they are only provided for convenience.
	X, Y	int

	// Points making up the polyline, in pixels.
	Points	[]Point
}</pre>
		<p>
Polyline represents a polyline object, found in the Object.Value field.
</p>

	</span>

	
	

	
	

	
	<h1 id="TerrainType" class="hdr pkg hdr-type"><a href="#TerrainType" title="permalink">»</a>&nbsp;type TerrainType <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TerrainType struct {
	// Name of the terrain type
	Name	string

	// Tile ID
	Tile	int
}</pre>
		<p>
TerrainType defines a single terrain with a name and associated tile ID
</p>

	</span>

	
	

	
	

	
	<h1 id="Tile" class="hdr pkg hdr-type"><a href="#Tile" title="permalink">»</a>&nbsp;type Tile <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Tile struct {
	// The ID of the tile
	ID	int

	// An array defining the terrain type of each corner of the tile, as indices
	// into the terrain types slice of the tileset this tile came from, in the
	// order of: top left, top right, bottom left, bottom right.
	//
	// -1 values have a meaning of &#39;no terrain&#39;.
	Terrain	[4]int

	// Percentage chance indicating the probability that this tile is chosen
	// when editing with the terrain tool.
	Probability	float64

	// Map of properties for the tile
	Properties	map[string]string

	// Image for the tile
	Image	*Image
}</pre>
		<p>
Tile represents a single tile definition and it&#39;s properties
</p>

	</span>

	
	

	
	
		
		<h1 id="Tile.String" class="hdr pkg hdr-method"><a href="#Tile.String" title="permalink">»</a>&nbsp;func (t *Tile) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t *Tile) String() string</pre>
			<p>
String returns a string representation of this tileset.
</p>

		</span>
	

	
	<h1 id="Tileset" class="hdr pkg hdr-type"><a href="#Tileset" title="permalink">»</a>&nbsp;type Tileset <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Tileset struct {
	// The name of this tileset.
	Name	string

	// The first global tile ID of this tileset (this global ID maps to the
	// first tile in this tileset).
	Firstgid	uint32

	// The tilset source (tsx) file, if this tileset was loaded externally from
	// the TMX map.
	Source	string

	// The maximum width/height of tiles in this tileset in pixels.
	Width, Height	int

	// The horizontal and vertical offset of tiles in this tileset in pixels,
	// where &#43;Y is down.
	OffsetX, OffsetY	int

	// The spacing in pixels between the tiles in this tileset.
	Spacing	int

	// The margin in pixels around the tiles in this tileset.
	Margin	int

	// Map of property names and values for all properties set on the map.
	Properties	map[string]string

	// The image of the tileset
	Image	*Image

	// Tiles represents a map of tile ID&#39;s and their associated definitions.
	Tiles	map[int]*Tile

	// The slice of terrain types
	Terrain	[]TerrainType
}</pre>
		<p>
Tileset represents a tileset of a map, as loaded from the TMX file or from
a external TSX file.
</p>

	</span>

	
	

	
	
		
		<h1 id="Tileset.Load" class="hdr pkg hdr-method"><a href="#Tileset.Load" title="permalink">»</a>&nbsp;func (t *Tileset) Load(data []byte) error <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t *Tileset) Load(data []byte) error</pre>
			<p>
Load loads the specified data as this tileset or returns a error if the data
is invalid.
</p>
<p>
If len(m.Source) == nil (I.e. if this tileset is not an external tsx file)
then a panic will occur.
</p>
<p>
Clients should ensure properly synchronized read/write access to the tileset
structure as this function write&#39;s to it&#39;s memory and does not attempt any
synchronization with other goroutines who are reading from it (data race).
</p>

		</span>
	
		
		<h1 id="Tileset.String" class="hdr pkg hdr-method"><a href="#Tileset.String" title="permalink">»</a>&nbsp;func (t *Tileset) String() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t *Tileset) String() string</pre>
			<p>
String returns a string representation of this tileset.
</p>

		</span>
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/tmx/blob/dev/data.go" title="view source">data.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/gfx.go" title="view source">gfx.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/image.go" title="view source">image.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/layer.go" title="view source">layer.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/map.go" title="view source">map.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/object.go" title="view source">object.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/objectgroup.go" title="view source">objectgroup.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/orientation.go" title="view source">orientation.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/tile.go" title="view source">tile.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/tileset.go" title="view source">tileset.go</a>
	
	<a href="https:/github.com/azul3d/tmx/blob/dev/tmx.go" title="view source">tmx.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files">
		<h2>Test Files</h2>
		<p>
		<a href="https:/github.com/azul3d/tmx/blob/dev/tmx_test.go" title="view source">tmx_test.go</a>
		</p>
	</span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div>Unless noted otherwise, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a BSD license.</div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



