

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">
		<title>Azul3D</title>
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>




































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package gles2</h1>
<span class="section pkg general">
	
		<p><em>In Development</em></p>
	
	<span class="pkg import">import "azul3d.org/native/gles2.v0"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	
		<h2>WARNING!</h2>
		<span class="sub">
			
				<p>This version is the in-development -- <em><strong>unstable</strong></em> -- version of this package. Backwards incompatable changes will be made to this package in the future and as such <em>you should not use this version</em>! Please use the latest release <a href="/native/gles2.v1">here</a>.</p>
			
		</span>
	

	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing an older version of this package (v0).</p>
	
	<p>Other versions of this package are available as follows. Version zero (v0) is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/gles2.v1" title="azul3d.org/native/gles2.v1">v1</a> (latest version)</span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/gles2.v0" title="azul3d.org/native/gles2.v0">v0</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package gles2 implements Go bindings to OpenGL ES.
</p>
<p>
Debugging OpenGL applications is made easy by using the build tag for this
package &#34;opengl_debug&#34;, that is:
</p>
<p>
go install -tags &#34;opengl_debug&#34; my/package/path
</p>
<p>
Debugging using this build tag has both advantages and disadvantages:
</p>
<p>
Advantage: glGetError() is ran directly after each OpenGL function call for
you, and in the event of an error a panic will occur in addition to a full
OpenGL stack trace being dumped to stdout before the panic occurs.
</p>
<p>
Advantage: Batching cannot be turned on, this can help identify batching
related bugs (due to incorrect memory management).
</p>
<p>
Disadvantage: Applications compiled with the opengl_debug build tag are slow
and will not run at full speed due to both disabled batching and the
additional glGetError call for each OpenGL call.
</p>
<p>
Package gles2 implements Go bindings to OpenGL ES.
</p>
<p>
Debugging OpenGL applications is made easy by using the build tag for this
package &#34;opengl_debug&#34;, that is:
</p>
<p>
go install -tags &#34;opengl_debug&#34; my/package/path
</p>
<p>
Debugging using this build tag has both advantages and disadvantages:
</p>
<p>
Advantage: glGetError() is ran directly after each OpenGL function call for
you, and in the event of an error a panic will occur in addition to a full
OpenGL stack trace being dumped to stdout before the panic occurs.
</p>
<p>
Advantage: Batching cannot be turned on, this can help identify batching
related bugs (due to incorrect memory management).
</p>
<p>
Disadvantage: Applications compiled with the opengl_debug build tag are slow
and will not run at full speed due to both disabled batching and the
additional glGetError call for each OpenGL call.
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Bool">func Bool(v uint8) bool</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ByteString">func ByteString(v *byte) string</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GLBool">func GLBool(v bool) uint8</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#String">func String(v *uint8) string</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context">type Context</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#New">func New() *Context</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ActiveShaderProgram">func (c *Context) ActiveShaderProgram(pipeline uint32, program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ActiveTexture">func (c *Context) ActiveTexture(texture int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastRelease">func (c *Context) AtLeastRelease(minRelease int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastShaderRelease">func (c *Context) AtLeastShaderRelease(minRelease int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastShaderVersion">func (c *Context) AtLeastShaderVersion(minMajor, minMinor int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastVersion">func (c *Context) AtLeastVersion(minMajor, minMinor int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AttachShader">func (c *Context) AttachShader(program uint32, shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Batching">func (c *Context) Batching() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BeginQuery">func (c *Context) BeginQuery(target int32, id uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BeginTransformFeedback">func (c *Context) BeginTransformFeedback(primitiveMode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindAttribLocation">func (c *Context) BindAttribLocation(program uint32, index uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBuffer">func (c *Context) BindBuffer(target int32, buffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBufferBase">func (c *Context) BindBufferBase(target int32, index uint32, buffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBufferRange">func (c *Context) BindBufferRange(target int32, index uint32, buffer uint32, offset uintptr, size uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindFramebuffer">func (c *Context) BindFramebuffer(target int32, framebuffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindImageTexture">func (c *Context) BindImageTexture(unit uint32, texture uint32, level int32, layered uint8, layer int32, access int32, format int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindProgramPipeline">func (c *Context) BindProgramPipeline(pipeline uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindRenderbuffer">func (c *Context) BindRenderbuffer(target int32, renderbuffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindSampler">func (c *Context) BindSampler(unit uint32, sampler uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindTexture">func (c *Context) BindTexture(target int32, texture uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindTransformFeedback">func (c *Context) BindTransformFeedback(target int32, id uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindVertexArray">func (c *Context) BindVertexArray(array uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindVertexBuffer">func (c *Context) BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendColor">func (c *Context) BlendColor(red float32, green float32, blue float32, alpha float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendEquation">func (c *Context) BlendEquation(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendEquationSeparate">func (c *Context) BlendEquationSeparate(modeRGB int32, modeAlpha int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendFunc">func (c *Context) BlendFunc(sfactor int32, dfactor int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendFuncSeparate">func (c *Context) BlendFuncSeparate(sfactorRGB int32, dfactorRGB int32, sfactorAlpha int32, dfactorAlpha int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlitFramebuffer">func (c *Context) BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BufferData">func (c *Context) BufferData(target int32, size uintptr, data unsafe.Pointer, usage int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BufferSubData">func (c *Context) BufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CheckFramebufferStatus">func (c *Context) CheckFramebufferStatus(target int32) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Clear">func (c *Context) Clear(mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferfi">func (c *Context) ClearBufferfi(buffer int32, drawbuffer int32, depth float32, stencil int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferfv">func (c *Context) ClearBufferfv(buffer int32, drawbuffer int32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferiv">func (c *Context) ClearBufferiv(buffer int32, drawbuffer int32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferuiv">func (c *Context) ClearBufferuiv(buffer int32, drawbuffer int32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearColor">func (c *Context) ClearColor(red float32, green float32, blue float32, alpha float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearDepthf">func (c *Context) ClearDepthf(d float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearStencil">func (c *Context) ClearStencil(s int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClientWaitSync">func (c *Context) ClientWaitSync(sync Sync, flags uint32, timeout uint64) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorMask">func (c *Context) ColorMask(red uint8, green uint8, blue uint8, alpha uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompileShader">func (c *Context) CompileShader(shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexImage2D">func (c *Context) CompressedTexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexImage3D">func (c *Context) CompressedTexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexSubImage2D">func (c *Context) CompressedTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexSubImage3D">func (c *Context) CompressedTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyBufferSubData">func (c *Context) CopyBufferSubData(readTarget int32, writeTarget int32, readOffset uintptr, writeOffset uintptr, size uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexImage2D">func (c *Context) CopyTexImage2D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, height uint32, border int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexSubImage2D">func (c *Context) CopyTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexSubImage3D">func (c *Context) CopyTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CreateProgram">func (c *Context) CreateProgram() uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CreateShader">func (c *Context) CreateShader(pType int32) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CreateShaderProgramv">func (c *Context) CreateShaderProgramv(pType int32, count uint32, strings **byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CullFace">func (c *Context) CullFace(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteBuffers">func (c *Context) DeleteBuffers(n uint32, buffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteFramebuffers">func (c *Context) DeleteFramebuffers(n uint32, framebuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteProgram">func (c *Context) DeleteProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteProgramPipelines">func (c *Context) DeleteProgramPipelines(n uint32, pipelines *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteQueries">func (c *Context) DeleteQueries(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteRenderbuffers">func (c *Context) DeleteRenderbuffers(n uint32, renderbuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteSamplers">func (c *Context) DeleteSamplers(count uint32, samplers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteShader">func (c *Context) DeleteShader(shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteSync">func (c *Context) DeleteSync(sync Sync)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteTextures">func (c *Context) DeleteTextures(n uint32, textures *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteTransformFeedbacks">func (c *Context) DeleteTransformFeedbacks(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteVertexArrays">func (c *Context) DeleteVertexArrays(n uint32, arrays *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthFunc">func (c *Context) DepthFunc(pFunc int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthMask">func (c *Context) DepthMask(flag uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthRangef">func (c *Context) DepthRangef(n float32, f float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DetachShader">func (c *Context) DetachShader(program uint32, shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Disable">func (c *Context) Disable(cap int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DisableVertexAttribArray">func (c *Context) DisableVertexAttribArray(index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DispatchCompute">func (c *Context) DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DispatchComputeIndirect">func (c *Context) DispatchComputeIndirect(indirect uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawArrays">func (c *Context) DrawArrays(mode int32, first int32, count uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawArraysIndirect">func (c *Context) DrawArraysIndirect(mode int32, indirect unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawArraysInstanced">func (c *Context) DrawArraysInstanced(mode int32, first int32, count uint32, instancecount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawBuffers">func (c *Context) DrawBuffers(n uint32, bufs *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElements">func (c *Context) DrawElements(mode int32, count uint32, pType int32, indices unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsIndirect">func (c *Context) DrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsInstanced">func (c *Context) DrawElementsInstanced(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawRangeElements">func (c *Context) DrawRangeElements(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Enable">func (c *Context) Enable(cap int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EnableVertexAttribArray">func (c *Context) EnableVertexAttribArray(index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EndQuery">func (c *Context) EndQuery(target int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EndTransformFeedback">func (c *Context) EndTransformFeedback()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Execute">func (c *Context) Execute()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Extension">func (c *Context) Extension(name string) (supported bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Extensions">func (c *Context) Extensions() []string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FenceSync">func (c *Context) FenceSync(condition int32, flags uint32) Sync</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Finish">func (c *Context) Finish()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Flush">func (c *Context) Flush()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FlushMappedBufferRange">func (c *Context) FlushMappedBufferRange(target int32, offset uintptr, length uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferParameteri">func (c *Context) FramebufferParameteri(target int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferRenderbuffer">func (c *Context) FramebufferRenderbuffer(target int32, attachment int32, renderbuffertarget int32, renderbuffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferTexture2D">func (c *Context) FramebufferTexture2D(target int32, attachment int32, textarget int32, texture uint32, level int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferTextureLayer">func (c *Context) FramebufferTextureLayer(target int32, attachment int32, texture uint32, level int32, layer int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FrontFace">func (c *Context) FrontFace(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenBuffers">func (c *Context) GenBuffers(n uint32, buffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenFramebuffers">func (c *Context) GenFramebuffers(n uint32, framebuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenProgramPipelines">func (c *Context) GenProgramPipelines(n uint32, pipelines *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenQueries">func (c *Context) GenQueries(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenRenderbuffers">func (c *Context) GenRenderbuffers(n uint32, renderbuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenSamplers">func (c *Context) GenSamplers(count uint32, samplers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenTextures">func (c *Context) GenTextures(n uint32, textures *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenTransformFeedbacks">func (c *Context) GenTransformFeedbacks(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenVertexArrays">func (c *Context) GenVertexArrays(n uint32, arrays *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenerateMipmap">func (c *Context) GenerateMipmap(target int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveAttrib">func (c *Context) GetActiveAttrib(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniform">func (c *Context) GetActiveUniform(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniformBlockName">func (c *Context) GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize uint32, length *uint32, uniformBlockName *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniformBlockiv">func (c *Context) GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniformsiv">func (c *Context) GetActiveUniformsiv(program uint32, uniformCount uint32, uniformIndices *uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetAttachedShaders">func (c *Context) GetAttachedShaders(program uint32, maxCount uint32, count *uint32, shaders *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetAttribLocation">func (c *Context) GetAttribLocation(program uint32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBooleani_v">func (c *Context) GetBooleani_v(target int32, index uint32, data *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBooleanv">func (c *Context) GetBooleanv(pname int32, data *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBufferParameteri64v">func (c *Context) GetBufferParameteri64v(target int32, pname int32, params *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBufferParameteriv">func (c *Context) GetBufferParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBufferPointerv">func (c *Context) GetBufferPointerv(target int32, pname int32, params *unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetError">func (c *Context) GetError() int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFloatv">func (c *Context) GetFloatv(pname int32, data *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFragDataLocation">func (c *Context) GetFragDataLocation(program uint32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFramebufferAttachmentParameteriv">func (c *Context) GetFramebufferAttachmentParameteriv(target int32, attachment int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFramebufferParameteriv">func (c *Context) GetFramebufferParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetInteger64i_v">func (c *Context) GetInteger64i_v(target int32, index uint32, data *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetInteger64v">func (c *Context) GetInteger64v(pname int32, data *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetIntegeri_v">func (c *Context) GetIntegeri_v(target int32, index uint32, data *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetIntegerv">func (c *Context) GetIntegerv(pname int32, data *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetInternalformativ">func (c *Context) GetInternalformativ(target int32, internalformat int32, pname int32, bufSize uint32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetMultisamplefv">func (c *Context) GetMultisamplefv(pname int32, index uint32, val *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramBinary">func (c *Context) GetProgramBinary(program uint32, bufSize uint32, length *uint32, binaryFormat *int32, binary unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramInfoLog">func (c *Context) GetProgramInfoLog(program uint32, bufSize uint32, length *uint32, infoLog *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramInterfaceiv">func (c *Context) GetProgramInterfaceiv(program uint32, programInterface int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramPipelineInfoLog">func (c *Context) GetProgramPipelineInfoLog(pipeline uint32, bufSize uint32, length *uint32, infoLog *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramPipelineiv">func (c *Context) GetProgramPipelineiv(pipeline uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceIndex">func (c *Context) GetProgramResourceIndex(program uint32, programInterface int32, name *byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceLocation">func (c *Context) GetProgramResourceLocation(program uint32, programInterface int32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceName">func (c *Context) GetProgramResourceName(program uint32, programInterface int32, index uint32, bufSize uint32, length *uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceiv">func (c *Context) GetProgramResourceiv(program uint32, programInterface int32, index uint32, propCount uint32, props *int32, bufSize uint32, length *uint32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramiv">func (c *Context) GetProgramiv(program uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryObjectuiv">func (c *Context) GetQueryObjectuiv(id uint32, pname int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryiv">func (c *Context) GetQueryiv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetRenderbufferParameteriv">func (c *Context) GetRenderbufferParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSamplerParameterfv">func (c *Context) GetSamplerParameterfv(sampler uint32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSamplerParameteriv">func (c *Context) GetSamplerParameteriv(sampler uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderInfoLog">func (c *Context) GetShaderInfoLog(shader uint32, bufSize uint32, length *uint32, infoLog *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderPrecisionFormat">func (c *Context) GetShaderPrecisionFormat(shadertype int32, precisiontype int32, pRange *int32, precision *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderSource">func (c *Context) GetShaderSource(shader uint32, bufSize uint32, length *uint32, source *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderiv">func (c *Context) GetShaderiv(shader uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetString">func (c *Context) GetString(name int32) *uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetStringi">func (c *Context) GetStringi(name int32, index uint32) *uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSynciv">func (c *Context) GetSynciv(sync Sync, pname int32, bufSize uint32, length *uint32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexLevelParameterfv">func (c *Context) GetTexLevelParameterfv(target int32, level int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexLevelParameteriv">func (c *Context) GetTexLevelParameteriv(target int32, level int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexParameterfv">func (c *Context) GetTexParameterfv(target int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexParameteriv">func (c *Context) GetTexParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTransformFeedbackVarying">func (c *Context) GetTransformFeedbackVarying(program uint32, index uint32, bufSize uint32, length *uint32, size *uint32, pType *int32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformBlockIndex">func (c *Context) GetUniformBlockIndex(program uint32, uniformBlockName *byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformIndices">func (c *Context) GetUniformIndices(program uint32, uniformCount uint32, uniformNames **byte, uniformIndices *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformLocation">func (c *Context) GetUniformLocation(program uint32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformfv">func (c *Context) GetUniformfv(program uint32, location int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformiv">func (c *Context) GetUniformiv(program uint32, location int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformuiv">func (c *Context) GetUniformuiv(program uint32, location int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribIiv">func (c *Context) GetVertexAttribIiv(index uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribIuiv">func (c *Context) GetVertexAttribIuiv(index uint32, pname int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribPointerv">func (c *Context) GetVertexAttribPointerv(index uint32, pname int32, pointer *unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribfv">func (c *Context) GetVertexAttribfv(index uint32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribiv">func (c *Context) GetVertexAttribiv(index uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Hint">func (c *Context) Hint(target int32, mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateFramebuffer">func (c *Context) InvalidateFramebuffer(target int32, numAttachments uint32, attachments *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateSubFramebuffer">func (c *Context) InvalidateSubFramebuffer(target int32, numAttachments uint32, attachments *int32, x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsBuffer">func (c *Context) IsBuffer(buffer uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsEnabled">func (c *Context) IsEnabled(cap int32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsFramebuffer">func (c *Context) IsFramebuffer(framebuffer uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsProgram">func (c *Context) IsProgram(program uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsProgramPipeline">func (c *Context) IsProgramPipeline(pipeline uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsQuery">func (c *Context) IsQuery(id uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsRenderbuffer">func (c *Context) IsRenderbuffer(renderbuffer uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsSampler">func (c *Context) IsSampler(sampler uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsShader">func (c *Context) IsShader(shader uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsSync">func (c *Context) IsSync(sync Sync) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsTexture">func (c *Context) IsTexture(texture uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsTransformFeedback">func (c *Context) IsTransformFeedback(id uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsVertexArray">func (c *Context) IsVertexArray(array uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LineWidth">func (c *Context) LineWidth(width float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LinkProgram">func (c *Context) LinkProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MapBufferRange">func (c *Context) MapBufferRange(target int32, offset uintptr, length uintptr, access uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MemoryBarrier">func (c *Context) MemoryBarrier(barriers uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MemoryBarrierByRegion">func (c *Context) MemoryBarrierByRegion(barriers uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Panic">func (c *Context) Panic(err string)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PauseTransformFeedback">func (c *Context) PauseTransformFeedback()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelStorei">func (c *Context) PixelStorei(pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PolygonOffset">func (c *Context) PolygonOffset(factor float32, units float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramBinary">func (c *Context) ProgramBinary(program uint32, binaryFormat int32, binary unsafe.Pointer, length uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramParameteri">func (c *Context) ProgramParameteri(program uint32, pname int32, value int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1f">func (c *Context) ProgramUniform1f(program uint32, location int32, v0 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1fv">func (c *Context) ProgramUniform1fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1i">func (c *Context) ProgramUniform1i(program uint32, location int32, v0 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1iv">func (c *Context) ProgramUniform1iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1ui">func (c *Context) ProgramUniform1ui(program uint32, location int32, v0 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1uiv">func (c *Context) ProgramUniform1uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2f">func (c *Context) ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2fv">func (c *Context) ProgramUniform2fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2i">func (c *Context) ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2iv">func (c *Context) ProgramUniform2iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2ui">func (c *Context) ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2uiv">func (c *Context) ProgramUniform2uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3f">func (c *Context) ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3fv">func (c *Context) ProgramUniform3fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3i">func (c *Context) ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3iv">func (c *Context) ProgramUniform3iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3ui">func (c *Context) ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3uiv">func (c *Context) ProgramUniform3uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4f">func (c *Context) ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4fv">func (c *Context) ProgramUniform4fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4i">func (c *Context) ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4iv">func (c *Context) ProgramUniform4iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4ui">func (c *Context) ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4uiv">func (c *Context) ProgramUniform4uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2fv">func (c *Context) ProgramUniformMatrix2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2x3fv">func (c *Context) ProgramUniformMatrix2x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2x4fv">func (c *Context) ProgramUniformMatrix2x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3fv">func (c *Context) ProgramUniformMatrix3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3x2fv">func (c *Context) ProgramUniformMatrix3x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3x4fv">func (c *Context) ProgramUniformMatrix3x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4fv">func (c *Context) ProgramUniformMatrix4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4x2fv">func (c *Context) ProgramUniformMatrix4x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4x3fv">func (c *Context) ProgramUniformMatrix4x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ReadBuffer">func (c *Context) ReadBuffer(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ReadPixels">func (c *Context) ReadPixels(x int32, y int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ReleaseShaderCompiler">func (c *Context) ReleaseShaderCompiler()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RenderbufferStorage">func (c *Context) RenderbufferStorage(target int32, internalformat int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RenderbufferStorageMultisample">func (c *Context) RenderbufferStorageMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ResumeTransformFeedback">func (c *Context) ResumeTransformFeedback()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SampleCoverage">func (c *Context) SampleCoverage(value float32, invert uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SampleMaski">func (c *Context) SampleMaski(maskNumber uint32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameterf">func (c *Context) SamplerParameterf(sampler uint32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameterfv">func (c *Context) SamplerParameterfv(sampler uint32, pname int32, param *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameteri">func (c *Context) SamplerParameteri(sampler uint32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameteriv">func (c *Context) SamplerParameteriv(sampler uint32, pname int32, param *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Scissor">func (c *Context) Scissor(x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SetBatching">func (c *Context) SetBatching(batching bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShaderBinary">func (c *Context) ShaderBinary(count uint32, shaders *uint32, binaryformat int32, binary unsafe.Pointer, length uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShaderSource">func (c *Context) ShaderSource(shader uint32, count uint32, string **byte, length *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShaderVersion">func (c *Context) ShaderVersion() (major, minor, release int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilFunc">func (c *Context) StencilFunc(pFunc int32, ref int32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilFuncSeparate">func (c *Context) StencilFuncSeparate(face int32, pFunc int32, ref int32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilMask">func (c *Context) StencilMask(mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilMaskSeparate">func (c *Context) StencilMaskSeparate(face int32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilOp">func (c *Context) StencilOp(fail int32, zfail int32, zpass int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilOpSeparate">func (c *Context) StencilOpSeparate(face int32, sfail int32, dpfail int32, dppass int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexImage2D">func (c *Context) TexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexImage3D">func (c *Context) TexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameterf">func (c *Context) TexParameterf(target int32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameterfv">func (c *Context) TexParameterfv(target int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameteri">func (c *Context) TexParameteri(target int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameteriv">func (c *Context) TexParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage2D">func (c *Context) TexStorage2D(target int32, levels uint32, internalformat int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage2DMultisample">func (c *Context) TexStorage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage3D">func (c *Context) TexStorage3D(target int32, levels uint32, internalformat int32, width uint32, height uint32, depth uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexSubImage2D">func (c *Context) TexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexSubImage3D">func (c *Context) TexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TransformFeedbackVaryings">func (c *Context) TransformFeedbackVaryings(program uint32, count uint32, varyings **byte, bufferMode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1f">func (c *Context) Uniform1f(location int32, v0 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1fv">func (c *Context) Uniform1fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1i">func (c *Context) Uniform1i(location int32, v0 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1iv">func (c *Context) Uniform1iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1ui">func (c *Context) Uniform1ui(location int32, v0 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1uiv">func (c *Context) Uniform1uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2f">func (c *Context) Uniform2f(location int32, v0 float32, v1 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2fv">func (c *Context) Uniform2fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2i">func (c *Context) Uniform2i(location int32, v0 int32, v1 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2iv">func (c *Context) Uniform2iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2ui">func (c *Context) Uniform2ui(location int32, v0 uint32, v1 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2uiv">func (c *Context) Uniform2uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3f">func (c *Context) Uniform3f(location int32, v0 float32, v1 float32, v2 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3fv">func (c *Context) Uniform3fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3i">func (c *Context) Uniform3i(location int32, v0 int32, v1 int32, v2 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3iv">func (c *Context) Uniform3iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3ui">func (c *Context) Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3uiv">func (c *Context) Uniform3uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4f">func (c *Context) Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4fv">func (c *Context) Uniform4fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4i">func (c *Context) Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4iv">func (c *Context) Uniform4iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4ui">func (c *Context) Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4uiv">func (c *Context) Uniform4uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformBlockBinding">func (c *Context) UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2fv">func (c *Context) UniformMatrix2fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2x3fv">func (c *Context) UniformMatrix2x3fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2x4fv">func (c *Context) UniformMatrix2x4fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3fv">func (c *Context) UniformMatrix3fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3x2fv">func (c *Context) UniformMatrix3x2fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3x4fv">func (c *Context) UniformMatrix3x4fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4fv">func (c *Context) UniformMatrix4fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4x2fv">func (c *Context) UniformMatrix4x2fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4x3fv">func (c *Context) UniformMatrix4x3fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UnmapBuffer">func (c *Context) UnmapBuffer(target int32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UseProgram">func (c *Context) UseProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UseProgramStages">func (c *Context) UseProgramStages(pipeline uint32, stages uint32, program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ValidateProgram">func (c *Context) ValidateProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ValidateProgramPipeline">func (c *Context) ValidateProgramPipeline(pipeline uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VendorShaderVersion">func (c *Context) VendorShaderVersion() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VendorVersion">func (c *Context) VendorVersion() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Version">func (c *Context) Version() (major, minor, release int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1f">func (c *Context) VertexAttrib1f(index uint32, x float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1fv">func (c *Context) VertexAttrib1fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2f">func (c *Context) VertexAttrib2f(index uint32, x float32, y float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2fv">func (c *Context) VertexAttrib2fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3f">func (c *Context) VertexAttrib3f(index uint32, x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3fv">func (c *Context) VertexAttrib3fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4f">func (c *Context) VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4fv">func (c *Context) VertexAttrib4fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribBinding">func (c *Context) VertexAttribBinding(attribindex uint32, bindingindex uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribDivisor">func (c *Context) VertexAttribDivisor(index uint32, divisor uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribFormat">func (c *Context) VertexAttribFormat(attribindex uint32, size int32, pType int32, normalized uint8, relativeoffset uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4i">func (c *Context) VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4iv">func (c *Context) VertexAttribI4iv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4ui">func (c *Context) VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4uiv">func (c *Context) VertexAttribI4uiv(index uint32, v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribIFormat">func (c *Context) VertexAttribIFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribIPointer">func (c *Context) VertexAttribIPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribPointer">func (c *Context) VertexAttribPointer(index uint32, size int32, pType int32, normalized uint8, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexBindingDivisor">func (c *Context) VertexBindingDivisor(bindingindex uint32, divisor uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Viewport">func (c *Context) Viewport(x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WaitSync">func (c *Context) WaitSync(sync Sync, flags uint32, timeout uint64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROC">type DEBUGPROC</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROCAMD">type DEBUGPROCAMD</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROCARB">type DEBUGPROCARB</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROCKHR">type DEBUGPROCKHR</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Sync">type Sync</a></span></span>
			
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	DEPTH_BUFFER_BIT				int32	= 0x00000100
	STENCIL_BUFFER_BIT				int32	= 0x00000400
	COLOR_BUFFER_BIT				int32	= 0x00004000
	FALSE						int32	= 0
	TRUE						int32	= 1
	POINTS						int32	= 0x0000
	LINES						int32	= 0x0001
	LINE_LOOP					int32	= 0x0002
	LINE_STRIP					int32	= 0x0003
	TRIANGLES					int32	= 0x0004
	TRIANGLE_STRIP					int32	= 0x0005
	TRIANGLE_FAN					int32	= 0x0006
	ZERO						int32	= 0
	ONE						int32	= 1
	SRC_COLOR					int32	= 0x0300
	ONE_MINUS_SRC_COLOR				int32	= 0x0301
	SRC_ALPHA					int32	= 0x0302
	ONE_MINUS_SRC_ALPHA				int32	= 0x0303
	DST_ALPHA					int32	= 0x0304
	ONE_MINUS_DST_ALPHA				int32	= 0x0305
	DST_COLOR					int32	= 0x0306
	ONE_MINUS_DST_COLOR				int32	= 0x0307
	SRC_ALPHA_SATURATE				int32	= 0x0308
	FUNC_ADD					int32	= 0x8006
	BLEND_EQUATION					int32	= 0x8009
	BLEND_EQUATION_RGB				int32	= 0x8009
	BLEND_EQUATION_ALPHA				int32	= 0x883D
	FUNC_SUBTRACT					int32	= 0x800A
	FUNC_REVERSE_SUBTRACT				int32	= 0x800B
	BLEND_DST_RGB					int32	= 0x80C8
	BLEND_SRC_RGB					int32	= 0x80C9
	BLEND_DST_ALPHA					int32	= 0x80CA
	BLEND_SRC_ALPHA					int32	= 0x80CB
	CONSTANT_COLOR					int32	= 0x8001
	ONE_MINUS_CONSTANT_COLOR			int32	= 0x8002
	CONSTANT_ALPHA					int32	= 0x8003
	ONE_MINUS_CONSTANT_ALPHA			int32	= 0x8004
	BLEND_COLOR					int32	= 0x8005
	ARRAY_BUFFER					int32	= 0x8892
	ELEMENT_ARRAY_BUFFER				int32	= 0x8893
	ARRAY_BUFFER_BINDING				int32	= 0x8894
	ELEMENT_ARRAY_BUFFER_BINDING			int32	= 0x8895
	STREAM_DRAW					int32	= 0x88E0
	STATIC_DRAW					int32	= 0x88E4
	DYNAMIC_DRAW					int32	= 0x88E8
	BUFFER_SIZE					int32	= 0x8764
	BUFFER_USAGE					int32	= 0x8765
	CURRENT_VERTEX_ATTRIB				int32	= 0x8626
	FRONT						int32	= 0x0404
	BACK						int32	= 0x0405
	FRONT_AND_BACK					int32	= 0x0408
	TEXTURE_2D					int32	= 0x0DE1
	CULL_FACE					int32	= 0x0B44
	BLEND						int32	= 0x0BE2
	DITHER						int32	= 0x0BD0
	STENCIL_TEST					int32	= 0x0B90
	DEPTH_TEST					int32	= 0x0B71
	SCISSOR_TEST					int32	= 0x0C11
	POLYGON_OFFSET_FILL				int32	= 0x8037
	SAMPLE_ALPHA_TO_COVERAGE			int32	= 0x809E
	SAMPLE_COVERAGE					int32	= 0x80A0
	NO_ERROR					int32	= 0
	INVALID_ENUM					int32	= 0x0500
	INVALID_VALUE					int32	= 0x0501
	INVALID_OPERATION				int32	= 0x0502
	OUT_OF_MEMORY					int32	= 0x0505
	CW						int32	= 0x0900
	CCW						int32	= 0x0901
	LINE_WIDTH					int32	= 0x0B21
	ALIASED_POINT_SIZE_RANGE			int32	= 0x846D
	ALIASED_LINE_WIDTH_RANGE			int32	= 0x846E
	CULL_FACE_MODE					int32	= 0x0B45
	FRONT_FACE					int32	= 0x0B46
	DEPTH_RANGE					int32	= 0x0B70
	DEPTH_WRITEMASK					int32	= 0x0B72
	DEPTH_CLEAR_VALUE				int32	= 0x0B73
	DEPTH_FUNC					int32	= 0x0B74
	STENCIL_CLEAR_VALUE				int32	= 0x0B91
	STENCIL_FUNC					int32	= 0x0B92
	STENCIL_FAIL					int32	= 0x0B94
	STENCIL_PASS_DEPTH_FAIL				int32	= 0x0B95
	STENCIL_PASS_DEPTH_PASS				int32	= 0x0B96
	STENCIL_REF					int32	= 0x0B97
	STENCIL_VALUE_MASK				int32	= 0x0B93
	STENCIL_WRITEMASK				int32	= 0x0B98
	STENCIL_BACK_FUNC				int32	= 0x8800
	STENCIL_BACK_FAIL				int32	= 0x8801
	STENCIL_BACK_PASS_DEPTH_FAIL			int32	= 0x8802
	STENCIL_BACK_PASS_DEPTH_PASS			int32	= 0x8803
	STENCIL_BACK_REF				int32	= 0x8CA3
	STENCIL_BACK_VALUE_MASK				int32	= 0x8CA4
	STENCIL_BACK_WRITEMASK				int32	= 0x8CA5
	VIEWPORT					int32	= 0x0BA2
	SCISSOR_BOX					int32	= 0x0C10
	COLOR_CLEAR_VALUE				int32	= 0x0C22
	COLOR_WRITEMASK					int32	= 0x0C23
	UNPACK_ALIGNMENT				int32	= 0x0CF5
	PACK_ALIGNMENT					int32	= 0x0D05
	MAX_TEXTURE_SIZE				int32	= 0x0D33
	MAX_VIEWPORT_DIMS				int32	= 0x0D3A
	SUBPIXEL_BITS					int32	= 0x0D50
	RED_BITS					int32	= 0x0D52
	GREEN_BITS					int32	= 0x0D53
	BLUE_BITS					int32	= 0x0D54
	ALPHA_BITS					int32	= 0x0D55
	DEPTH_BITS					int32	= 0x0D56
	STENCIL_BITS					int32	= 0x0D57
	POLYGON_OFFSET_UNITS				int32	= 0x2A00
	POLYGON_OFFSET_FACTOR				int32	= 0x8038
	TEXTURE_BINDING_2D				int32	= 0x8069
	SAMPLE_BUFFERS					int32	= 0x80A8
	SAMPLES						int32	= 0x80A9
	SAMPLE_COVERAGE_VALUE				int32	= 0x80AA
	SAMPLE_COVERAGE_INVERT				int32	= 0x80AB
	NUM_COMPRESSED_TEXTURE_FORMATS			int32	= 0x86A2
	COMPRESSED_TEXTURE_FORMATS			int32	= 0x86A3
	DONT_CARE					int32	= 0x1100
	FASTEST						int32	= 0x1101
	NICEST						int32	= 0x1102
	GENERATE_MIPMAP_HINT				int32	= 0x8192
	BYTE						int32	= 0x1400
	UNSIGNED_BYTE					int32	= 0x1401
	SHORT						int32	= 0x1402
	UNSIGNED_SHORT					int32	= 0x1403
	INT						int32	= 0x1404
	UNSIGNED_INT					int32	= 0x1405
	FLOAT						int32	= 0x1406
	FIXED						int32	= 0x140C
	DEPTH_COMPONENT					int32	= 0x1902
	ALPHA						int32	= 0x1906
	RGB						int32	= 0x1907
	RGBA						int32	= 0x1908
	LUMINANCE					int32	= 0x1909
	LUMINANCE_ALPHA					int32	= 0x190A
	UNSIGNED_SHORT_4_4_4_4				int32	= 0x8033
	UNSIGNED_SHORT_5_5_5_1				int32	= 0x8034
	UNSIGNED_SHORT_5_6_5				int32	= 0x8363
	FRAGMENT_SHADER					int32	= 0x8B30
	VERTEX_SHADER					int32	= 0x8B31
	MAX_VERTEX_ATTRIBS				int32	= 0x8869
	MAX_VERTEX_UNIFORM_VECTORS			int32	= 0x8DFB
	MAX_VARYING_VECTORS				int32	= 0x8DFC
	MAX_COMBINED_TEXTURE_IMAGE_UNITS		int32	= 0x8B4D
	MAX_VERTEX_TEXTURE_IMAGE_UNITS			int32	= 0x8B4C
	MAX_TEXTURE_IMAGE_UNITS				int32	= 0x8872
	MAX_FRAGMENT_UNIFORM_VECTORS			int32	= 0x8DFD
	SHADER_TYPE					int32	= 0x8B4F
	DELETE_STATUS					int32	= 0x8B80
	LINK_STATUS					int32	= 0x8B82
	VALIDATE_STATUS					int32	= 0x8B83
	ATTACHED_SHADERS				int32	= 0x8B85
	ACTIVE_UNIFORMS					int32	= 0x8B86
	ACTIVE_UNIFORM_MAX_LENGTH			int32	= 0x8B87
	ACTIVE_ATTRIBUTES				int32	= 0x8B89
	ACTIVE_ATTRIBUTE_MAX_LENGTH			int32	= 0x8B8A
	SHADING_LANGUAGE_VERSION			int32	= 0x8B8C
	CURRENT_PROGRAM					int32	= 0x8B8D
	NEVER						int32	= 0x0200
	LESS						int32	= 0x0201
	EQUAL						int32	= 0x0202
	LEQUAL						int32	= 0x0203
	GREATER						int32	= 0x0204
	NOTEQUAL					int32	= 0x0205
	GEQUAL						int32	= 0x0206
	ALWAYS						int32	= 0x0207
	KEEP						int32	= 0x1E00
	REPLACE						int32	= 0x1E01
	INCR						int32	= 0x1E02
	DECR						int32	= 0x1E03
	INVERT						int32	= 0x150A
	INCR_WRAP					int32	= 0x8507
	DECR_WRAP					int32	= 0x8508
	VENDOR						int32	= 0x1F00
	RENDERER					int32	= 0x1F01
	VERSION						int32	= 0x1F02
	EXTENSIONS					int32	= 0x1F03
	NEAREST						int32	= 0x2600
	LINEAR						int32	= 0x2601
	NEAREST_MIPMAP_NEAREST				int32	= 0x2700
	LINEAR_MIPMAP_NEAREST				int32	= 0x2701
	NEAREST_MIPMAP_LINEAR				int32	= 0x2702
	LINEAR_MIPMAP_LINEAR				int32	= 0x2703
	TEXTURE_MAG_FILTER				int32	= 0x2800
	TEXTURE_MIN_FILTER				int32	= 0x2801
	TEXTURE_WRAP_S					int32	= 0x2802
	TEXTURE_WRAP_T					int32	= 0x2803
	TEXTURE						int32	= 0x1702
	TEXTURE_CUBE_MAP				int32	= 0x8513
	TEXTURE_BINDING_CUBE_MAP			int32	= 0x8514
	TEXTURE_CUBE_MAP_POSITIVE_X			int32	= 0x8515
	TEXTURE_CUBE_MAP_NEGATIVE_X			int32	= 0x8516
	TEXTURE_CUBE_MAP_POSITIVE_Y			int32	= 0x8517
	TEXTURE_CUBE_MAP_NEGATIVE_Y			int32	= 0x8518
	TEXTURE_CUBE_MAP_POSITIVE_Z			int32	= 0x8519
	TEXTURE_CUBE_MAP_NEGATIVE_Z			int32	= 0x851A
	MAX_CUBE_MAP_TEXTURE_SIZE			int32	= 0x851C
	TEXTURE0					int32	= 0x84C0
	TEXTURE1					int32	= 0x84C1
	TEXTURE2					int32	= 0x84C2
	TEXTURE3					int32	= 0x84C3
	TEXTURE4					int32	= 0x84C4
	TEXTURE5					int32	= 0x84C5
	TEXTURE6					int32	= 0x84C6
	TEXTURE7					int32	= 0x84C7
	TEXTURE8					int32	= 0x84C8
	TEXTURE9					int32	= 0x84C9
	TEXTURE10					int32	= 0x84CA
	TEXTURE11					int32	= 0x84CB
	TEXTURE12					int32	= 0x84CC
	TEXTURE13					int32	= 0x84CD
	TEXTURE14					int32	= 0x84CE
	TEXTURE15					int32	= 0x84CF
	TEXTURE16					int32	= 0x84D0
	TEXTURE17					int32	= 0x84D1
	TEXTURE18					int32	= 0x84D2
	TEXTURE19					int32	= 0x84D3
	TEXTURE20					int32	= 0x84D4
	TEXTURE21					int32	= 0x84D5
	TEXTURE22					int32	= 0x84D6
	TEXTURE23					int32	= 0x84D7
	TEXTURE24					int32	= 0x84D8
	TEXTURE25					int32	= 0x84D9
	TEXTURE26					int32	= 0x84DA
	TEXTURE27					int32	= 0x84DB
	TEXTURE28					int32	= 0x84DC
	TEXTURE29					int32	= 0x84DD
	TEXTURE30					int32	= 0x84DE
	TEXTURE31					int32	= 0x84DF
	ACTIVE_TEXTURE					int32	= 0x84E0
	REPEAT						int32	= 0x2901
	CLAMP_TO_EDGE					int32	= 0x812F
	MIRRORED_REPEAT					int32	= 0x8370
	FLOAT_VEC2					int32	= 0x8B50
	FLOAT_VEC3					int32	= 0x8B51
	FLOAT_VEC4					int32	= 0x8B52
	INT_VEC2					int32	= 0x8B53
	INT_VEC3					int32	= 0x8B54
	INT_VEC4					int32	= 0x8B55
	BOOL						int32	= 0x8B56
	BOOL_VEC2					int32	= 0x8B57
	BOOL_VEC3					int32	= 0x8B58
	BOOL_VEC4					int32	= 0x8B59
	FLOAT_MAT2					int32	= 0x8B5A
	FLOAT_MAT3					int32	= 0x8B5B
	FLOAT_MAT4					int32	= 0x8B5C
	SAMPLER_2D					int32	= 0x8B5E
	SAMPLER_CUBE					int32	= 0x8B60
	VERTEX_ATTRIB_ARRAY_ENABLED			int32	= 0x8622
	VERTEX_ATTRIB_ARRAY_SIZE			int32	= 0x8623
	VERTEX_ATTRIB_ARRAY_STRIDE			int32	= 0x8624
	VERTEX_ATTRIB_ARRAY_TYPE			int32	= 0x8625
	VERTEX_ATTRIB_ARRAY_NORMALIZED			int32	= 0x886A
	VERTEX_ATTRIB_ARRAY_POINTER			int32	= 0x8645
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING		int32	= 0x889F
	IMPLEMENTATION_COLOR_READ_TYPE			int32	= 0x8B9A
	IMPLEMENTATION_COLOR_READ_FORMAT		int32	= 0x8B9B
	COMPILE_STATUS					int32	= 0x8B81
	INFO_LOG_LENGTH					int32	= 0x8B84
	SHADER_SOURCE_LENGTH				int32	= 0x8B88
	SHADER_COMPILER					int32	= 0x8DFA
	SHADER_BINARY_FORMATS				int32	= 0x8DF8
	NUM_SHADER_BINARY_FORMATS			int32	= 0x8DF9
	LOW_FLOAT					int32	= 0x8DF0
	MEDIUM_FLOAT					int32	= 0x8DF1
	HIGH_FLOAT					int32	= 0x8DF2
	LOW_INT						int32	= 0x8DF3
	MEDIUM_INT					int32	= 0x8DF4
	HIGH_INT					int32	= 0x8DF5
	FRAMEBUFFER					int32	= 0x8D40
	RENDERBUFFER					int32	= 0x8D41
	RGBA4						int32	= 0x8056
	RGB5_A1						int32	= 0x8057
	RGB565						int32	= 0x8D62
	DEPTH_COMPONENT16				int32	= 0x81A5
	STENCIL_INDEX8					int32	= 0x8D48
	RENDERBUFFER_WIDTH				int32	= 0x8D42
	RENDERBUFFER_HEIGHT				int32	= 0x8D43
	RENDERBUFFER_INTERNAL_FORMAT			int32	= 0x8D44
	RENDERBUFFER_RED_SIZE				int32	= 0x8D50
	RENDERBUFFER_GREEN_SIZE				int32	= 0x8D51
	RENDERBUFFER_BLUE_SIZE				int32	= 0x8D52
	RENDERBUFFER_ALPHA_SIZE				int32	= 0x8D53
	RENDERBUFFER_DEPTH_SIZE				int32	= 0x8D54
	RENDERBUFFER_STENCIL_SIZE			int32	= 0x8D55
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE		int32	= 0x8CD0
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME		int32	= 0x8CD1
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL		int32	= 0x8CD2
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	int32	= 0x8CD3
	COLOR_ATTACHMENT0				int32	= 0x8CE0
	DEPTH_ATTACHMENT				int32	= 0x8D00
	STENCIL_ATTACHMENT				int32	= 0x8D20
	NONE						int32	= 0
	FRAMEBUFFER_COMPLETE				int32	= 0x8CD5
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT		int32	= 0x8CD6
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	int32	= 0x8CD7
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS		int32	= 0x8CD9
	FRAMEBUFFER_UNSUPPORTED				int32	= 0x8CDD
	FRAMEBUFFER_BINDING				int32	= 0x8CA6
	RENDERBUFFER_BINDING				int32	= 0x8CA7
	MAX_RENDERBUFFER_SIZE				int32	= 0x84E8
	INVALID_FRAMEBUFFER_OPERATION			int32	= 0x0506
	READ_BUFFER					int32	= 0x0C02
	UNPACK_ROW_LENGTH				int32	= 0x0CF2
	UNPACK_SKIP_ROWS				int32	= 0x0CF3
	UNPACK_SKIP_PIXELS				int32	= 0x0CF4
	PACK_ROW_LENGTH					int32	= 0x0D02
	PACK_SKIP_ROWS					int32	= 0x0D03
	PACK_SKIP_PIXELS				int32	= 0x0D04
	COLOR						int32	= 0x1800
	DEPTH						int32	= 0x1801
	STENCIL						int32	= 0x1802
	RED						int32	= 0x1903
	RGB8						int32	= 0x8051
	RGBA8						int32	= 0x8058
	RGB10_A2					int32	= 0x8059
	TEXTURE_BINDING_3D				int32	= 0x806A
	UNPACK_SKIP_IMAGES				int32	= 0x806D
	UNPACK_IMAGE_HEIGHT				int32	= 0x806E
	TEXTURE_3D					int32	= 0x806F
	TEXTURE_WRAP_R					int32	= 0x8072
	MAX_3D_TEXTURE_SIZE				int32	= 0x8073
	UNSIGNED_INT_2_10_10_10_REV			int32	= 0x8368
	MAX_ELEMENTS_VERTICES				int32	= 0x80E8
	MAX_ELEMENTS_INDICES				int32	= 0x80E9
	TEXTURE_MIN_LOD					int32	= 0x813A
	TEXTURE_MAX_LOD					int32	= 0x813B
	TEXTURE_BASE_LEVEL				int32	= 0x813C
	TEXTURE_MAX_LEVEL				int32	= 0x813D
	MIN						int32	= 0x8007
	MAX						int32	= 0x8008
	DEPTH_COMPONENT24				int32	= 0x81A6
	MAX_TEXTURE_LOD_BIAS				int32	= 0x84FD
	TEXTURE_COMPARE_MODE				int32	= 0x884C
	TEXTURE_COMPARE_FUNC				int32	= 0x884D
	CURRENT_QUERY					int32	= 0x8865
	QUERY_RESULT					int32	= 0x8866
	QUERY_RESULT_AVAILABLE				int32	= 0x8867
	BUFFER_MAPPED					int32	= 0x88BC
	BUFFER_MAP_POINTER				int32	= 0x88BD
	STREAM_READ					int32	= 0x88E1
	STREAM_COPY					int32	= 0x88E2
	STATIC_READ					int32	= 0x88E5
	STATIC_COPY					int32	= 0x88E6
	DYNAMIC_READ					int32	= 0x88E9
	DYNAMIC_COPY					int32	= 0x88EA
	MAX_DRAW_BUFFERS				int32	= 0x8824
	DRAW_BUFFER0					int32	= 0x8825
	DRAW_BUFFER1					int32	= 0x8826
	DRAW_BUFFER2					int32	= 0x8827
	DRAW_BUFFER3					int32	= 0x8828
	DRAW_BUFFER4					int32	= 0x8829
	DRAW_BUFFER5					int32	= 0x882A
	DRAW_BUFFER6					int32	= 0x882B
	DRAW_BUFFER7					int32	= 0x882C
	DRAW_BUFFER8					int32	= 0x882D
	DRAW_BUFFER9					int32	= 0x882E
	DRAW_BUFFER10					int32	= 0x882F
	DRAW_BUFFER11					int32	= 0x8830
	DRAW_BUFFER12					int32	= 0x8831
	DRAW_BUFFER13					int32	= 0x8832
	DRAW_BUFFER14					int32	= 0x8833
	DRAW_BUFFER15					int32	= 0x8834
	MAX_FRAGMENT_UNIFORM_COMPONENTS			int32	= 0x8B49
	MAX_VERTEX_UNIFORM_COMPONENTS			int32	= 0x8B4A
	SAMPLER_3D					int32	= 0x8B5F
	SAMPLER_2D_SHADOW				int32	= 0x8B62
	FRAGMENT_SHADER_DERIVATIVE_HINT			int32	= 0x8B8B
	PIXEL_PACK_BUFFER				int32	= 0x88EB
	PIXEL_UNPACK_BUFFER				int32	= 0x88EC
	PIXEL_PACK_BUFFER_BINDING			int32	= 0x88ED
	PIXEL_UNPACK_BUFFER_BINDING			int32	= 0x88EF
	FLOAT_MAT2x3					int32	= 0x8B65
	FLOAT_MAT2x4					int32	= 0x8B66
	FLOAT_MAT3x2					int32	= 0x8B67
	FLOAT_MAT3x4					int32	= 0x8B68
	FLOAT_MAT4x2					int32	= 0x8B69
	FLOAT_MAT4x3					int32	= 0x8B6A
	SRGB						int32	= 0x8C40
	SRGB8						int32	= 0x8C41
	SRGB8_ALPHA8					int32	= 0x8C43
	COMPARE_REF_TO_TEXTURE				int32	= 0x884E
	MAJOR_VERSION					int32	= 0x821B
	MINOR_VERSION					int32	= 0x821C
	NUM_EXTENSIONS					int32	= 0x821D
	RGBA32F						int32	= 0x8814
	RGB32F						int32	= 0x8815
	RGBA16F						int32	= 0x881A
	RGB16F						int32	= 0x881B
	VERTEX_ATTRIB_ARRAY_INTEGER			int32	= 0x88FD
	MAX_ARRAY_TEXTURE_LAYERS			int32	= 0x88FF
	MIN_PROGRAM_TEXEL_OFFSET			int32	= 0x8904
	MAX_PROGRAM_TEXEL_OFFSET			int32	= 0x8905
	MAX_VARYING_COMPONENTS				int32	= 0x8B4B
	TEXTURE_2D_ARRAY				int32	= 0x8C1A
	TEXTURE_BINDING_2D_ARRAY			int32	= 0x8C1D
	R11F_G11F_B10F					int32	= 0x8C3A
	UNSIGNED_INT_10F_11F_11F_REV			int32	= 0x8C3B
	RGB9_E5						int32	= 0x8C3D
	UNSIGNED_INT_5_9_9_9_REV			int32	= 0x8C3E
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH		int32	= 0x8C76
	TRANSFORM_FEEDBACK_BUFFER_MODE			int32	= 0x8C7F
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	int32	= 0x8C80
	TRANSFORM_FEEDBACK_VARYINGS			int32	= 0x8C83
	TRANSFORM_FEEDBACK_BUFFER_START			int32	= 0x8C84
	TRANSFORM_FEEDBACK_BUFFER_SIZE			int32	= 0x8C85
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN		int32	= 0x8C88
	RASTERIZER_DISCARD				int32	= 0x8C89
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	int32	= 0x8C8A
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS		int32	= 0x8C8B
	INTERLEAVED_ATTRIBS				int32	= 0x8C8C
	SEPARATE_ATTRIBS				int32	= 0x8C8D
	TRANSFORM_FEEDBACK_BUFFER			int32	= 0x8C8E
	TRANSFORM_FEEDBACK_BUFFER_BINDING		int32	= 0x8C8F
	RGBA32UI					int32	= 0x8D70
	RGB32UI						int32	= 0x8D71
	RGBA16UI					int32	= 0x8D76
	RGB16UI						int32	= 0x8D77
	RGBA8UI						int32	= 0x8D7C
	RGB8UI						int32	= 0x8D7D
	RGBA32I						int32	= 0x8D82
	RGB32I						int32	= 0x8D83
	RGBA16I						int32	= 0x8D88
	RGB16I						int32	= 0x8D89
	RGBA8I						int32	= 0x8D8E
	RGB8I						int32	= 0x8D8F
	RED_INTEGER					int32	= 0x8D94
	RGB_INTEGER					int32	= 0x8D98
	RGBA_INTEGER					int32	= 0x8D99
	SAMPLER_2D_ARRAY				int32	= 0x8DC1
	SAMPLER_2D_ARRAY_SHADOW				int32	= 0x8DC4
	SAMPLER_CUBE_SHADOW				int32	= 0x8DC5
	UNSIGNED_INT_VEC2				int32	= 0x8DC6
	UNSIGNED_INT_VEC3				int32	= 0x8DC7
	UNSIGNED_INT_VEC4				int32	= 0x8DC8
	INT_SAMPLER_2D					int32	= 0x8DCA
	INT_SAMPLER_3D					int32	= 0x8DCB
	INT_SAMPLER_CUBE				int32	= 0x8DCC
	INT_SAMPLER_2D_ARRAY				int32	= 0x8DCF
	UNSIGNED_INT_SAMPLER_2D				int32	= 0x8DD2
	UNSIGNED_INT_SAMPLER_3D				int32	= 0x8DD3
	UNSIGNED_INT_SAMPLER_CUBE			int32	= 0x8DD4
	UNSIGNED_INT_SAMPLER_2D_ARRAY			int32	= 0x8DD7
	BUFFER_ACCESS_FLAGS				int32	= 0x911F
	BUFFER_MAP_LENGTH				int32	= 0x9120
	BUFFER_MAP_OFFSET				int32	= 0x9121
	DEPTH_COMPONENT32F				int32	= 0x8CAC
	DEPTH32F_STENCIL8				int32	= 0x8CAD
	FLOAT_32_UNSIGNED_INT_24_8_REV			int32	= 0x8DAD
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING		int32	= 0x8210
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE		int32	= 0x8211
	FRAMEBUFFER_ATTACHMENT_RED_SIZE			int32	= 0x8212
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE		int32	= 0x8213
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE		int32	= 0x8214
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE		int32	= 0x8215
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE		int32	= 0x8216
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE		int32	= 0x8217
	FRAMEBUFFER_DEFAULT				int32	= 0x8218
	FRAMEBUFFER_UNDEFINED				int32	= 0x8219
	DEPTH_STENCIL_ATTACHMENT			int32	= 0x821A
	DEPTH_STENCIL					int32	= 0x84F9
	UNSIGNED_INT_24_8				int32	= 0x84FA
	DEPTH24_STENCIL8				int32	= 0x88F0
	UNSIGNED_NORMALIZED				int32	= 0x8C17
	DRAW_FRAMEBUFFER_BINDING			int32	= 0x8CA6
	READ_FRAMEBUFFER				int32	= 0x8CA8
	DRAW_FRAMEBUFFER				int32	= 0x8CA9
	READ_FRAMEBUFFER_BINDING			int32	= 0x8CAA
	RENDERBUFFER_SAMPLES				int32	= 0x8CAB
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER		int32	= 0x8CD4
	MAX_COLOR_ATTACHMENTS				int32	= 0x8CDF
	COLOR_ATTACHMENT1				int32	= 0x8CE1
	COLOR_ATTACHMENT2				int32	= 0x8CE2
	COLOR_ATTACHMENT3				int32	= 0x8CE3
	COLOR_ATTACHMENT4				int32	= 0x8CE4
	COLOR_ATTACHMENT5				int32	= 0x8CE5
	COLOR_ATTACHMENT6				int32	= 0x8CE6
	COLOR_ATTACHMENT7				int32	= 0x8CE7
	COLOR_ATTACHMENT8				int32	= 0x8CE8
	COLOR_ATTACHMENT9				int32	= 0x8CE9
	COLOR_ATTACHMENT10				int32	= 0x8CEA
	COLOR_ATTACHMENT11				int32	= 0x8CEB
	COLOR_ATTACHMENT12				int32	= 0x8CEC
	COLOR_ATTACHMENT13				int32	= 0x8CED
	COLOR_ATTACHMENT14				int32	= 0x8CEE
	COLOR_ATTACHMENT15				int32	= 0x8CEF
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE		int32	= 0x8D56
	MAX_SAMPLES					int32	= 0x8D57
	HALF_FLOAT					int32	= 0x140B
	MAP_READ_BIT					int32	= 0x0001
	MAP_WRITE_BIT					int32	= 0x0002
	MAP_INVALIDATE_RANGE_BIT			int32	= 0x0004
	MAP_INVALIDATE_BUFFER_BIT			int32	= 0x0008
	MAP_FLUSH_EXPLICIT_BIT				int32	= 0x0010
	MAP_UNSYNCHRONIZED_BIT				int32	= 0x0020
	RG						int32	= 0x8227
	RG_INTEGER					int32	= 0x8228
	R8						int32	= 0x8229
	RG8						int32	= 0x822B
	R16F						int32	= 0x822D
	R32F						int32	= 0x822E
	RG16F						int32	= 0x822F
	RG32F						int32	= 0x8230
	R8I						int32	= 0x8231
	R8UI						int32	= 0x8232
	R16I						int32	= 0x8233
	R16UI						int32	= 0x8234
	R32I						int32	= 0x8235
	R32UI						int32	= 0x8236
	RG8I						int32	= 0x8237
	RG8UI						int32	= 0x8238
	RG16I						int32	= 0x8239
	RG16UI						int32	= 0x823A
	RG32I						int32	= 0x823B
	RG32UI						int32	= 0x823C
	VERTEX_ARRAY_BINDING				int32	= 0x85B5
	R8_SNORM					int32	= 0x8F94
	RG8_SNORM					int32	= 0x8F95
	RGB8_SNORM					int32	= 0x8F96
	RGBA8_SNORM					int32	= 0x8F97
	SIGNED_NORMALIZED				int32	= 0x8F9C
	PRIMITIVE_RESTART_FIXED_INDEX			int32	= 0x8D69
	COPY_READ_BUFFER				int32	= 0x8F36
	COPY_WRITE_BUFFER				int32	= 0x8F37
	COPY_READ_BUFFER_BINDING			int32	= 0x8F36
	COPY_WRITE_BUFFER_BINDING			int32	= 0x8F37
	UNIFORM_BUFFER					int32	= 0x8A11
	UNIFORM_BUFFER_BINDING				int32	= 0x8A28
	UNIFORM_BUFFER_START				int32	= 0x8A29
	UNIFORM_BUFFER_SIZE				int32	= 0x8A2A
	MAX_VERTEX_UNIFORM_BLOCKS			int32	= 0x8A2B
	MAX_FRAGMENT_UNIFORM_BLOCKS			int32	= 0x8A2D
	MAX_COMBINED_UNIFORM_BLOCKS			int32	= 0x8A2E
	MAX_UNIFORM_BUFFER_BINDINGS			int32	= 0x8A2F
	MAX_UNIFORM_BLOCK_SIZE				int32	= 0x8A30
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS		int32	= 0x8A31
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	int32	= 0x8A33
	UNIFORM_BUFFER_OFFSET_ALIGNMENT			int32	= 0x8A34
	ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH		int32	= 0x8A35
	ACTIVE_UNIFORM_BLOCKS				int32	= 0x8A36
	UNIFORM_TYPE					int32	= 0x8A37
	UNIFORM_SIZE					int32	= 0x8A38
	UNIFORM_NAME_LENGTH				int32	= 0x8A39
	UNIFORM_BLOCK_INDEX				int32	= 0x8A3A
	UNIFORM_OFFSET					int32	= 0x8A3B
	UNIFORM_ARRAY_STRIDE				int32	= 0x8A3C
	UNIFORM_MATRIX_STRIDE				int32	= 0x8A3D
	UNIFORM_IS_ROW_MAJOR				int32	= 0x8A3E
	UNIFORM_BLOCK_BINDING				int32	= 0x8A3F
	UNIFORM_BLOCK_DATA_SIZE				int32	= 0x8A40
	UNIFORM_BLOCK_NAME_LENGTH			int32	= 0x8A41
	UNIFORM_BLOCK_ACTIVE_UNIFORMS			int32	= 0x8A42
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES		int32	= 0x8A43
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	int32	= 0x8A44
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	int32	= 0x8A46
	INVALID_INDEX					uint64	= 0xFFFFFFFF
	MAX_VERTEX_OUTPUT_COMPONENTS			int32	= 0x9122
	MAX_FRAGMENT_INPUT_COMPONENTS			int32	= 0x9125
	MAX_SERVER_WAIT_TIMEOUT				int32	= 0x9111
	OBJECT_TYPE					int32	= 0x9112
	SYNC_CONDITION					int32	= 0x9113
	SYNC_STATUS					int32	= 0x9114
	SYNC_FLAGS					int32	= 0x9115
	SYNC_FENCE					int32	= 0x9116
	SYNC_GPU_COMMANDS_COMPLETE			int32	= 0x9117
	UNSIGNALED					int32	= 0x9118
	SIGNALED					int32	= 0x9119
	ALREADY_SIGNALED				int32	= 0x911A
	TIMEOUT_EXPIRED					int32	= 0x911B
	CONDITION_SATISFIED				int32	= 0x911C
	WAIT_FAILED					int32	= 0x911D
	SYNC_FLUSH_COMMANDS_BIT				int32	= 0x00000001
	TIMEOUT_IGNORED					uint64	= 0xFFFFFFFFFFFFFFFF
	VERTEX_ATTRIB_ARRAY_DIVISOR			int32	= 0x88FE
	ANY_SAMPLES_PASSED				int32	= 0x8C2F
	ANY_SAMPLES_PASSED_CONSERVATIVE			int32	= 0x8D6A
	SAMPLER_BINDING					int32	= 0x8919
	RGB10_A2UI					int32	= 0x906F
	TEXTURE_SWIZZLE_R				int32	= 0x8E42
	TEXTURE_SWIZZLE_G				int32	= 0x8E43
	TEXTURE_SWIZZLE_B				int32	= 0x8E44
	TEXTURE_SWIZZLE_A				int32	= 0x8E45
	GREEN						int32	= 0x1904
	BLUE						int32	= 0x1905
	INT_2_10_10_10_REV				int32	= 0x8D9F
	TRANSFORM_FEEDBACK				int32	= 0x8E22
	TRANSFORM_FEEDBACK_PAUSED			int32	= 0x8E23
	TRANSFORM_FEEDBACK_ACTIVE			int32	= 0x8E24
	TRANSFORM_FEEDBACK_BINDING			int32	= 0x8E25
	PROGRAM_BINARY_RETRIEVABLE_HINT			int32	= 0x8257
	PROGRAM_BINARY_LENGTH				int32	= 0x8741
	NUM_PROGRAM_BINARY_FORMATS			int32	= 0x87FE
	PROGRAM_BINARY_FORMATS				int32	= 0x87FF
	COMPRESSED_R11_EAC				int32	= 0x9270
	COMPRESSED_SIGNED_R11_EAC			int32	= 0x9271
	COMPRESSED_RG11_EAC				int32	= 0x9272
	COMPRESSED_SIGNED_RG11_EAC			int32	= 0x9273
	COMPRESSED_RGB8_ETC2				int32	= 0x9274
	COMPRESSED_SRGB8_ETC2				int32	= 0x9275
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	int32	= 0x9276
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	int32	= 0x9277
	COMPRESSED_RGBA8_ETC2_EAC			int32	= 0x9278
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC		int32	= 0x9279
	TEXTURE_IMMUTABLE_FORMAT			int32	= 0x912F
	MAX_ELEMENT_INDEX				int32	= 0x8D6B
	NUM_SAMPLE_COUNTS				int32	= 0x9380
	TEXTURE_IMMUTABLE_LEVELS			int32	= 0x82DF
	COMPUTE_SHADER					int32	= 0x91B9
	MAX_COMPUTE_UNIFORM_BLOCKS			int32	= 0x91BB
	MAX_COMPUTE_TEXTURE_IMAGE_UNITS			int32	= 0x91BC
	MAX_COMPUTE_IMAGE_UNIFORMS			int32	= 0x91BD
	MAX_COMPUTE_SHARED_MEMORY_SIZE			int32	= 0x8262
	MAX_COMPUTE_UNIFORM_COMPONENTS			int32	= 0x8263
	MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS		int32	= 0x8264
	MAX_COMPUTE_ATOMIC_COUNTERS			int32	= 0x8265
	MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS		int32	= 0x8266
	MAX_COMPUTE_WORK_GROUP_INVOCATIONS		int32	= 0x90EB
	MAX_COMPUTE_WORK_GROUP_COUNT			int32	= 0x91BE
	MAX_COMPUTE_WORK_GROUP_SIZE			int32	= 0x91BF
	COMPUTE_WORK_GROUP_SIZE				int32	= 0x8267
	DISPATCH_INDIRECT_BUFFER			int32	= 0x90EE
	DISPATCH_INDIRECT_BUFFER_BINDING		int32	= 0x90EF
	COMPUTE_SHADER_BIT				int32	= 0x00000020
	DRAW_INDIRECT_BUFFER				int32	= 0x8F3F
	DRAW_INDIRECT_BUFFER_BINDING			int32	= 0x8F43
	MAX_UNIFORM_LOCATIONS				int32	= 0x826E
	FRAMEBUFFER_DEFAULT_WIDTH			int32	= 0x9310
	FRAMEBUFFER_DEFAULT_HEIGHT			int32	= 0x9311
	FRAMEBUFFER_DEFAULT_SAMPLES			int32	= 0x9313
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS	int32	= 0x9314
	MAX_FRAMEBUFFER_WIDTH				int32	= 0x9315
	MAX_FRAMEBUFFER_HEIGHT				int32	= 0x9316
	MAX_FRAMEBUFFER_SAMPLES				int32	= 0x9318
	UNIFORM						int32	= 0x92E1
	UNIFORM_BLOCK					int32	= 0x92E2
	PROGRAM_INPUT					int32	= 0x92E3
	PROGRAM_OUTPUT					int32	= 0x92E4
	BUFFER_VARIABLE					int32	= 0x92E5
	SHADER_STORAGE_BLOCK				int32	= 0x92E6
	ATOMIC_COUNTER_BUFFER				int32	= 0x92C0
	TRANSFORM_FEEDBACK_VARYING			int32	= 0x92F4
	ACTIVE_RESOURCES				int32	= 0x92F5
	MAX_NAME_LENGTH					int32	= 0x92F6
	MAX_NUM_ACTIVE_VARIABLES			int32	= 0x92F7
	NAME_LENGTH					int32	= 0x92F9
	TYPE						int32	= 0x92FA
	ARRAY_SIZE					int32	= 0x92FB
	OFFSET						int32	= 0x92FC
	BLOCK_INDEX					int32	= 0x92FD
	ARRAY_STRIDE					int32	= 0x92FE
	MATRIX_STRIDE					int32	= 0x92FF
	IS_ROW_MAJOR					int32	= 0x9300
	ATOMIC_COUNTER_BUFFER_INDEX			int32	= 0x9301
	BUFFER_BINDING					int32	= 0x9302
	BUFFER_DATA_SIZE				int32	= 0x9303
	NUM_ACTIVE_VARIABLES				int32	= 0x9304
	ACTIVE_VARIABLES				int32	= 0x9305
	REFERENCED_BY_VERTEX_SHADER			int32	= 0x9306
	REFERENCED_BY_FRAGMENT_SHADER			int32	= 0x930A
	REFERENCED_BY_COMPUTE_SHADER			int32	= 0x930B
	TOP_LEVEL_ARRAY_SIZE				int32	= 0x930C
	TOP_LEVEL_ARRAY_STRIDE				int32	= 0x930D
	LOCATION					int32	= 0x930E
	VERTEX_SHADER_BIT				int32	= 0x00000001
	FRAGMENT_SHADER_BIT				int32	= 0x00000002
	ALL_SHADER_BITS					uint64	= 0xFFFFFFFF
	PROGRAM_SEPARABLE				int32	= 0x8258
	ACTIVE_PROGRAM					int32	= 0x8259
	PROGRAM_PIPELINE_BINDING			int32	= 0x825A
	ATOMIC_COUNTER_BUFFER_BINDING			int32	= 0x92C1
	ATOMIC_COUNTER_BUFFER_START			int32	= 0x92C2
	ATOMIC_COUNTER_BUFFER_SIZE			int32	= 0x92C3
	MAX_VERTEX_ATOMIC_COUNTER_BUFFERS		int32	= 0x92CC
	MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS		int32	= 0x92D0
	MAX_COMBINED_ATOMIC_COUNTER_BUFFERS		int32	= 0x92D1
	MAX_VERTEX_ATOMIC_COUNTERS			int32	= 0x92D2
	MAX_FRAGMENT_ATOMIC_COUNTERS			int32	= 0x92D6
	MAX_COMBINED_ATOMIC_COUNTERS			int32	= 0x92D7
	MAX_ATOMIC_COUNTER_BUFFER_SIZE			int32	= 0x92D8
	MAX_ATOMIC_COUNTER_BUFFER_BINDINGS		int32	= 0x92DC
	ACTIVE_ATOMIC_COUNTER_BUFFERS			int32	= 0x92D9
	UNSIGNED_INT_ATOMIC_COUNTER			int32	= 0x92DB
	MAX_IMAGE_UNITS					int32	= 0x8F38
	MAX_VERTEX_IMAGE_UNIFORMS			int32	= 0x90CA
	MAX_FRAGMENT_IMAGE_UNIFORMS			int32	= 0x90CE
	MAX_COMBINED_IMAGE_UNIFORMS			int32	= 0x90CF
	IMAGE_BINDING_NAME				int32	= 0x8F3A
	IMAGE_BINDING_LEVEL				int32	= 0x8F3B
	IMAGE_BINDING_LAYERED				int32	= 0x8F3C
	IMAGE_BINDING_LAYER				int32	= 0x8F3D
	IMAGE_BINDING_ACCESS				int32	= 0x8F3E
	IMAGE_BINDING_FORMAT				int32	= 0x906E
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT			int32	= 0x00000001
	ELEMENT_ARRAY_BARRIER_BIT			int32	= 0x00000002
	UNIFORM_BARRIER_BIT				int32	= 0x00000004
	TEXTURE_FETCH_BARRIER_BIT			int32	= 0x00000008
	SHADER_IMAGE_ACCESS_BARRIER_BIT			int32	= 0x00000020
	COMMAND_BARRIER_BIT				int32	= 0x00000040
	PIXEL_BUFFER_BARRIER_BIT			int32	= 0x00000080
	TEXTURE_UPDATE_BARRIER_BIT			int32	= 0x00000100
	BUFFER_UPDATE_BARRIER_BIT			int32	= 0x00000200
	FRAMEBUFFER_BARRIER_BIT				int32	= 0x00000400
	TRANSFORM_FEEDBACK_BARRIER_BIT			int32	= 0x00000800
	ATOMIC_COUNTER_BARRIER_BIT			int32	= 0x00001000
	ALL_BARRIER_BITS				uint64	= 0xFFFFFFFF
	IMAGE_2D					int32	= 0x904D
	IMAGE_3D					int32	= 0x904E
	IMAGE_CUBE					int32	= 0x9050
	IMAGE_2D_ARRAY					int32	= 0x9053
	INT_IMAGE_2D					int32	= 0x9058
	INT_IMAGE_3D					int32	= 0x9059
	INT_IMAGE_CUBE					int32	= 0x905B
	INT_IMAGE_2D_ARRAY				int32	= 0x905E
	UNSIGNED_INT_IMAGE_2D				int32	= 0x9063
	UNSIGNED_INT_IMAGE_3D				int32	= 0x9064
	UNSIGNED_INT_IMAGE_CUBE				int32	= 0x9066
	UNSIGNED_INT_IMAGE_2D_ARRAY			int32	= 0x9069
	IMAGE_FORMAT_COMPATIBILITY_TYPE			int32	= 0x90C7
	IMAGE_FORMAT_COMPATIBILITY_BY_SIZE		int32	= 0x90C8
	IMAGE_FORMAT_COMPATIBILITY_BY_CLASS		int32	= 0x90C9
	READ_ONLY					int32	= 0x88B8
	WRITE_ONLY					int32	= 0x88B9
	READ_WRITE					int32	= 0x88BA
	SHADER_STORAGE_BUFFER				int32	= 0x90D2
	SHADER_STORAGE_BUFFER_BINDING			int32	= 0x90D3
	SHADER_STORAGE_BUFFER_START			int32	= 0x90D4
	SHADER_STORAGE_BUFFER_SIZE			int32	= 0x90D5
	MAX_VERTEX_SHADER_STORAGE_BLOCKS		int32	= 0x90D6
	MAX_FRAGMENT_SHADER_STORAGE_BLOCKS		int32	= 0x90DA
	MAX_COMPUTE_SHADER_STORAGE_BLOCKS		int32	= 0x90DB
	MAX_COMBINED_SHADER_STORAGE_BLOCKS		int32	= 0x90DC
	MAX_SHADER_STORAGE_BUFFER_BINDINGS		int32	= 0x90DD
	MAX_SHADER_STORAGE_BLOCK_SIZE			int32	= 0x90DE
	SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT		int32	= 0x90DF
	SHADER_STORAGE_BARRIER_BIT			int32	= 0x00002000
	MAX_COMBINED_SHADER_OUTPUT_RESOURCES		int32	= 0x8F39
	DEPTH_STENCIL_TEXTURE_MODE			int32	= 0x90EA
	STENCIL_INDEX					int32	= 0x1901
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET		int32	= 0x8E5E
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET		int32	= 0x8E5F
	SAMPLE_POSITION					int32	= 0x8E50
	SAMPLE_MASK					int32	= 0x8E51
	SAMPLE_MASK_VALUE				int32	= 0x8E52
	TEXTURE_2D_MULTISAMPLE				int32	= 0x9100
	MAX_SAMPLE_MASK_WORDS				int32	= 0x8E59
	MAX_COLOR_TEXTURE_SAMPLES			int32	= 0x910E
	MAX_DEPTH_TEXTURE_SAMPLES			int32	= 0x910F
	MAX_INTEGER_SAMPLES				int32	= 0x9110
	TEXTURE_BINDING_2D_MULTISAMPLE			int32	= 0x9104
	TEXTURE_SAMPLES					int32	= 0x9106
	TEXTURE_FIXED_SAMPLE_LOCATIONS			int32	= 0x9107
	TEXTURE_WIDTH					int32	= 0x1000
	TEXTURE_HEIGHT					int32	= 0x1001
	TEXTURE_DEPTH					int32	= 0x8071
	TEXTURE_INTERNAL_FORMAT				int32	= 0x1003
	TEXTURE_RED_SIZE				int32	= 0x805C
	TEXTURE_GREEN_SIZE				int32	= 0x805D
	TEXTURE_BLUE_SIZE				int32	= 0x805E
	TEXTURE_ALPHA_SIZE				int32	= 0x805F
	TEXTURE_DEPTH_SIZE				int32	= 0x884A
	TEXTURE_STENCIL_SIZE				int32	= 0x88F1
	TEXTURE_SHARED_SIZE				int32	= 0x8C3F
	TEXTURE_RED_TYPE				int32	= 0x8C10
	TEXTURE_GREEN_TYPE				int32	= 0x8C11
	TEXTURE_BLUE_TYPE				int32	= 0x8C12
	TEXTURE_ALPHA_TYPE				int32	= 0x8C13
	TEXTURE_DEPTH_TYPE				int32	= 0x8C16
	TEXTURE_COMPRESSED				int32	= 0x86A1
	SAMPLER_2D_MULTISAMPLE				int32	= 0x9108
	INT_SAMPLER_2D_MULTISAMPLE			int32	= 0x9109
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE		int32	= 0x910A
	VERTEX_ATTRIB_BINDING				int32	= 0x82D4
	VERTEX_ATTRIB_RELATIVE_OFFSET			int32	= 0x82D5
	VERTEX_BINDING_DIVISOR				int32	= 0x82D6
	VERTEX_BINDING_OFFSET				int32	= 0x82D7
	VERTEX_BINDING_STRIDE				int32	= 0x82D8
	VERTEX_BINDING_BUFFER				int32	= 0x8F4F
	MAX_VERTEX_ATTRIB_RELATIVE_OFFSET		int32	= 0x82D9
	MAX_VERTEX_ATTRIB_BINDINGS			int32	= 0x82DA
	MAX_VERTEX_ATTRIB_STRIDE			int32	= 0x82E5
)</pre>
		<p></p>
	
</span>









	<h1 id="Bool" class="hdr pkg hdr-function"><a href="#Bool" title="permalink">»</a>&nbsp;func Bool(v uint8) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Bool(v uint8) bool</pre>
		<p>
Bool converts from a OpenGL uint8 boolean to a Go bool.
</p>

	</span>

	<h1 id="ByteString" class="hdr pkg hdr-function"><a href="#ByteString" title="permalink">»</a>&nbsp;func ByteString(v *byte) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func ByteString(v *byte) string</pre>
		<p>
ByteString converts from a OpenGL *byte string to a Go string.
</p>

	</span>

	<h1 id="GLBool" class="hdr pkg hdr-function"><a href="#GLBool" title="permalink">»</a>&nbsp;func GLBool(v bool) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GLBool(v bool) uint8</pre>
		<p>
GLBool converts from a Go bool to a OpenGL uint8 boolean.
</p>

	</span>

	<h1 id="String" class="hdr pkg hdr-function"><a href="#String" title="permalink">»</a>&nbsp;func String(v *uint8) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func String(v *uint8) string</pre>
		<p>
String converts from a OpenGL *uint8 string to a Go string.
</p>

	</span>





	
	<h1 id="Context" class="hdr pkg hdr-type"><a href="#Context" title="permalink">»</a>&nbsp;type Context <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Context struct {
	// contains filtered or unexported fields
}</pre>
		<p>
Context represents a single OpenGL context&#39;s API access.
</p>
<p>
Since CGO (Go to C) calls are expensive in large quantities as they require
a context switch due to Go&#39;s and C&#39;s incompatibile ABI, and since even
modern OpenGL applications can make several hundred thousands of calls per
frame, it can become a large bottleneck.
</p>
<p>
To help remedy this specific bottleneck, batching can be used. When OpenGL
calls are made and batching is turned on, instead of calls being executed
immedietly they are stored in a queue and executed later upon a single call
to the Execute() method.
</p>
<p>
When batching is turned off and OpenGL calls are made, they are executed
immedietly, the Execute() method is no-op, and large amounts of OpenGL calls
will suffer from the performance degration described above.
</p>
<p>
Additionally, batching may be turned on or off at runtime (even in-between
OpenGL calls) using the SetBatching() method at runtime.
</p>
<p>
Note that since batched OpenGL calls are only truly made upon invocation of
the Execute() method, the memory for pointer arguments to OpenGL function
calls must remain valid at least untill Execute() is called or else memory
corruption is possible.
</p>
<p>
Also note that OpenGL functions which return anything, such as the GetString
function, cannot be queued for batching because they require that the value
be immedietly returned. Also, if the function in question relies on previous
OpenGL commands being executed first, you are responsible for calling the
Execute() method.
</p>
<p>
Since batching requires some extra effort on the programmer&#39;s side, and
since debugging applications with batching turned on is more difficult, it
is by default turned off.
</p>

	</span>

	
	
		<h1 id="New" class="hdr pkg hdr-function"><a href="#New" title="permalink">»</a>&nbsp;func New() *Context <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func New() *Context</pre>
			<p>
New returns a new initialized Context with batching turned on.
</p>

		</span>
	

	
	
		
		<h1 id="Context.ActiveShaderProgram" class="hdr pkg hdr-method"><a href="#Context.ActiveShaderProgram" title="permalink">»</a>&nbsp;func (c *Context) ActiveShaderProgram(pipeline uint32, program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ActiveShaderProgram(pipeline uint32, program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ActiveTexture" class="hdr pkg hdr-method"><a href="#Context.ActiveTexture" title="permalink">»</a>&nbsp;func (c *Context) ActiveTexture(texture int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ActiveTexture(texture int32)</pre>
			
		</span>
	
		
		<h1 id="Context.AtLeastRelease" class="hdr pkg hdr-method"><a href="#Context.AtLeastRelease" title="permalink">»</a>&nbsp;func (c *Context) AtLeastRelease(minRelease int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastRelease(minRelease int) bool</pre>
			<p>
AtLeastRelease tells if the release OpenGL version reported by c.Version()
is at least minRelease.
</p>
<p>
It is implemented as:
</p>
<pre>if release == 0 {
    return true
} else if release &gt;= minRelease {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AtLeastShaderRelease" class="hdr pkg hdr-method"><a href="#Context.AtLeastShaderRelease" title="permalink">»</a>&nbsp;func (c *Context) AtLeastShaderRelease(minRelease int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastShaderRelease(minRelease int) bool</pre>
			<p>
AtLeastShaderRelease tells if the release GLSL version reported by
c.ShaderVersion() is at least minRelease.
</p>
<p>
It is implemented as:
</p>
<pre>if release == 0 {
    return true
} else if release &gt;= minRelease {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AtLeastShaderVersion" class="hdr pkg hdr-method"><a href="#Context.AtLeastShaderVersion" title="permalink">»</a>&nbsp;func (c *Context) AtLeastShaderVersion(minMajor, minMinor int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastShaderVersion(minMajor, minMinor int) bool</pre>
			<p>
AtLeastShaderVersion tells if the major and minor GLSL version reported by
c.ShaderVersion() is at least minMajor, minMinor.
</p>
<p>
It is implemented as:
</p>
<pre>if major &gt; minMajor {
    return true
} else if major == minMajor &amp;&amp; minor &gt;= minMinor {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AtLeastVersion" class="hdr pkg hdr-method"><a href="#Context.AtLeastVersion" title="permalink">»</a>&nbsp;func (c *Context) AtLeastVersion(minMajor, minMinor int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastVersion(minMajor, minMinor int) bool</pre>
			<p>
AtLeastVersion tells if the major and minor OpenGL version reported by
c.Version() is at least minMajor, minMinor.
</p>
<p>
It is implemented as:
</p>
<pre>if major &gt; minMajor {
    return true
} else if major == minMajor &amp;&amp; minor &gt;= minMinor {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AttachShader" class="hdr pkg hdr-method"><a href="#Context.AttachShader" title="permalink">»</a>&nbsp;func (c *Context) AttachShader(program uint32, shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AttachShader(program uint32, shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Batching" class="hdr pkg hdr-method"><a href="#Context.Batching" title="permalink">»</a>&nbsp;func (c *Context) Batching() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Batching() bool</pre>
			<p>
Batching tells whether or not batching is on or off for this Context.
</p>

		</span>
	
		
		<h1 id="Context.BeginQuery" class="hdr pkg hdr-method"><a href="#Context.BeginQuery" title="permalink">»</a>&nbsp;func (c *Context) BeginQuery(target int32, id uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BeginQuery(target int32, id uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BeginTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.BeginTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) BeginTransformFeedback(primitiveMode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BeginTransformFeedback(primitiveMode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindAttribLocation" class="hdr pkg hdr-method"><a href="#Context.BindAttribLocation" title="permalink">»</a>&nbsp;func (c *Context) BindAttribLocation(program uint32, index uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindAttribLocation(program uint32, index uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBuffer" class="hdr pkg hdr-method"><a href="#Context.BindBuffer" title="permalink">»</a>&nbsp;func (c *Context) BindBuffer(target int32, buffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBuffer(target int32, buffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBufferBase" class="hdr pkg hdr-method"><a href="#Context.BindBufferBase" title="permalink">»</a>&nbsp;func (c *Context) BindBufferBase(target int32, index uint32, buffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBufferBase(target int32, index uint32, buffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBufferRange" class="hdr pkg hdr-method"><a href="#Context.BindBufferRange" title="permalink">»</a>&nbsp;func (c *Context) BindBufferRange(target int32, index uint32, buffer uint32, offset uintptr, size uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBufferRange(target int32, index uint32, buffer uint32, offset uintptr, size uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.BindFramebuffer" class="hdr pkg hdr-method"><a href="#Context.BindFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) BindFramebuffer(target int32, framebuffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindFramebuffer(target int32, framebuffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindImageTexture" class="hdr pkg hdr-method"><a href="#Context.BindImageTexture" title="permalink">»</a>&nbsp;func (c *Context) BindImageTexture(unit uint32, texture uint32, level int32, layered uint8, layer int32, access int32, format int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindImageTexture(unit uint32, texture uint32, level int32, layered uint8, layer int32, access int32, format int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindProgramPipeline" class="hdr pkg hdr-method"><a href="#Context.BindProgramPipeline" title="permalink">»</a>&nbsp;func (c *Context) BindProgramPipeline(pipeline uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindProgramPipeline(pipeline uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindRenderbuffer" class="hdr pkg hdr-method"><a href="#Context.BindRenderbuffer" title="permalink">»</a>&nbsp;func (c *Context) BindRenderbuffer(target int32, renderbuffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindRenderbuffer(target int32, renderbuffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindSampler" class="hdr pkg hdr-method"><a href="#Context.BindSampler" title="permalink">»</a>&nbsp;func (c *Context) BindSampler(unit uint32, sampler uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindSampler(unit uint32, sampler uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindTexture" class="hdr pkg hdr-method"><a href="#Context.BindTexture" title="permalink">»</a>&nbsp;func (c *Context) BindTexture(target int32, texture uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindTexture(target int32, texture uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.BindTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) BindTransformFeedback(target int32, id uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindTransformFeedback(target int32, id uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindVertexArray" class="hdr pkg hdr-method"><a href="#Context.BindVertexArray" title="permalink">»</a>&nbsp;func (c *Context) BindVertexArray(array uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindVertexArray(array uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindVertexBuffer" class="hdr pkg hdr-method"><a href="#Context.BindVertexBuffer" title="permalink">»</a>&nbsp;func (c *Context) BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendColor" class="hdr pkg hdr-method"><a href="#Context.BlendColor" title="permalink">»</a>&nbsp;func (c *Context) BlendColor(red float32, green float32, blue float32, alpha float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendColor(red float32, green float32, blue float32, alpha float32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendEquation" class="hdr pkg hdr-method"><a href="#Context.BlendEquation" title="permalink">»</a>&nbsp;func (c *Context) BlendEquation(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendEquation(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendEquationSeparate" class="hdr pkg hdr-method"><a href="#Context.BlendEquationSeparate" title="permalink">»</a>&nbsp;func (c *Context) BlendEquationSeparate(modeRGB int32, modeAlpha int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendEquationSeparate(modeRGB int32, modeAlpha int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendFunc" class="hdr pkg hdr-method"><a href="#Context.BlendFunc" title="permalink">»</a>&nbsp;func (c *Context) BlendFunc(sfactor int32, dfactor int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendFunc(sfactor int32, dfactor int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendFuncSeparate" class="hdr pkg hdr-method"><a href="#Context.BlendFuncSeparate" title="permalink">»</a>&nbsp;func (c *Context) BlendFuncSeparate(sfactorRGB int32, dfactorRGB int32, sfactorAlpha int32, dfactorAlpha int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendFuncSeparate(sfactorRGB int32, dfactorRGB int32, sfactorAlpha int32, dfactorAlpha int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlitFramebuffer" class="hdr pkg hdr-method"><a href="#Context.BlitFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BufferData" class="hdr pkg hdr-method"><a href="#Context.BufferData" title="permalink">»</a>&nbsp;func (c *Context) BufferData(target int32, size uintptr, data unsafe.Pointer, usage int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BufferData(target int32, size uintptr, data unsafe.Pointer, usage int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BufferSubData" class="hdr pkg hdr-method"><a href="#Context.BufferSubData" title="permalink">»</a>&nbsp;func (c *Context) BufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CheckFramebufferStatus" class="hdr pkg hdr-method"><a href="#Context.CheckFramebufferStatus" title="permalink">»</a>&nbsp;func (c *Context) CheckFramebufferStatus(target int32) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CheckFramebufferStatus(target int32) int32</pre>
			
		</span>
	
		
		<h1 id="Context.Clear" class="hdr pkg hdr-method"><a href="#Context.Clear" title="permalink">»</a>&nbsp;func (c *Context) Clear(mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Clear(mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferfi" class="hdr pkg hdr-method"><a href="#Context.ClearBufferfi" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferfi(buffer int32, drawbuffer int32, depth float32, stencil int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferfi(buffer int32, drawbuffer int32, depth float32, stencil int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferfv" class="hdr pkg hdr-method"><a href="#Context.ClearBufferfv" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferfv(buffer int32, drawbuffer int32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferfv(buffer int32, drawbuffer int32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferiv" class="hdr pkg hdr-method"><a href="#Context.ClearBufferiv" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferiv(buffer int32, drawbuffer int32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferiv(buffer int32, drawbuffer int32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferuiv" class="hdr pkg hdr-method"><a href="#Context.ClearBufferuiv" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferuiv(buffer int32, drawbuffer int32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferuiv(buffer int32, drawbuffer int32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearColor" class="hdr pkg hdr-method"><a href="#Context.ClearColor" title="permalink">»</a>&nbsp;func (c *Context) ClearColor(red float32, green float32, blue float32, alpha float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearColor(red float32, green float32, blue float32, alpha float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearDepthf" class="hdr pkg hdr-method"><a href="#Context.ClearDepthf" title="permalink">»</a>&nbsp;func (c *Context) ClearDepthf(d float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearDepthf(d float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearStencil" class="hdr pkg hdr-method"><a href="#Context.ClearStencil" title="permalink">»</a>&nbsp;func (c *Context) ClearStencil(s int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearStencil(s int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClientWaitSync" class="hdr pkg hdr-method"><a href="#Context.ClientWaitSync" title="permalink">»</a>&nbsp;func (c *Context) ClientWaitSync(sync Sync, flags uint32, timeout uint64) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClientWaitSync(sync Sync, flags uint32, timeout uint64) int32</pre>
			
		</span>
	
		
		<h1 id="Context.ColorMask" class="hdr pkg hdr-method"><a href="#Context.ColorMask" title="permalink">»</a>&nbsp;func (c *Context) ColorMask(red uint8, green uint8, blue uint8, alpha uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorMask(red uint8, green uint8, blue uint8, alpha uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.CompileShader" class="hdr pkg hdr-method"><a href="#Context.CompileShader" title="permalink">»</a>&nbsp;func (c *Context) CompileShader(shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompileShader(shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexImage2D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexImage2D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexImage3D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexImage3D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexSubImage2D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexSubImage2D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexSubImage3D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexSubImage3D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyBufferSubData" class="hdr pkg hdr-method"><a href="#Context.CopyBufferSubData" title="permalink">»</a>&nbsp;func (c *Context) CopyBufferSubData(readTarget int32, writeTarget int32, readOffset uintptr, writeOffset uintptr, size uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyBufferSubData(readTarget int32, writeTarget int32, readOffset uintptr, writeOffset uintptr, size uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexImage2D" class="hdr pkg hdr-method"><a href="#Context.CopyTexImage2D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexImage2D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, height uint32, border int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexImage2D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, height uint32, border int32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexSubImage2D" class="hdr pkg hdr-method"><a href="#Context.CopyTexSubImage2D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexSubImage3D" class="hdr pkg hdr-method"><a href="#Context.CopyTexSubImage3D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CreateProgram" class="hdr pkg hdr-method"><a href="#Context.CreateProgram" title="permalink">»</a>&nbsp;func (c *Context) CreateProgram() uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CreateProgram() uint32</pre>
			
		</span>
	
		
		<h1 id="Context.CreateShader" class="hdr pkg hdr-method"><a href="#Context.CreateShader" title="permalink">»</a>&nbsp;func (c *Context) CreateShader(pType int32) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CreateShader(pType int32) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.CreateShaderProgramv" class="hdr pkg hdr-method"><a href="#Context.CreateShaderProgramv" title="permalink">»</a>&nbsp;func (c *Context) CreateShaderProgramv(pType int32, count uint32, strings **byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CreateShaderProgramv(pType int32, count uint32, strings **byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.CullFace" class="hdr pkg hdr-method"><a href="#Context.CullFace" title="permalink">»</a>&nbsp;func (c *Context) CullFace(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CullFace(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteBuffers" class="hdr pkg hdr-method"><a href="#Context.DeleteBuffers" title="permalink">»</a>&nbsp;func (c *Context) DeleteBuffers(n uint32, buffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteBuffers(n uint32, buffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteFramebuffers" class="hdr pkg hdr-method"><a href="#Context.DeleteFramebuffers" title="permalink">»</a>&nbsp;func (c *Context) DeleteFramebuffers(n uint32, framebuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteFramebuffers(n uint32, framebuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteProgram" class="hdr pkg hdr-method"><a href="#Context.DeleteProgram" title="permalink">»</a>&nbsp;func (c *Context) DeleteProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteProgramPipelines" class="hdr pkg hdr-method"><a href="#Context.DeleteProgramPipelines" title="permalink">»</a>&nbsp;func (c *Context) DeleteProgramPipelines(n uint32, pipelines *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteProgramPipelines(n uint32, pipelines *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteQueries" class="hdr pkg hdr-method"><a href="#Context.DeleteQueries" title="permalink">»</a>&nbsp;func (c *Context) DeleteQueries(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteQueries(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteRenderbuffers" class="hdr pkg hdr-method"><a href="#Context.DeleteRenderbuffers" title="permalink">»</a>&nbsp;func (c *Context) DeleteRenderbuffers(n uint32, renderbuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteRenderbuffers(n uint32, renderbuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteSamplers" class="hdr pkg hdr-method"><a href="#Context.DeleteSamplers" title="permalink">»</a>&nbsp;func (c *Context) DeleteSamplers(count uint32, samplers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteSamplers(count uint32, samplers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteShader" class="hdr pkg hdr-method"><a href="#Context.DeleteShader" title="permalink">»</a>&nbsp;func (c *Context) DeleteShader(shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteShader(shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteSync" class="hdr pkg hdr-method"><a href="#Context.DeleteSync" title="permalink">»</a>&nbsp;func (c *Context) DeleteSync(sync Sync) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteSync(sync Sync)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteTextures" class="hdr pkg hdr-method"><a href="#Context.DeleteTextures" title="permalink">»</a>&nbsp;func (c *Context) DeleteTextures(n uint32, textures *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteTextures(n uint32, textures *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteTransformFeedbacks" class="hdr pkg hdr-method"><a href="#Context.DeleteTransformFeedbacks" title="permalink">»</a>&nbsp;func (c *Context) DeleteTransformFeedbacks(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteTransformFeedbacks(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteVertexArrays" class="hdr pkg hdr-method"><a href="#Context.DeleteVertexArrays" title="permalink">»</a>&nbsp;func (c *Context) DeleteVertexArrays(n uint32, arrays *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteVertexArrays(n uint32, arrays *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthFunc" class="hdr pkg hdr-method"><a href="#Context.DepthFunc" title="permalink">»</a>&nbsp;func (c *Context) DepthFunc(pFunc int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthFunc(pFunc int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthMask" class="hdr pkg hdr-method"><a href="#Context.DepthMask" title="permalink">»</a>&nbsp;func (c *Context) DepthMask(flag uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthMask(flag uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthRangef" class="hdr pkg hdr-method"><a href="#Context.DepthRangef" title="permalink">»</a>&nbsp;func (c *Context) DepthRangef(n float32, f float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthRangef(n float32, f float32)</pre>
			
		</span>
	
		
		<h1 id="Context.DetachShader" class="hdr pkg hdr-method"><a href="#Context.DetachShader" title="permalink">»</a>&nbsp;func (c *Context) DetachShader(program uint32, shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DetachShader(program uint32, shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Disable" class="hdr pkg hdr-method"><a href="#Context.Disable" title="permalink">»</a>&nbsp;func (c *Context) Disable(cap int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Disable(cap int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DisableVertexAttribArray" class="hdr pkg hdr-method"><a href="#Context.DisableVertexAttribArray" title="permalink">»</a>&nbsp;func (c *Context) DisableVertexAttribArray(index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DisableVertexAttribArray(index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DispatchCompute" class="hdr pkg hdr-method"><a href="#Context.DispatchCompute" title="permalink">»</a>&nbsp;func (c *Context) DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DispatchComputeIndirect" class="hdr pkg hdr-method"><a href="#Context.DispatchComputeIndirect" title="permalink">»</a>&nbsp;func (c *Context) DispatchComputeIndirect(indirect uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DispatchComputeIndirect(indirect uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawArrays" class="hdr pkg hdr-method"><a href="#Context.DrawArrays" title="permalink">»</a>&nbsp;func (c *Context) DrawArrays(mode int32, first int32, count uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawArrays(mode int32, first int32, count uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawArraysIndirect" class="hdr pkg hdr-method"><a href="#Context.DrawArraysIndirect" title="permalink">»</a>&nbsp;func (c *Context) DrawArraysIndirect(mode int32, indirect unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawArraysIndirect(mode int32, indirect unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawArraysInstanced" class="hdr pkg hdr-method"><a href="#Context.DrawArraysInstanced" title="permalink">»</a>&nbsp;func (c *Context) DrawArraysInstanced(mode int32, first int32, count uint32, instancecount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawArraysInstanced(mode int32, first int32, count uint32, instancecount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawBuffers" class="hdr pkg hdr-method"><a href="#Context.DrawBuffers" title="permalink">»</a>&nbsp;func (c *Context) DrawBuffers(n uint32, bufs *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawBuffers(n uint32, bufs *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElements" class="hdr pkg hdr-method"><a href="#Context.DrawElements" title="permalink">»</a>&nbsp;func (c *Context) DrawElements(mode int32, count uint32, pType int32, indices unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElements(mode int32, count uint32, pType int32, indices unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsIndirect" class="hdr pkg hdr-method"><a href="#Context.DrawElementsIndirect" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsInstanced" class="hdr pkg hdr-method"><a href="#Context.DrawElementsInstanced" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsInstanced(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsInstanced(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawRangeElements" class="hdr pkg hdr-method"><a href="#Context.DrawRangeElements" title="permalink">»</a>&nbsp;func (c *Context) DrawRangeElements(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawRangeElements(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.Enable" class="hdr pkg hdr-method"><a href="#Context.Enable" title="permalink">»</a>&nbsp;func (c *Context) Enable(cap int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Enable(cap int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EnableVertexAttribArray" class="hdr pkg hdr-method"><a href="#Context.EnableVertexAttribArray" title="permalink">»</a>&nbsp;func (c *Context) EnableVertexAttribArray(index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EnableVertexAttribArray(index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.EndQuery" class="hdr pkg hdr-method"><a href="#Context.EndQuery" title="permalink">»</a>&nbsp;func (c *Context) EndQuery(target int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EndQuery(target int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EndTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.EndTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) EndTransformFeedback() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EndTransformFeedback()</pre>
			
		</span>
	
		
		<h1 id="Context.Execute" class="hdr pkg hdr-method"><a href="#Context.Execute" title="permalink">»</a>&nbsp;func (c *Context) Execute() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Execute()</pre>
			<p>
Execute executes all the currently pending OpenGL function calls for this
Context.
</p>
<p>
This function executes pending calls regardless of whether or not batching
is turned on.
</p>

		</span>
	
		
		<h1 id="Context.Extension" class="hdr pkg hdr-method"><a href="#Context.Extension" title="permalink">»</a>&nbsp;func (c *Context) Extension(name string) (supported bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Extension(name string) (supported bool)</pre>
			<p>
Extension tells if the specified extension is supported by the OpenGL
implementation.
</p>

		</span>
	
		
		<h1 id="Context.Extensions" class="hdr pkg hdr-method"><a href="#Context.Extensions" title="permalink">»</a>&nbsp;func (c *Context) Extensions() []string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Extensions() []string</pre>
			<p>
Extensions returns a slice of strings which represents all the extensions
supported by the OpenGL implementation.
</p>
<p>
Internally a map is used to store them, so a copy in the form of a slice is
returned.
</p>

		</span>
	
		
		<h1 id="Context.FenceSync" class="hdr pkg hdr-method"><a href="#Context.FenceSync" title="permalink">»</a>&nbsp;func (c *Context) FenceSync(condition int32, flags uint32) Sync <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FenceSync(condition int32, flags uint32) Sync</pre>
			
		</span>
	
		
		<h1 id="Context.Finish" class="hdr pkg hdr-method"><a href="#Context.Finish" title="permalink">»</a>&nbsp;func (c *Context) Finish() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Finish()</pre>
			
		</span>
	
		
		<h1 id="Context.Flush" class="hdr pkg hdr-method"><a href="#Context.Flush" title="permalink">»</a>&nbsp;func (c *Context) Flush() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Flush()</pre>
			
		</span>
	
		
		<h1 id="Context.FlushMappedBufferRange" class="hdr pkg hdr-method"><a href="#Context.FlushMappedBufferRange" title="permalink">»</a>&nbsp;func (c *Context) FlushMappedBufferRange(target int32, offset uintptr, length uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FlushMappedBufferRange(target int32, offset uintptr, length uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferParameteri" class="hdr pkg hdr-method"><a href="#Context.FramebufferParameteri" title="permalink">»</a>&nbsp;func (c *Context) FramebufferParameteri(target int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferParameteri(target int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferRenderbuffer" class="hdr pkg hdr-method"><a href="#Context.FramebufferRenderbuffer" title="permalink">»</a>&nbsp;func (c *Context) FramebufferRenderbuffer(target int32, attachment int32, renderbuffertarget int32, renderbuffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferRenderbuffer(target int32, attachment int32, renderbuffertarget int32, renderbuffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferTexture2D" class="hdr pkg hdr-method"><a href="#Context.FramebufferTexture2D" title="permalink">»</a>&nbsp;func (c *Context) FramebufferTexture2D(target int32, attachment int32, textarget int32, texture uint32, level int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferTexture2D(target int32, attachment int32, textarget int32, texture uint32, level int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferTextureLayer" class="hdr pkg hdr-method"><a href="#Context.FramebufferTextureLayer" title="permalink">»</a>&nbsp;func (c *Context) FramebufferTextureLayer(target int32, attachment int32, texture uint32, level int32, layer int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferTextureLayer(target int32, attachment int32, texture uint32, level int32, layer int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FrontFace" class="hdr pkg hdr-method"><a href="#Context.FrontFace" title="permalink">»</a>&nbsp;func (c *Context) FrontFace(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FrontFace(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenBuffers" class="hdr pkg hdr-method"><a href="#Context.GenBuffers" title="permalink">»</a>&nbsp;func (c *Context) GenBuffers(n uint32, buffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenBuffers(n uint32, buffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenFramebuffers" class="hdr pkg hdr-method"><a href="#Context.GenFramebuffers" title="permalink">»</a>&nbsp;func (c *Context) GenFramebuffers(n uint32, framebuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenFramebuffers(n uint32, framebuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenProgramPipelines" class="hdr pkg hdr-method"><a href="#Context.GenProgramPipelines" title="permalink">»</a>&nbsp;func (c *Context) GenProgramPipelines(n uint32, pipelines *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenProgramPipelines(n uint32, pipelines *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenQueries" class="hdr pkg hdr-method"><a href="#Context.GenQueries" title="permalink">»</a>&nbsp;func (c *Context) GenQueries(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenQueries(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenRenderbuffers" class="hdr pkg hdr-method"><a href="#Context.GenRenderbuffers" title="permalink">»</a>&nbsp;func (c *Context) GenRenderbuffers(n uint32, renderbuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenRenderbuffers(n uint32, renderbuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenSamplers" class="hdr pkg hdr-method"><a href="#Context.GenSamplers" title="permalink">»</a>&nbsp;func (c *Context) GenSamplers(count uint32, samplers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenSamplers(count uint32, samplers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenTextures" class="hdr pkg hdr-method"><a href="#Context.GenTextures" title="permalink">»</a>&nbsp;func (c *Context) GenTextures(n uint32, textures *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenTextures(n uint32, textures *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenTransformFeedbacks" class="hdr pkg hdr-method"><a href="#Context.GenTransformFeedbacks" title="permalink">»</a>&nbsp;func (c *Context) GenTransformFeedbacks(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenTransformFeedbacks(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenVertexArrays" class="hdr pkg hdr-method"><a href="#Context.GenVertexArrays" title="permalink">»</a>&nbsp;func (c *Context) GenVertexArrays(n uint32, arrays *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenVertexArrays(n uint32, arrays *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenerateMipmap" class="hdr pkg hdr-method"><a href="#Context.GenerateMipmap" title="permalink">»</a>&nbsp;func (c *Context) GenerateMipmap(target int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenerateMipmap(target int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveAttrib" class="hdr pkg hdr-method"><a href="#Context.GetActiveAttrib" title="permalink">»</a>&nbsp;func (c *Context) GetActiveAttrib(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveAttrib(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniform" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniform" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniform(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniform(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniformBlockName" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniformBlockName" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize uint32, length *uint32, uniformBlockName *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize uint32, length *uint32, uniformBlockName *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniformBlockiv" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniformBlockiv" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniformsiv" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniformsiv" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniformsiv(program uint32, uniformCount uint32, uniformIndices *uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniformsiv(program uint32, uniformCount uint32, uniformIndices *uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetAttachedShaders" class="hdr pkg hdr-method"><a href="#Context.GetAttachedShaders" title="permalink">»</a>&nbsp;func (c *Context) GetAttachedShaders(program uint32, maxCount uint32, count *uint32, shaders *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetAttachedShaders(program uint32, maxCount uint32, count *uint32, shaders *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetAttribLocation" class="hdr pkg hdr-method"><a href="#Context.GetAttribLocation" title="permalink">»</a>&nbsp;func (c *Context) GetAttribLocation(program uint32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetAttribLocation(program uint32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetBooleani_v" class="hdr pkg hdr-method"><a href="#Context.GetBooleani_v" title="permalink">»</a>&nbsp;func (c *Context) GetBooleani_v(target int32, index uint32, data *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBooleani_v(target int32, index uint32, data *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBooleanv" class="hdr pkg hdr-method"><a href="#Context.GetBooleanv" title="permalink">»</a>&nbsp;func (c *Context) GetBooleanv(pname int32, data *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBooleanv(pname int32, data *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBufferParameteri64v" class="hdr pkg hdr-method"><a href="#Context.GetBufferParameteri64v" title="permalink">»</a>&nbsp;func (c *Context) GetBufferParameteri64v(target int32, pname int32, params *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBufferParameteri64v(target int32, pname int32, params *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBufferParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetBufferParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetBufferParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBufferParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBufferPointerv" class="hdr pkg hdr-method"><a href="#Context.GetBufferPointerv" title="permalink">»</a>&nbsp;func (c *Context) GetBufferPointerv(target int32, pname int32, params *unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBufferPointerv(target int32, pname int32, params *unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetError" class="hdr pkg hdr-method"><a href="#Context.GetError" title="permalink">»</a>&nbsp;func (c *Context) GetError() int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetError() int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetFloatv" class="hdr pkg hdr-method"><a href="#Context.GetFloatv" title="permalink">»</a>&nbsp;func (c *Context) GetFloatv(pname int32, data *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFloatv(pname int32, data *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetFragDataLocation" class="hdr pkg hdr-method"><a href="#Context.GetFragDataLocation" title="permalink">»</a>&nbsp;func (c *Context) GetFragDataLocation(program uint32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFragDataLocation(program uint32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetFramebufferAttachmentParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetFramebufferAttachmentParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetFramebufferAttachmentParameteriv(target int32, attachment int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFramebufferAttachmentParameteriv(target int32, attachment int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetFramebufferParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetFramebufferParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetFramebufferParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFramebufferParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetInteger64i_v" class="hdr pkg hdr-method"><a href="#Context.GetInteger64i_v" title="permalink">»</a>&nbsp;func (c *Context) GetInteger64i_v(target int32, index uint32, data *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetInteger64i_v(target int32, index uint32, data *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetInteger64v" class="hdr pkg hdr-method"><a href="#Context.GetInteger64v" title="permalink">»</a>&nbsp;func (c *Context) GetInteger64v(pname int32, data *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetInteger64v(pname int32, data *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetIntegeri_v" class="hdr pkg hdr-method"><a href="#Context.GetIntegeri_v" title="permalink">»</a>&nbsp;func (c *Context) GetIntegeri_v(target int32, index uint32, data *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetIntegeri_v(target int32, index uint32, data *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetIntegerv" class="hdr pkg hdr-method"><a href="#Context.GetIntegerv" title="permalink">»</a>&nbsp;func (c *Context) GetIntegerv(pname int32, data *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetIntegerv(pname int32, data *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetInternalformativ" class="hdr pkg hdr-method"><a href="#Context.GetInternalformativ" title="permalink">»</a>&nbsp;func (c *Context) GetInternalformativ(target int32, internalformat int32, pname int32, bufSize uint32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetInternalformativ(target int32, internalformat int32, pname int32, bufSize uint32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetMultisamplefv" class="hdr pkg hdr-method"><a href="#Context.GetMultisamplefv" title="permalink">»</a>&nbsp;func (c *Context) GetMultisamplefv(pname int32, index uint32, val *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetMultisamplefv(pname int32, index uint32, val *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramBinary" class="hdr pkg hdr-method"><a href="#Context.GetProgramBinary" title="permalink">»</a>&nbsp;func (c *Context) GetProgramBinary(program uint32, bufSize uint32, length *uint32, binaryFormat *int32, binary unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramBinary(program uint32, bufSize uint32, length *uint32, binaryFormat *int32, binary unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramInfoLog" class="hdr pkg hdr-method"><a href="#Context.GetProgramInfoLog" title="permalink">»</a>&nbsp;func (c *Context) GetProgramInfoLog(program uint32, bufSize uint32, length *uint32, infoLog *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramInfoLog(program uint32, bufSize uint32, length *uint32, infoLog *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramInterfaceiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramInterfaceiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramInterfaceiv(program uint32, programInterface int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramInterfaceiv(program uint32, programInterface int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramPipelineInfoLog" class="hdr pkg hdr-method"><a href="#Context.GetProgramPipelineInfoLog" title="permalink">»</a>&nbsp;func (c *Context) GetProgramPipelineInfoLog(pipeline uint32, bufSize uint32, length *uint32, infoLog *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramPipelineInfoLog(pipeline uint32, bufSize uint32, length *uint32, infoLog *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramPipelineiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramPipelineiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramPipelineiv(pipeline uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramPipelineiv(pipeline uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceIndex" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceIndex" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceIndex(program uint32, programInterface int32, name *byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceIndex(program uint32, programInterface int32, name *byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceLocation" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceLocation" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceLocation(program uint32, programInterface int32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceLocation(program uint32, programInterface int32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceName" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceName" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceName(program uint32, programInterface int32, index uint32, bufSize uint32, length *uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceName(program uint32, programInterface int32, index uint32, bufSize uint32, length *uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceiv(program uint32, programInterface int32, index uint32, propCount uint32, props *int32, bufSize uint32, length *uint32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceiv(program uint32, programInterface int32, index uint32, propCount uint32, props *int32, bufSize uint32, length *uint32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramiv(program uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramiv(program uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryObjectuiv" class="hdr pkg hdr-method"><a href="#Context.GetQueryObjectuiv" title="permalink">»</a>&nbsp;func (c *Context) GetQueryObjectuiv(id uint32, pname int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryObjectuiv(id uint32, pname int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryiv" class="hdr pkg hdr-method"><a href="#Context.GetQueryiv" title="permalink">»</a>&nbsp;func (c *Context) GetQueryiv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryiv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetRenderbufferParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetRenderbufferParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetRenderbufferParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetRenderbufferParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetSamplerParameterfv" class="hdr pkg hdr-method"><a href="#Context.GetSamplerParameterfv" title="permalink">»</a>&nbsp;func (c *Context) GetSamplerParameterfv(sampler uint32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSamplerParameterfv(sampler uint32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetSamplerParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetSamplerParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetSamplerParameteriv(sampler uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSamplerParameteriv(sampler uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderInfoLog" class="hdr pkg hdr-method"><a href="#Context.GetShaderInfoLog" title="permalink">»</a>&nbsp;func (c *Context) GetShaderInfoLog(shader uint32, bufSize uint32, length *uint32, infoLog *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderInfoLog(shader uint32, bufSize uint32, length *uint32, infoLog *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderPrecisionFormat" class="hdr pkg hdr-method"><a href="#Context.GetShaderPrecisionFormat" title="permalink">»</a>&nbsp;func (c *Context) GetShaderPrecisionFormat(shadertype int32, precisiontype int32, pRange *int32, precision *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderPrecisionFormat(shadertype int32, precisiontype int32, pRange *int32, precision *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderSource" class="hdr pkg hdr-method"><a href="#Context.GetShaderSource" title="permalink">»</a>&nbsp;func (c *Context) GetShaderSource(shader uint32, bufSize uint32, length *uint32, source *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderSource(shader uint32, bufSize uint32, length *uint32, source *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderiv" class="hdr pkg hdr-method"><a href="#Context.GetShaderiv" title="permalink">»</a>&nbsp;func (c *Context) GetShaderiv(shader uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderiv(shader uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetString" class="hdr pkg hdr-method"><a href="#Context.GetString" title="permalink">»</a>&nbsp;func (c *Context) GetString(name int32) *uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetString(name int32) *uint8</pre>
			
		</span>
	
		
		<h1 id="Context.GetStringi" class="hdr pkg hdr-method"><a href="#Context.GetStringi" title="permalink">»</a>&nbsp;func (c *Context) GetStringi(name int32, index uint32) *uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetStringi(name int32, index uint32) *uint8</pre>
			
		</span>
	
		
		<h1 id="Context.GetSynciv" class="hdr pkg hdr-method"><a href="#Context.GetSynciv" title="permalink">»</a>&nbsp;func (c *Context) GetSynciv(sync Sync, pname int32, bufSize uint32, length *uint32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSynciv(sync Sync, pname int32, bufSize uint32, length *uint32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexLevelParameterfv" class="hdr pkg hdr-method"><a href="#Context.GetTexLevelParameterfv" title="permalink">»</a>&nbsp;func (c *Context) GetTexLevelParameterfv(target int32, level int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexLevelParameterfv(target int32, level int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexLevelParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetTexLevelParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetTexLevelParameteriv(target int32, level int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexLevelParameteriv(target int32, level int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexParameterfv" class="hdr pkg hdr-method"><a href="#Context.GetTexParameterfv" title="permalink">»</a>&nbsp;func (c *Context) GetTexParameterfv(target int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexParameterfv(target int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetTexParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetTexParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTransformFeedbackVarying" class="hdr pkg hdr-method"><a href="#Context.GetTransformFeedbackVarying" title="permalink">»</a>&nbsp;func (c *Context) GetTransformFeedbackVarying(program uint32, index uint32, bufSize uint32, length *uint32, size *uint32, pType *int32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTransformFeedbackVarying(program uint32, index uint32, bufSize uint32, length *uint32, size *uint32, pType *int32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformBlockIndex" class="hdr pkg hdr-method"><a href="#Context.GetUniformBlockIndex" title="permalink">»</a>&nbsp;func (c *Context) GetUniformBlockIndex(program uint32, uniformBlockName *byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformBlockIndex(program uint32, uniformBlockName *byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformIndices" class="hdr pkg hdr-method"><a href="#Context.GetUniformIndices" title="permalink">»</a>&nbsp;func (c *Context) GetUniformIndices(program uint32, uniformCount uint32, uniformNames **byte, uniformIndices *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformIndices(program uint32, uniformCount uint32, uniformNames **byte, uniformIndices *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformLocation" class="hdr pkg hdr-method"><a href="#Context.GetUniformLocation" title="permalink">»</a>&nbsp;func (c *Context) GetUniformLocation(program uint32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformLocation(program uint32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformfv" class="hdr pkg hdr-method"><a href="#Context.GetUniformfv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformfv(program uint32, location int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformfv(program uint32, location int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformiv" class="hdr pkg hdr-method"><a href="#Context.GetUniformiv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformiv(program uint32, location int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformiv(program uint32, location int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformuiv" class="hdr pkg hdr-method"><a href="#Context.GetUniformuiv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformuiv(program uint32, location int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformuiv(program uint32, location int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribIiv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribIiv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribIiv(index uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribIiv(index uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribIuiv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribIuiv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribIuiv(index uint32, pname int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribIuiv(index uint32, pname int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribPointerv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribPointerv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribPointerv(index uint32, pname int32, pointer *unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribPointerv(index uint32, pname int32, pointer *unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribfv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribfv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribfv(index uint32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribfv(index uint32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribiv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribiv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribiv(index uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribiv(index uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Hint" class="hdr pkg hdr-method"><a href="#Context.Hint" title="permalink">»</a>&nbsp;func (c *Context) Hint(target int32, mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Hint(target int32, mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateFramebuffer" class="hdr pkg hdr-method"><a href="#Context.InvalidateFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) InvalidateFramebuffer(target int32, numAttachments uint32, attachments *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateFramebuffer(target int32, numAttachments uint32, attachments *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateSubFramebuffer" class="hdr pkg hdr-method"><a href="#Context.InvalidateSubFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) InvalidateSubFramebuffer(target int32, numAttachments uint32, attachments *int32, x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateSubFramebuffer(target int32, numAttachments uint32, attachments *int32, x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.IsBuffer" class="hdr pkg hdr-method"><a href="#Context.IsBuffer" title="permalink">»</a>&nbsp;func (c *Context) IsBuffer(buffer uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsBuffer(buffer uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsEnabled" class="hdr pkg hdr-method"><a href="#Context.IsEnabled" title="permalink">»</a>&nbsp;func (c *Context) IsEnabled(cap int32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsEnabled(cap int32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsFramebuffer" class="hdr pkg hdr-method"><a href="#Context.IsFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) IsFramebuffer(framebuffer uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsFramebuffer(framebuffer uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsProgram" class="hdr pkg hdr-method"><a href="#Context.IsProgram" title="permalink">»</a>&nbsp;func (c *Context) IsProgram(program uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsProgram(program uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsProgramPipeline" class="hdr pkg hdr-method"><a href="#Context.IsProgramPipeline" title="permalink">»</a>&nbsp;func (c *Context) IsProgramPipeline(pipeline uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsProgramPipeline(pipeline uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsQuery" class="hdr pkg hdr-method"><a href="#Context.IsQuery" title="permalink">»</a>&nbsp;func (c *Context) IsQuery(id uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsQuery(id uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsRenderbuffer" class="hdr pkg hdr-method"><a href="#Context.IsRenderbuffer" title="permalink">»</a>&nbsp;func (c *Context) IsRenderbuffer(renderbuffer uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsRenderbuffer(renderbuffer uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsSampler" class="hdr pkg hdr-method"><a href="#Context.IsSampler" title="permalink">»</a>&nbsp;func (c *Context) IsSampler(sampler uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsSampler(sampler uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsShader" class="hdr pkg hdr-method"><a href="#Context.IsShader" title="permalink">»</a>&nbsp;func (c *Context) IsShader(shader uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsShader(shader uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsSync" class="hdr pkg hdr-method"><a href="#Context.IsSync" title="permalink">»</a>&nbsp;func (c *Context) IsSync(sync Sync) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsSync(sync Sync) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsTexture" class="hdr pkg hdr-method"><a href="#Context.IsTexture" title="permalink">»</a>&nbsp;func (c *Context) IsTexture(texture uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsTexture(texture uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.IsTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) IsTransformFeedback(id uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsTransformFeedback(id uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsVertexArray" class="hdr pkg hdr-method"><a href="#Context.IsVertexArray" title="permalink">»</a>&nbsp;func (c *Context) IsVertexArray(array uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsVertexArray(array uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.LineWidth" class="hdr pkg hdr-method"><a href="#Context.LineWidth" title="permalink">»</a>&nbsp;func (c *Context) LineWidth(width float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LineWidth(width float32)</pre>
			
		</span>
	
		
		<h1 id="Context.LinkProgram" class="hdr pkg hdr-method"><a href="#Context.LinkProgram" title="permalink">»</a>&nbsp;func (c *Context) LinkProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LinkProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MapBufferRange" class="hdr pkg hdr-method"><a href="#Context.MapBufferRange" title="permalink">»</a>&nbsp;func (c *Context) MapBufferRange(target int32, offset uintptr, length uintptr, access uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MapBufferRange(target int32, offset uintptr, length uintptr, access uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MemoryBarrier" class="hdr pkg hdr-method"><a href="#Context.MemoryBarrier" title="permalink">»</a>&nbsp;func (c *Context) MemoryBarrier(barriers uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MemoryBarrier(barriers uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MemoryBarrierByRegion" class="hdr pkg hdr-method"><a href="#Context.MemoryBarrierByRegion" title="permalink">»</a>&nbsp;func (c *Context) MemoryBarrierByRegion(barriers uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MemoryBarrierByRegion(barriers uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Panic" class="hdr pkg hdr-method"><a href="#Context.Panic" title="permalink">»</a>&nbsp;func (c *Context) Panic(err string) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Panic(err string)</pre>
			<p>
Panic causes a Go panic with the err string and also dumps the OpenGL stack
before the panic.
</p>
<p>
This function is only defined if the application is compiled with the
&#34;opengl_debug&#34; build tag.
</p>

		</span>
	
		
		<h1 id="Context.PauseTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.PauseTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) PauseTransformFeedback() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PauseTransformFeedback()</pre>
			
		</span>
	
		
		<h1 id="Context.PixelStorei" class="hdr pkg hdr-method"><a href="#Context.PixelStorei" title="permalink">»</a>&nbsp;func (c *Context) PixelStorei(pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelStorei(pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PolygonOffset" class="hdr pkg hdr-method"><a href="#Context.PolygonOffset" title="permalink">»</a>&nbsp;func (c *Context) PolygonOffset(factor float32, units float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PolygonOffset(factor float32, units float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramBinary" class="hdr pkg hdr-method"><a href="#Context.ProgramBinary" title="permalink">»</a>&nbsp;func (c *Context) ProgramBinary(program uint32, binaryFormat int32, binary unsafe.Pointer, length uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramBinary(program uint32, binaryFormat int32, binary unsafe.Pointer, length uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramParameteri" class="hdr pkg hdr-method"><a href="#Context.ProgramParameteri" title="permalink">»</a>&nbsp;func (c *Context) ProgramParameteri(program uint32, pname int32, value int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramParameteri(program uint32, pname int32, value int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1f(program uint32, location int32, v0 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1f(program uint32, location int32, v0 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1i(program uint32, location int32, v0 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1i(program uint32, location int32, v0 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1ui(program uint32, location int32, v0 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1ui(program uint32, location int32, v0 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2x3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2x3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2x4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2x4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3x2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3x2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3x4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3x4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4x2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4x2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4x3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4x3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ReadBuffer" class="hdr pkg hdr-method"><a href="#Context.ReadBuffer" title="permalink">»</a>&nbsp;func (c *Context) ReadBuffer(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ReadBuffer(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ReadPixels" class="hdr pkg hdr-method"><a href="#Context.ReadPixels" title="permalink">»</a>&nbsp;func (c *Context) ReadPixels(x int32, y int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ReadPixels(x int32, y int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.ReleaseShaderCompiler" class="hdr pkg hdr-method"><a href="#Context.ReleaseShaderCompiler" title="permalink">»</a>&nbsp;func (c *Context) ReleaseShaderCompiler() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ReleaseShaderCompiler()</pre>
			
		</span>
	
		
		<h1 id="Context.RenderbufferStorage" class="hdr pkg hdr-method"><a href="#Context.RenderbufferStorage" title="permalink">»</a>&nbsp;func (c *Context) RenderbufferStorage(target int32, internalformat int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RenderbufferStorage(target int32, internalformat int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.RenderbufferStorageMultisample" class="hdr pkg hdr-method"><a href="#Context.RenderbufferStorageMultisample" title="permalink">»</a>&nbsp;func (c *Context) RenderbufferStorageMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RenderbufferStorageMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ResumeTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.ResumeTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) ResumeTransformFeedback() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ResumeTransformFeedback()</pre>
			
		</span>
	
		
		<h1 id="Context.SampleCoverage" class="hdr pkg hdr-method"><a href="#Context.SampleCoverage" title="permalink">»</a>&nbsp;func (c *Context) SampleCoverage(value float32, invert uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SampleCoverage(value float32, invert uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.SampleMaski" class="hdr pkg hdr-method"><a href="#Context.SampleMaski" title="permalink">»</a>&nbsp;func (c *Context) SampleMaski(maskNumber uint32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SampleMaski(maskNumber uint32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameterf" class="hdr pkg hdr-method"><a href="#Context.SamplerParameterf" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameterf(sampler uint32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameterf(sampler uint32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameterfv" class="hdr pkg hdr-method"><a href="#Context.SamplerParameterfv" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameterfv(sampler uint32, pname int32, param *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameterfv(sampler uint32, pname int32, param *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameteri" class="hdr pkg hdr-method"><a href="#Context.SamplerParameteri" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameteri(sampler uint32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameteri(sampler uint32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameteriv" class="hdr pkg hdr-method"><a href="#Context.SamplerParameteriv" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameteriv(sampler uint32, pname int32, param *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameteriv(sampler uint32, pname int32, param *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Scissor" class="hdr pkg hdr-method"><a href="#Context.Scissor" title="permalink">»</a>&nbsp;func (c *Context) Scissor(x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Scissor(x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SetBatching" class="hdr pkg hdr-method"><a href="#Context.SetBatching" title="permalink">»</a>&nbsp;func (c *Context) SetBatching(batching bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SetBatching(batching bool)</pre>
			<p>
SetBatching turns on or off batching of this Context.
</p>
<p>
If turning off batching using SetBatching(false), then an implicit call to
Execute() which executes all the currently pending OpenGL function calls on
this Context occurs.
</p>
<p>
Default value is off (false).
</p>

		</span>
	
		
		<h1 id="Context.ShaderBinary" class="hdr pkg hdr-method"><a href="#Context.ShaderBinary" title="permalink">»</a>&nbsp;func (c *Context) ShaderBinary(count uint32, shaders *uint32, binaryformat int32, binary unsafe.Pointer, length uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShaderBinary(count uint32, shaders *uint32, binaryformat int32, binary unsafe.Pointer, length uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ShaderSource" class="hdr pkg hdr-method"><a href="#Context.ShaderSource" title="permalink">»</a>&nbsp;func (c *Context) ShaderSource(shader uint32, count uint32, string **byte, length *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShaderSource(shader uint32, count uint32, string **byte, length *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ShaderVersion" class="hdr pkg hdr-method"><a href="#Context.ShaderVersion" title="permalink">»</a>&nbsp;func (c *Context) ShaderVersion() (major, minor, release int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShaderVersion() (major, minor, release int)</pre>
			<p>
ShaderVersion returns the major and minor version of the supported GLSL
shading language per the OpenGL implementation.
</p>
<p>
Additionally provided is the vendor-specific release version (E.g. a driver
version number).
</p>

		</span>
	
		
		<h1 id="Context.StencilFunc" class="hdr pkg hdr-method"><a href="#Context.StencilFunc" title="permalink">»</a>&nbsp;func (c *Context) StencilFunc(pFunc int32, ref int32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilFunc(pFunc int32, ref int32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilFuncSeparate" class="hdr pkg hdr-method"><a href="#Context.StencilFuncSeparate" title="permalink">»</a>&nbsp;func (c *Context) StencilFuncSeparate(face int32, pFunc int32, ref int32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilFuncSeparate(face int32, pFunc int32, ref int32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilMask" class="hdr pkg hdr-method"><a href="#Context.StencilMask" title="permalink">»</a>&nbsp;func (c *Context) StencilMask(mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilMask(mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilMaskSeparate" class="hdr pkg hdr-method"><a href="#Context.StencilMaskSeparate" title="permalink">»</a>&nbsp;func (c *Context) StencilMaskSeparate(face int32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilMaskSeparate(face int32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilOp" class="hdr pkg hdr-method"><a href="#Context.StencilOp" title="permalink">»</a>&nbsp;func (c *Context) StencilOp(fail int32, zfail int32, zpass int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilOp(fail int32, zfail int32, zpass int32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilOpSeparate" class="hdr pkg hdr-method"><a href="#Context.StencilOpSeparate" title="permalink">»</a>&nbsp;func (c *Context) StencilOpSeparate(face int32, sfail int32, dpfail int32, dppass int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilOpSeparate(face int32, sfail int32, dpfail int32, dppass int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexImage2D" class="hdr pkg hdr-method"><a href="#Context.TexImage2D" title="permalink">»</a>&nbsp;func (c *Context) TexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexImage3D" class="hdr pkg hdr-method"><a href="#Context.TexImage3D" title="permalink">»</a>&nbsp;func (c *Context) TexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameterf" class="hdr pkg hdr-method"><a href="#Context.TexParameterf" title="permalink">»</a>&nbsp;func (c *Context) TexParameterf(target int32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameterf(target int32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameterfv" class="hdr pkg hdr-method"><a href="#Context.TexParameterfv" title="permalink">»</a>&nbsp;func (c *Context) TexParameterfv(target int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameterfv(target int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameteri" class="hdr pkg hdr-method"><a href="#Context.TexParameteri" title="permalink">»</a>&nbsp;func (c *Context) TexParameteri(target int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameteri(target int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameteriv" class="hdr pkg hdr-method"><a href="#Context.TexParameteriv" title="permalink">»</a>&nbsp;func (c *Context) TexParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage2D" class="hdr pkg hdr-method"><a href="#Context.TexStorage2D" title="permalink">»</a>&nbsp;func (c *Context) TexStorage2D(target int32, levels uint32, internalformat int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage2D(target int32, levels uint32, internalformat int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage2DMultisample" class="hdr pkg hdr-method"><a href="#Context.TexStorage2DMultisample" title="permalink">»</a>&nbsp;func (c *Context) TexStorage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage3D" class="hdr pkg hdr-method"><a href="#Context.TexStorage3D" title="permalink">»</a>&nbsp;func (c *Context) TexStorage3D(target int32, levels uint32, internalformat int32, width uint32, height uint32, depth uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage3D(target int32, levels uint32, internalformat int32, width uint32, height uint32, depth uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexSubImage2D" class="hdr pkg hdr-method"><a href="#Context.TexSubImage2D" title="permalink">»</a>&nbsp;func (c *Context) TexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexSubImage3D" class="hdr pkg hdr-method"><a href="#Context.TexSubImage3D" title="permalink">»</a>&nbsp;func (c *Context) TexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TransformFeedbackVaryings" class="hdr pkg hdr-method"><a href="#Context.TransformFeedbackVaryings" title="permalink">»</a>&nbsp;func (c *Context) TransformFeedbackVaryings(program uint32, count uint32, varyings **byte, bufferMode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TransformFeedbackVaryings(program uint32, count uint32, varyings **byte, bufferMode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1f" class="hdr pkg hdr-method"><a href="#Context.Uniform1f" title="permalink">»</a>&nbsp;func (c *Context) Uniform1f(location int32, v0 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1f(location int32, v0 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1fv" class="hdr pkg hdr-method"><a href="#Context.Uniform1fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform1fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1i" class="hdr pkg hdr-method"><a href="#Context.Uniform1i" title="permalink">»</a>&nbsp;func (c *Context) Uniform1i(location int32, v0 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1i(location int32, v0 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1iv" class="hdr pkg hdr-method"><a href="#Context.Uniform1iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform1iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1ui" class="hdr pkg hdr-method"><a href="#Context.Uniform1ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform1ui(location int32, v0 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1ui(location int32, v0 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform1uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform1uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2f" class="hdr pkg hdr-method"><a href="#Context.Uniform2f" title="permalink">»</a>&nbsp;func (c *Context) Uniform2f(location int32, v0 float32, v1 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2f(location int32, v0 float32, v1 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2fv" class="hdr pkg hdr-method"><a href="#Context.Uniform2fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform2fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2i" class="hdr pkg hdr-method"><a href="#Context.Uniform2i" title="permalink">»</a>&nbsp;func (c *Context) Uniform2i(location int32, v0 int32, v1 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2i(location int32, v0 int32, v1 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2iv" class="hdr pkg hdr-method"><a href="#Context.Uniform2iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform2iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2ui" class="hdr pkg hdr-method"><a href="#Context.Uniform2ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform2ui(location int32, v0 uint32, v1 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2ui(location int32, v0 uint32, v1 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform2uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform2uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3f" class="hdr pkg hdr-method"><a href="#Context.Uniform3f" title="permalink">»</a>&nbsp;func (c *Context) Uniform3f(location int32, v0 float32, v1 float32, v2 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3f(location int32, v0 float32, v1 float32, v2 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3fv" class="hdr pkg hdr-method"><a href="#Context.Uniform3fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform3fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3i" class="hdr pkg hdr-method"><a href="#Context.Uniform3i" title="permalink">»</a>&nbsp;func (c *Context) Uniform3i(location int32, v0 int32, v1 int32, v2 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3i(location int32, v0 int32, v1 int32, v2 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3iv" class="hdr pkg hdr-method"><a href="#Context.Uniform3iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform3iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3ui" class="hdr pkg hdr-method"><a href="#Context.Uniform3ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform3uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform3uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4f" class="hdr pkg hdr-method"><a href="#Context.Uniform4f" title="permalink">»</a>&nbsp;func (c *Context) Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4fv" class="hdr pkg hdr-method"><a href="#Context.Uniform4fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform4fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4i" class="hdr pkg hdr-method"><a href="#Context.Uniform4i" title="permalink">»</a>&nbsp;func (c *Context) Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4iv" class="hdr pkg hdr-method"><a href="#Context.Uniform4iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform4iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4ui" class="hdr pkg hdr-method"><a href="#Context.Uniform4ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform4uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform4uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformBlockBinding" class="hdr pkg hdr-method"><a href="#Context.UniformBlockBinding" title="permalink">»</a>&nbsp;func (c *Context) UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2x3fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2x3fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2x3fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2x3fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2x4fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2x4fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2x4fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2x4fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3x2fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3x2fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3x2fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3x2fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3x4fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3x4fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3x4fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3x4fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4x2fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4x2fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4x2fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4x2fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4x3fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4x3fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4x3fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4x3fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UnmapBuffer" class="hdr pkg hdr-method"><a href="#Context.UnmapBuffer" title="permalink">»</a>&nbsp;func (c *Context) UnmapBuffer(target int32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UnmapBuffer(target int32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.UseProgram" class="hdr pkg hdr-method"><a href="#Context.UseProgram" title="permalink">»</a>&nbsp;func (c *Context) UseProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UseProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.UseProgramStages" class="hdr pkg hdr-method"><a href="#Context.UseProgramStages" title="permalink">»</a>&nbsp;func (c *Context) UseProgramStages(pipeline uint32, stages uint32, program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UseProgramStages(pipeline uint32, stages uint32, program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ValidateProgram" class="hdr pkg hdr-method"><a href="#Context.ValidateProgram" title="permalink">»</a>&nbsp;func (c *Context) ValidateProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ValidateProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ValidateProgramPipeline" class="hdr pkg hdr-method"><a href="#Context.ValidateProgramPipeline" title="permalink">»</a>&nbsp;func (c *Context) ValidateProgramPipeline(pipeline uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ValidateProgramPipeline(pipeline uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VendorShaderVersion" class="hdr pkg hdr-method"><a href="#Context.VendorShaderVersion" title="permalink">»</a>&nbsp;func (c *Context) VendorShaderVersion() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VendorShaderVersion() string</pre>
			<p>
VendorShaderVersion returns the vendor-specific shading language version
information.
</p>
<p>
This string depends on the vendor of the graphics card/driver.
</p>

		</span>
	
		
		<h1 id="Context.VendorVersion" class="hdr pkg hdr-method"><a href="#Context.VendorVersion" title="permalink">»</a>&nbsp;func (c *Context) VendorVersion() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VendorVersion() string</pre>
			<p>
VendorVersion returns the vendor-specific OpenGL version information.
</p>
<p>
This string depends on the vendor of the graphics card/driver.
</p>

		</span>
	
		
		<h1 id="Context.Version" class="hdr pkg hdr-method"><a href="#Context.Version" title="permalink">»</a>&nbsp;func (c *Context) Version() (major, minor, release int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Version() (major, minor, release int)</pre>
			<p>
Version returns the major and minor OpenGL version supported by the
implementation.
</p>
<p>
Additionally provided is the vendor-specific release version (E.g. a driver
version number).
</p>

		</span>
	
		
		<h1 id="Context.VertexAttrib1f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1f(index uint32, x float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1f(index uint32, x float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib1fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2f(index uint32, x float32, y float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2f(index uint32, x float32, y float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3f(index uint32, x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3f(index uint32, x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribBinding" class="hdr pkg hdr-method"><a href="#Context.VertexAttribBinding" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribBinding(attribindex uint32, bindingindex uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribBinding(attribindex uint32, bindingindex uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribDivisor" class="hdr pkg hdr-method"><a href="#Context.VertexAttribDivisor" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribDivisor(index uint32, divisor uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribDivisor(index uint32, divisor uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribFormat" class="hdr pkg hdr-method"><a href="#Context.VertexAttribFormat" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribFormat(attribindex uint32, size int32, pType int32, normalized uint8, relativeoffset uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribFormat(attribindex uint32, size int32, pType int32, normalized uint8, relativeoffset uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4i" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4i" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4iv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4iv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4iv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4iv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4uiv(index uint32, v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4uiv(index uint32, v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribIFormat" class="hdr pkg hdr-method"><a href="#Context.VertexAttribIFormat" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribIFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribIFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribIPointer" class="hdr pkg hdr-method"><a href="#Context.VertexAttribIPointer" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribIPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribIPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribPointer" class="hdr pkg hdr-method"><a href="#Context.VertexAttribPointer" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribPointer(index uint32, size int32, pType int32, normalized uint8, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribPointer(index uint32, size int32, pType int32, normalized uint8, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexBindingDivisor" class="hdr pkg hdr-method"><a href="#Context.VertexBindingDivisor" title="permalink">»</a>&nbsp;func (c *Context) VertexBindingDivisor(bindingindex uint32, divisor uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexBindingDivisor(bindingindex uint32, divisor uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Viewport" class="hdr pkg hdr-method"><a href="#Context.Viewport" title="permalink">»</a>&nbsp;func (c *Context) Viewport(x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Viewport(x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.WaitSync" class="hdr pkg hdr-method"><a href="#Context.WaitSync" title="permalink">»</a>&nbsp;func (c *Context) WaitSync(sync Sync, flags uint32, timeout uint64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WaitSync(sync Sync, flags uint32, timeout uint64)</pre>
			
		</span>
	

	
	<h1 id="DEBUGPROC" class="hdr pkg hdr-type"><a href="#DEBUGPROC" title="permalink">»</a>&nbsp;type DEBUGPROC <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROC C.GLDEBUGPROC</pre>
		
	</span>

	
	

	
	

	
	<h1 id="DEBUGPROCAMD" class="hdr pkg hdr-type"><a href="#DEBUGPROCAMD" title="permalink">»</a>&nbsp;type DEBUGPROCAMD <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROCAMD C.GLDEBUGPROCAMD</pre>
		
	</span>

	
	

	
	

	
	<h1 id="DEBUGPROCARB" class="hdr pkg hdr-type"><a href="#DEBUGPROCARB" title="permalink">»</a>&nbsp;type DEBUGPROCARB <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROCARB C.GLDEBUGPROCARB</pre>
		
	</span>

	
	

	
	

	
	<h1 id="DEBUGPROCKHR" class="hdr pkg hdr-type"><a href="#DEBUGPROCKHR" title="permalink">»</a>&nbsp;type DEBUGPROCKHR <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROCKHR C.GLDEBUGPROCKHR</pre>
		
	</span>

	
	

	
	

	
	<h1 id="Sync" class="hdr pkg hdr-type"><a href="#Sync" title="permalink">»</a>&nbsp;type Sync <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Sync C.GLsync</pre>
		
	</span>

	
	

	
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/native-gles2/blob/v0/enums.go" title="view source">enums.go</a>
	
	<a href="https:/github.com/azul3d/native-gles2/blob/v0/gl.go" title="view source">gl.go</a>
	
	<a href="https:/github.com/azul3d/native-gles2/blob/v0/gldebug.go" title="view source">gldebug.go</a>
	
	<a href="https:/github.com/azul3d/native-gles2/blob/v0/types.go" title="view source">types.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files"></span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div>Unless noted otherwise, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a BSD license.</div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



