

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">

		
		<link rel="image_src" href="http://azul3d.org/content/symbol_256x256.png">
		<meta property="og:image" content="http://azul3d.org/content/symbol_256x256.png">

		
			<title>Azul3D</title>
		
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>






































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc">Doc</a> | <a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package ode</h1>
<span class="section pkg general">
	
		<p><em>In Development</em></p>
	
	<span class="pkg import">import "azul3d.org/native/ode.dev"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	
		<h2>WARNING!</h2>
		<span class="sub">
			
				<p>This version is the in-development -- <em><strong>unstable</strong></em> -- version of this package. Backwards incompatible changes will be made to this package in the future and as such <em>you should not use this version</em>! Please use the latest release <a href="/native/ode.dev">here</a>.</p>
			
		</span>
	

	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing the latest version of this package (dev).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/ode.dev" title="azul3d.org/native/ode.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package ode provide a Go interface to the Open Dynamics Engine library.
See the ODE documentation for more information.
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#variables">Variables</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CleanupAllDataForThread">func CleanupAllDataForThread()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Close">func Close()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Init">func Init(initFlags, allocFlags int)</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AABB">type AABB</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewAABB">func NewAABB(vals ...float64) AABB</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint">type AMotorJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.AddTorques">func (j AMotorJoint) AddTorques(torque1, torque2, torque3 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.Angle">func (j AMotorJoint) Angle(num int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.AngleRate">func (j AMotorJoint) AngleRate(num int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.Axis">func (j AMotorJoint) Axis(num int) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.AxisRel">func (j AMotorJoint) AxisRel(num int) int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.Mode">func (j AMotorJoint) Mode() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.NumAxes">func (j AMotorJoint) NumAxes() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.Param">func (j AMotorJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.SetAngle">func (j AMotorJoint) SetAngle(num int, angle float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.SetAxis">func (j AMotorJoint) SetAxis(num, rel int, axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.SetMode">func (j AMotorJoint) SetMode(mode int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.SetNumAxes">func (j AMotorJoint) SetNumAxes(num int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AMotorJoint.SetParam">func (j AMotorJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#BallJoint">type BallJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#BallJoint.Anchor">func (j BallJoint) Anchor() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#BallJoint.Anchor2">func (j BallJoint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#BallJoint.Param">func (j BallJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#BallJoint.SetAnchor">func (j BallJoint) SetAnchor(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#BallJoint.SetAnchor2">func (j BallJoint) SetAnchor2(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#BallJoint.SetParam">func (j BallJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body">type Body</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddForce">func (b Body) AddForce(force Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddForceAtPos">func (b Body) AddForceAtPos(force, pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddForceAtRelPos">func (b Body) AddForceAtRelPos(force, pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddRelForce">func (b Body) AddRelForce(force Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddRelForceAtPos">func (b Body) AddRelForceAtPos(force, pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddRelForceAtRelPos">func (b Body) AddRelForceAtRelPos(force, pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddRelTorque">func (b Body) AddRelTorque(torque Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AddTorque">func (b Body) AddTorque(torque Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AngularDamping">func (b Body) AngularDamping() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AngularDampingThreshold">func (b Body) AngularDampingThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AngularVel">func (b Body) AngularVel() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AutoDisable">func (b Body) AutoDisable() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AutoDisableAngularThreshold">func (b Body) AutoDisableAngularThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AutoDisableAverageSamplesCount">func (b Body) AutoDisableAverageSamplesCount() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AutoDisableLinearThreshold">func (b Body) AutoDisableLinearThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AutoDisableSteps">func (b Body) AutoDisableSteps() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.AutoDisableTime">func (b Body) AutoDisableTime() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Connected">func (b Body) Connected(other Body) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.ConnectedExcluding">func (b Body) ConnectedExcluding(other Body, jointType int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.ConnectingJoint">func (b Body) ConnectingJoint(other Body) Joint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.ConnectingJointList">func (b Body) ConnectingJointList(other Body) []Joint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Data">func (b Body) Data() interface{}</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Destroy">func (b Body) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Enabled">func (b Body) Enabled() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.FiniteRotationAxis">func (b Body) FiniteRotationAxis() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.FiniteRotationMode">func (b Body) FiniteRotationMode() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.FirstGeom">func (b Body) FirstGeom() Geom</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Force">func (b Body) Force() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.GravityEnabled">func (b Body) GravityEnabled() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.GyroModeEnabled">func (b Body) GyroModeEnabled() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Joint">func (b Body) Joint(index int) Joint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Kinematic">func (b Body) Kinematic() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.LinearDamping">func (b Body) LinearDamping() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.LinearDampingThreshold">func (b Body) LinearDampingThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.LinearVelocity">func (b Body) LinearVelocity() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Mass">func (b Body) Mass() *Mass</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.MaxAngularSpeed">func (b Body) MaxAngularSpeed() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.NumJoints">func (b Body) NumJoints() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.PointVel">func (b Body) PointVel(pt Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.PosRelPoint">func (b Body) PosRelPoint(pos Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Position">func (b Body) Position() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Quaternion">func (b Body) Quaternion() Quaternion</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.RelPointPos">func (b Body) RelPointPos(pt Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.RelPointVel">func (b Body) RelPointVel(pt Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Rotation">func (b Body) Rotation() Matrix3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAngularDamping">func (b Body) SetAngularDamping(scale float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAngularDampingThreshold">func (b Body) SetAngularDampingThreshold(threshold float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAngularVelocity">func (b Body) SetAngularVelocity(vel Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAutoAutoDisableAverageSamplesCount">func (b Body) SetAutoAutoDisableAverageSamplesCount(count int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAutoDisable">func (b Body) SetAutoDisable(doAutoDisable bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAutoDisableAngularThreshold">func (b Body) SetAutoDisableAngularThreshold(thresh float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAutoDisableDefaults">func (b Body) SetAutoDisableDefaults()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAutoDisableLinearThreshold">func (b Body) SetAutoDisableLinearThreshold(thresh float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAutoDisableSteps">func (b Body) SetAutoDisableSteps(steps int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetAutoDisableTime">func (b Body) SetAutoDisableTime(time float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetDampingDefaults">func (b Body) SetDampingDefaults()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetData">func (b Body) SetData(data interface{})</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetEnabled">func (b Body) SetEnabled(isEnabled bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetFiniteRotationAxis">func (b Body) SetFiniteRotationAxis(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetFiniteRotationMode">func (b Body) SetFiniteRotationMode(isFinite bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetForce">func (b Body) SetForce(force Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetGravityEnabled">func (b Body) SetGravityEnabled(isGravityEnabled bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetGyroModeEnabled">func (b Body) SetGyroModeEnabled(isEnabled bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetKinematic">func (b Body) SetKinematic(isKinematic bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetLinearDamping">func (b Body) SetLinearDamping(scale float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetLinearDampingThreshold">func (b Body) SetLinearDampingThreshold(threshold float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetLinearVelocity">func (b Body) SetLinearVelocity(vel Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetMass">func (b Body) SetMass(mass *Mass)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetMaxAngularSpeed">func (b Body) SetMaxAngularSpeed(maxSpeed float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetMovedCallback">func (b Body) SetMovedCallback(cb MovedCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetPosition">func (b Body) SetPosition(pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetQuaternion">func (b Body) SetQuaternion(quat Quaternion)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetRotation">func (b Body) SetRotation(rot Matrix3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.SetTorque">func (b Body) SetTorque(torque Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.Torque">func (b Body) Torque() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.VectorFromWorld">func (b Body) VectorFromWorld(wld Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.VectorToWorld">func (b Body) VectorToWorld(vec Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Body.World">func (b Body) World() World</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Box">type Box</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Box.Lengths">func (b Box) Lengths() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Box.PointDepth">func (b Box) PointDepth(pt Vector3) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Box.SetLengths">func (b Box) SetLengths(lens Vector3)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Capsule">type Capsule</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Capsule.Params">func (c Capsule) Params() (float64, float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Capsule.PointDepth">func (c Capsule) PointDepth(pt Vector3) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Capsule.SetParams">func (c Capsule) SetParams(radius, length float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Contact">type Contact</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewContact">func NewContact() *Contact</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ContactGeom">type ContactGeom</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewContactGeom">func NewContactGeom() *ContactGeom</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ContactJoint">type ContactJoint</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Convex">type Convex</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Convex.Set">func (c Convex) Set(planes PlaneList, pts VertexList, polyList PolygonList)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Cylinder">type Cylinder</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Cylinder.Params">func (c Cylinder) Params() (float64, float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Cylinder.SetParams">func (c Cylinder) SetParams(radius, length float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint">type DBallJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint.Anchor1">func (j DBallJoint) Anchor1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint.Anchor2">func (j DBallJoint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint.Distance">func (j DBallJoint) Distance() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint.Param">func (j DBallJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint.SetAnchor1">func (j DBallJoint) SetAnchor1(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint.SetAnchor2">func (j DBallJoint) SetAnchor2(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DBallJoint.SetParam">func (j DBallJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint">type DHingeJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.Anchor1">func (j DHingeJoint) Anchor1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.Anchor2">func (j DHingeJoint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.Axis">func (j DHingeJoint) Axis() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.Distance">func (j DHingeJoint) Distance() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.Param">func (j DHingeJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.SetAnchor1">func (j DHingeJoint) SetAnchor1(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.SetAnchor2">func (j DHingeJoint) SetAnchor2(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.SetAxis">func (j DHingeJoint) SetAxis(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DHingeJoint.SetParam">func (j DHingeJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FixedJoint">type FixedJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FixedJoint.Fix">func (j FixedJoint) Fix()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FixedJoint.Param">func (j FixedJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FixedJoint.SetParam">func (j FixedJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Geom">type Geom</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase">type GeomBase</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.AABB">func (g GeomBase) AABB() AABB</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Body">func (g GeomBase) Body() Body</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.CategoryBits">func (g GeomBase) CategoryBits() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Class">func (g GeomBase) Class() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.ClearOffset">func (g GeomBase) ClearOffset()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Collide">func (g GeomBase) Collide(other Geom, maxContacts uint16, flags int) []ContactGeom</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Collide2">func (g GeomBase) Collide2(other Geom, data interface{}, cb NearCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.CollideBits">func (g GeomBase) CollideBits() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Data">func (g GeomBase) Data() interface{}</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Destroy">func (g GeomBase) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Enabled">func (g GeomBase) Enabled() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.IsOffset">func (g GeomBase) IsOffset() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.IsSpace">func (g GeomBase) IsSpace() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Next">func (g GeomBase) Next() Geom</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.OffsetPosition">func (g GeomBase) OffsetPosition() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.OffsetQuaternion">func (g GeomBase) OffsetQuaternion() Quaternion</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.OffsetRotation">func (g GeomBase) OffsetRotation() Matrix3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.PosRelPoint">func (g GeomBase) PosRelPoint(pos Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Position">func (g GeomBase) Position() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Quaternion">func (g GeomBase) Quaternion() Quaternion</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.RelPointPos">func (g GeomBase) RelPointPos(pt Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Rotation">func (g GeomBase) Rotation() Matrix3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetBody">func (g GeomBase) SetBody(body Body)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetCategoryBits">func (g GeomBase) SetCategoryBits(bits int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetCollideBits">func (g GeomBase) SetCollideBits(bits int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetData">func (g GeomBase) SetData(data interface{})</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetEnabled">func (g GeomBase) SetEnabled(isEnabled bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetOffsetPosition">func (g GeomBase) SetOffsetPosition(pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetOffsetQuaternion">func (g GeomBase) SetOffsetQuaternion(quat Quaternion)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetOffsetRotation">func (g GeomBase) SetOffsetRotation(rot Matrix3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetOffsetWorldPosition">func (g GeomBase) SetOffsetWorldPosition(pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetOffsetWorldQuaternion">func (g GeomBase) SetOffsetWorldQuaternion(quat Quaternion)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetOffsetWorldRotation">func (g GeomBase) SetOffsetWorldRotation(rot Matrix3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetPosition">func (g GeomBase) SetPosition(pos Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetQuaternion">func (g GeomBase) SetQuaternion(quat Quaternion)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.SetRotation">func (g GeomBase) SetRotation(rot Matrix3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.Space">func (g GeomBase) Space() Space</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.VectorFromWorld">func (g GeomBase) VectorFromWorld(wld Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GeomBase.VectorToWorld">func (g GeomBase) VectorToWorld(vec Vector3) Vector3</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HashSpace">type HashSpace</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HashSpace.Levels">func (s HashSpace) Levels() (int, int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HashSpace.SetLevels">func (s HashSpace) SetLevels(min, max int)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Heightfield">type Heightfield</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Heightfield.Build">func (h Heightfield) Build(data HeightfieldData, heightSamples Matrix,
	width, depth, scale, offset, thickness float64, doWrap bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Heightfield.HeightfieldData">func (h Heightfield) HeightfieldData() HeightfieldData</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Heightfield.SetBounds">func (h Heightfield) SetBounds(data HeightfieldData, minHeight, maxHeight float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Heightfield.SetHeightfieldData">func (h Heightfield) SetHeightfieldData(data HeightfieldData)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HeightfieldData">type HeightfieldData</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewHeightfieldData">func NewHeightfieldData() HeightfieldData</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HeightfieldData.Destroy">func (h *HeightfieldData) Destroy()</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint">type Hinge2Joint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.AddTorques">func (j Hinge2Joint) AddTorques(torque1, torque2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Anchor">func (j Hinge2Joint) Anchor() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Anchor2">func (j Hinge2Joint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Angle1">func (j Hinge2Joint) Angle1() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Angle1Rate">func (j Hinge2Joint) Angle1Rate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Angle2">func (j Hinge2Joint) Angle2() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Angle2Rate">func (j Hinge2Joint) Angle2Rate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Axis1">func (j Hinge2Joint) Axis1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Axis2">func (j Hinge2Joint) Axis2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.Param">func (j Hinge2Joint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.SetAnchor">func (j Hinge2Joint) SetAnchor(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.SetAxis1">func (j Hinge2Joint) SetAxis1(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.SetAxis2">func (j Hinge2Joint) SetAxis2(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hinge2Joint.SetParam">func (j Hinge2Joint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint">type HingeJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.AddTorque">func (j HingeJoint) AddTorque(torque float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.Anchor">func (j HingeJoint) Anchor() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.Anchor2">func (j HingeJoint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.Angle">func (j HingeJoint) Angle() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.AngleRate">func (j HingeJoint) AngleRate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.Axis">func (j HingeJoint) Axis() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.Param">func (j HingeJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.SetAnchor">func (j HingeJoint) SetAnchor(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.SetAnchorDelta">func (j HingeJoint) SetAnchorDelta(pt, delta Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.SetAxis">func (j HingeJoint) SetAxis(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.SetAxisOffset">func (j HingeJoint) SetAxisOffset(axis Vector3, angle float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#HingeJoint.SetParam">func (j HingeJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Joint">type Joint</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase">type JointBase</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.Attach">func (j JointBase) Attach(body1, body2 Body)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.Body">func (j JointBase) Body(index int) Body</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.Data">func (j JointBase) Data() interface{}</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.Destroy">func (j JointBase) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.Enabled">func (j JointBase) Enabled() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.Feedback">func (j JointBase) Feedback() *JointFeedback</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.NumBodies">func (j JointBase) NumBodies() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.SetData">func (j JointBase) SetData(data interface{})</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.SetEnabled">func (j JointBase) SetEnabled(isEnabled bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.SetFeedback">func (j JointBase) SetFeedback(f *JointFeedback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointBase.Type">func (j JointBase) Type() int</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointFeedback">type JointFeedback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointGroup">type JointGroup</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewJointGroup">func NewJointGroup(maxJoints int) JointGroup</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointGroup.Destroy">func (g JointGroup) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JointGroup.Empty">func (g JointGroup) Empty()</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LMotorJoint">type LMotorJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LMotorJoint.Axis">func (j LMotorJoint) Axis(num int) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LMotorJoint.NumAxes">func (j LMotorJoint) NumAxes() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LMotorJoint.Param">func (j LMotorJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LMotorJoint.SetAxis">func (j LMotorJoint) SetAxis(num, rel int, axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LMotorJoint.SetNumAxes">func (j LMotorJoint) SetNumAxes(num int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#LMotorJoint.SetParam">func (j LMotorJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass">type Mass</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewMass">func NewMass() *Mass</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.Add">func (m *Mass) Add(other *Mass)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.Adjust">func (m *Mass) Adjust(mass float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.Check">func (m *Mass) Check() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.Rotate">func (m *Mass) Rotate(rot Matrix3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetBox">func (m *Mass) SetBox(density float64, lens Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetBoxTotal">func (m *Mass) SetBoxTotal(totalMass float64, lens Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetCapsule">func (m *Mass) SetCapsule(density float64, direction int, radius, length float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetCapsuleTotal">func (m *Mass) SetCapsuleTotal(totalMass float64, direction int, radius, length float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetCylinder">func (m *Mass) SetCylinder(density float64, direction int, radius, length float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetCylinderTotal">func (m *Mass) SetCylinderTotal(totalMass float64, direction int, radius, length float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetParams">func (m *Mass) SetParams(mass float64, com Vector3, inert Matrix3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetSphere">func (m *Mass) SetSphere(density, radius float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetSphereTotal">func (m *Mass) SetSphereTotal(totalMass, radius float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetTriMesh">func (m *Mass) SetTriMesh(density float64, mesh TriMesh)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetTriMeshTotal">func (m *Mass) SetTriMeshTotal(totalMass float64, mesh TriMesh)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.SetZero">func (m *Mass) SetZero()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Mass.Translate">func (m *Mass) Translate(vec Vector3)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Matrix">type Matrix</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewMatrix">func NewMatrix(numRows, numCols, align int, vals ...float64) Matrix</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Matrix3">type Matrix3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewMatrix3">func NewMatrix3(vals ...float64) Matrix3</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Matrix4">type Matrix4</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewMatrix4">func NewMatrix4(vals ...float64) Matrix4</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#MovedCallback">type MovedCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NearCallback">type NearCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NullJoint">type NullJoint</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint">type PRJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.AddTorque">func (j PRJoint) AddTorque(torque float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.Anchor">func (j PRJoint) Anchor() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.Angle">func (j PRJoint) Angle() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.AngleRate">func (j PRJoint) AngleRate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.Axis1">func (j PRJoint) Axis1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.Axis2">func (j PRJoint) Axis2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.Param">func (j PRJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.Position">func (j PRJoint) Position() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.PositionRate">func (j PRJoint) PositionRate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.SetAnchor">func (j PRJoint) SetAnchor(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.SetAxis1">func (j PRJoint) SetAxis1(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.SetAxis2">func (j PRJoint) SetAxis2(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PRJoint.SetParam">func (j PRJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint">type PUJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Anchor">func (j PUJoint) Anchor() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Angle1">func (j PUJoint) Angle1() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Angle1Rate">func (j PUJoint) Angle1Rate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Angle2">func (j PUJoint) Angle2() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Angle2Rate">func (j PUJoint) Angle2Rate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Angles">func (j PUJoint) Angles() (float64, float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Axis1">func (j PUJoint) Axis1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Axis2">func (j PUJoint) Axis2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Axis3">func (j PUJoint) Axis3() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Param">func (j PUJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.Position">func (j PUJoint) Position() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.PositionRate">func (j PUJoint) PositionRate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.SetAnchor">func (j PUJoint) SetAnchor(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.SetAnchorOffset">func (j PUJoint) SetAnchorOffset(pt, delta Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.SetAxis1">func (j PUJoint) SetAxis1(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.SetAxis2">func (j PUJoint) SetAxis2(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.SetAxis3">func (j PUJoint) SetAxis3(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PUJoint.SetParam">func (j PUJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint">type PistonJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.AddForce">func (j PistonJoint) AddForce(force float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.Anchor2">func (j PistonJoint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.Angle">func (j PistonJoint) Angle() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.AngleRate">func (j PistonJoint) AngleRate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.Axis">func (j PistonJoint) Axis() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.Param">func (j PistonJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.Position">func (j PistonJoint) Position() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.PositionRate">func (j PistonJoint) PositionRate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.SetAnchor">func (j PistonJoint) SetAnchor(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.SetAnchorOffset">func (j PistonJoint) SetAnchorOffset(pt, delta Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.SetAxis">func (j PistonJoint) SetAxis(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PistonJoint.SetParam">func (j PistonJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane">type Plane</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane.Params">func (p Plane) Params() Vector4</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane.PointDepth">func (p Plane) PointDepth(pt Vector3) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane.SetParams">func (p Plane) SetParams(params Vector4)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane2DJoint">type Plane2DJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane2DJoint.SetAngleParam">func (j Plane2DJoint) SetAngleParam(parameter int, value float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane2DJoint.SetXParam">func (j Plane2DJoint) SetXParam(parameter int, value float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Plane2DJoint.SetYParam">func (j Plane2DJoint) SetYParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PlaneList">type PlaneList</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewPlaneList">func NewPlaneList(size int, vals ...float64) PlaneList</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PolygonList">type PolygonList</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#QuadTreeSpace">type QuadTreeSpace</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Quaternion">type Quaternion</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewQuaternion">func NewQuaternion(vals ...float64) Quaternion</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray">type Ray</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.BackfaceCull">func (r Ray) BackfaceCull() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.ClosestHit">func (r Ray) ClosestHit() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.FirstContact">func (r Ray) FirstContact() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.Length">func (r Ray) Length() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.PosDir">func (r Ray) PosDir() (Vector3, Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.SetBackfaceCull">func (r Ray) SetBackfaceCull(backfaceCull bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.SetClosestHit">func (r Ray) SetClosestHit(closestHit bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.SetFirstContact">func (r Ray) SetFirstContact(firstContact bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.SetLength">func (r Ray) SetLength(length float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Ray.SetPosDir">func (r Ray) SetPosDir(pos, dir Vector3)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SimpleSpace">type SimpleSpace</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint">type SliderJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.AddForce">func (j SliderJoint) AddForce(force float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.Axis">func (j SliderJoint) Axis() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.Param">func (j SliderJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.Position">func (j SliderJoint) Position() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.PositionRate">func (j SliderJoint) PositionRate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.SetAxis">func (j SliderJoint) SetAxis(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.SetAxisDelta">func (j SliderJoint) SetAxisDelta(pt, delta Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SliderJoint.SetParam">func (j SliderJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Space">type Space</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NilSpace">func NilSpace() Space</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase">type SpaceBase</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Add">func (s SpaceBase) Add(g Geom)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Class">func (s SpaceBase) Class() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Clean">func (s SpaceBase) Clean()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Cleanup">func (s SpaceBase) Cleanup() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Collide">func (s SpaceBase) Collide(data interface{}, cb NearCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Destroy">func (s SpaceBase) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Geom">func (s SpaceBase) Geom(index int) Geom</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.ManualCleanup">func (s SpaceBase) ManualCleanup() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewBox">func (s SpaceBase) NewBox(lens Vector3) Box</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewCapsule">func (s SpaceBase) NewCapsule(radius, length float64) Capsule</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewConvex">func (s SpaceBase) NewConvex(planes PlaneList, pts VertexList, polyList PolygonList) Convex</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewCylinder">func (s SpaceBase) NewCylinder(radius, length float64) Cylinder</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewHashSpace">func (s SpaceBase) NewHashSpace() HashSpace</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewHeightfield">func (s SpaceBase) NewHeightfield(data HeightfieldData, placeable bool) Heightfield</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewPlane">func (s SpaceBase) NewPlane(params Vector4) Plane</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewQuadTreeSpace">func (s SpaceBase) NewQuadTreeSpace(center, extents Vector3, depth int) QuadTreeSpace</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewRay">func (s SpaceBase) NewRay(length float64) Ray</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewSimpleSpace">func (s SpaceBase) NewSimpleSpace() SimpleSpace</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewSphere">func (s SpaceBase) NewSphere(radius float64) Sphere</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewSweepAndPruneSpace">func (s SpaceBase) NewSweepAndPruneSpace(axisOrder int) SweepAndPruneSpace</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NewTriMesh">func (s SpaceBase) NewTriMesh(data TriMeshData) TriMesh</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.NumGeoms">func (s SpaceBase) NumGeoms(g Geom) int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Query">func (s SpaceBase) Query(g Geom) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Remove">func (s SpaceBase) Remove(g Geom)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.SetCleanup">func (s SpaceBase) SetCleanup(mode bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.SetManualCleanup">func (s SpaceBase) SetManualCleanup(mode bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.SetSublevel">func (s SpaceBase) SetSublevel(sublevel int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SpaceBase.Sublevel">func (s SpaceBase) Sublevel() int</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Sphere">type Sphere</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Sphere.Radius">func (s Sphere) Radius() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Sphere.SetRadius">func (s Sphere) SetRadius(radius float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Sphere.SpherePointDepth">func (s Sphere) SpherePointDepth(pt Vector3) float64</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SurfaceParameters">type SurfaceParameters</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SweepAndPruneSpace">type SweepAndPruneSpace</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint">type TransmissionJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Anchor1">func (j TransmissionJoint) Anchor1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Anchor2">func (j TransmissionJoint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Angle1">func (j TransmissionJoint) Angle1() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Angle2">func (j TransmissionJoint) Angle2() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Axis">func (j TransmissionJoint) Axis() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Axis1">func (j TransmissionJoint) Axis1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Axis2">func (j TransmissionJoint) Axis2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Backlash">func (j TransmissionJoint) Backlash() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.ContactPoint1">func (j TransmissionJoint) ContactPoint1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.ContactPoint2">func (j TransmissionJoint) ContactPoint2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Mode">func (j TransmissionJoint) Mode() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Param">func (j TransmissionJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Radius1">func (j TransmissionJoint) Radius1() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Radius2">func (j TransmissionJoint) Radius2() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.Ratio">func (j TransmissionJoint) Ratio() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetAnchor1">func (j TransmissionJoint) SetAnchor1(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetAnchor2">func (j TransmissionJoint) SetAnchor2(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetAxis">func (j TransmissionJoint) SetAxis(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetAxis1">func (j TransmissionJoint) SetAxis1(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetAxis2">func (j TransmissionJoint) SetAxis2(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetBacklash">func (j TransmissionJoint) SetBacklash(backlash float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetMode">func (j TransmissionJoint) SetMode(mode int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetParam">func (j TransmissionJoint) SetParam(parameter int, value float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetRadius1">func (j TransmissionJoint) SetRadius1(radius float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetRadius2">func (j TransmissionJoint) SetRadius2(radius float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TransmissionJoint.SetRatio">func (j TransmissionJoint) SetRatio(ratio float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriCallback">type TriCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh">type TriMesh</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.ClearTCCache">func (t TriMesh) ClearTCCache()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.LastTransform">func (t TriMesh) LastTransform() Matrix4</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.MeshData">func (t TriMesh) MeshData() TriMeshData</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.Point">func (t TriMesh) Point(index int, u, v float64) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.SetLastTransform">func (t TriMesh) SetLastTransform(xform Matrix4)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.SetMeshData">func (t TriMesh) SetMeshData(data TriMeshData)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.SetTCEnabled">func (t TriMesh) SetTCEnabled(class int, isEnabled bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.SetTriCallback">func (t TriMesh) SetTriCallback(cb TriCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.SetTriRayCallback">func (t TriMesh) SetTriRayCallback(cb TriRayCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.TCEnabled">func (t TriMesh) TCEnabled(class int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.TriCallback">func (t TriMesh) TriCallback() TriCallback</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.TriRayCallback">func (t TriMesh) TriRayCallback() TriRayCallback</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.Triangle">func (t TriMesh) Triangle(index int) (Vector3, Vector3, Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMesh.TriangleCount">func (t TriMesh) TriangleCount() int</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMeshData">type TriMeshData</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewTriMeshData">func NewTriMeshData() TriMeshData</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMeshData.Build">func (t TriMeshData) Build(verts VertexList, tris TriVertexIndexList)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMeshData.Destroy">func (t TriMeshData) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMeshData.Preprocess">func (t TriMeshData) Preprocess()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriMeshData.Update">func (t TriMeshData) Update()</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriRayCallback">type TriRayCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#TriVertexIndexList">type TriVertexIndexList</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewTriVertexIndexList">func NewTriVertexIndexList(size int, indices ...uint32) TriVertexIndexList</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint">type UniversalJoint</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.AddTorques">func (j UniversalJoint) AddTorques(torque1, torque2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Anchor">func (j UniversalJoint) Anchor() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Anchor2">func (j UniversalJoint) Anchor2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Angle1">func (j UniversalJoint) Angle1() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Angle1Rate">func (j UniversalJoint) Angle1Rate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Angle2">func (j UniversalJoint) Angle2() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Angle2Rate">func (j UniversalJoint) Angle2Rate() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Angles">func (j UniversalJoint) Angles() (float64, float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Axis1">func (j UniversalJoint) Axis1() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Axis2">func (j UniversalJoint) Axis2() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.Param">func (j UniversalJoint) Param(parameter int) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.SetAnchor">func (j UniversalJoint) SetAnchor(pt Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.SetAxis1">func (j UniversalJoint) SetAxis1(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.SetAxis1Offset">func (j UniversalJoint) SetAxis1Offset(axis Vector3, offset1, offset2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.SetAxis2">func (j UniversalJoint) SetAxis2(axis Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.SetAxis2Offset">func (j UniversalJoint) SetAxis2Offset(axis Vector3, offset1, offset2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#UniversalJoint.SetParam">func (j UniversalJoint) SetParam(parameter int, value float64)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Vector">type Vector</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewVector">func NewVector(size, align int, vals ...float64) Vector</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Vector3">type Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewVector3">func NewVector3(vals ...float64) Vector3</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Vector4">type Vector4</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewVector4">func NewVector4(vals ...float64) Vector4</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#VertexList">type VertexList</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewVertexList">func NewVertexList(size int, vals ...float64) VertexList</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World">type World</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#NewWorld">func NewWorld() World</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AngularDamping">func (w World) AngularDamping() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AngularDampingThreshold">func (w World) AngularDampingThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AutoDisable">func (w World) AutoDisable() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AutoDisableAngularThreshold">func (w World) AutoDisableAngularThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AutoDisableAverageSamplesCount">func (w World) AutoDisableAverageSamplesCount() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AutoDisableLinearThreshold">func (w World) AutoDisableLinearThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AutoDisableSteps">func (w World) AutoDisableSteps() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.AutoDisableTime">func (w World) AutoDisableTime() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.CFM">func (w World) CFM() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.CleanupWorkingMemory">func (w World) CleanupWorkingMemory()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.ContactMaxCorrectingVelocity">func (w World) ContactMaxCorrectingVelocity() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.ContactSurfaceLayer">func (w World) ContactSurfaceLayer() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.Data">func (w World) Data() interface{}</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.Destroy">func (w World) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.ERP">func (w World) ERP() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.Gravity">func (w World) Gravity() Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.ImpulseToForce">func (w World) ImpulseToForce(stepSize float64, impulse Vector3) Vector3</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.LinearDamping">func (w World) LinearDamping() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.LinearDampingThreshold">func (w World) LinearDampingThreshold() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.MaxAngularSpeed">func (w World) MaxAngularSpeed() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewAMotorJoint">func (w World) NewAMotorJoint(group JointGroup) AMotorJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewBallJoint">func (w World) NewBallJoint(group JointGroup) BallJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewBody">func (w World) NewBody() Body</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewContactJoint">func (w World) NewContactJoint(group JointGroup, contact *Contact) ContactJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewDBallJoint">func (w World) NewDBallJoint(group JointGroup) DBallJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewDHingeJoint">func (w World) NewDHingeJoint(group JointGroup) DHingeJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewFixedJoint">func (w World) NewFixedJoint(group JointGroup) FixedJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewHinge2Joint">func (w World) NewHinge2Joint(group JointGroup) Hinge2Joint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewHingeJoint">func (w World) NewHingeJoint(group JointGroup) HingeJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewLMotorJoint">func (w World) NewLMotorJoint(group JointGroup) LMotorJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewNullJoint">func (w World) NewNullJoint(group JointGroup) NullJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewPRJoint">func (w World) NewPRJoint(group JointGroup) PRJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewPUJoint">func (w World) NewPUJoint(group JointGroup) PUJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewPistonJoint">func (w World) NewPistonJoint(group JointGroup) PistonJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewPlane2DJoint">func (w World) NewPlane2DJoint(group JointGroup) Plane2DJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewSliderJoint">func (w World) NewSliderJoint(group JointGroup) SliderJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewTransmissionJoint">func (w World) NewTransmissionJoint(group JointGroup) TransmissionJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.NewUniversalJoint">func (w World) NewUniversalJoint(group JointGroup) UniversalJoint</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.QuickStep">func (w World) QuickStep(stepSize float64) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.QuickStepNumIterations">func (w World) QuickStepNumIterations() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.QuickStepW">func (w World) QuickStepW() float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAngularDamping">func (w World) SetAngularDamping(scale float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAngularDampingThreshold">func (w World) SetAngularDampingThreshold(threshold float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAutoAutoDisableAverageSamplesCount">func (w World) SetAutoAutoDisableAverageSamplesCount(averageSamplesCount bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAutoDisable">func (w World) SetAutoDisable(doAutoDisable bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAutoDisableAngularThreshold">func (w World) SetAutoDisableAngularThreshold(angularThreshold float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAutoDisableLinearThreshold">func (w World) SetAutoDisableLinearThreshold(linearThreshold float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAutoDisableSteps">func (w World) SetAutoDisableSteps(steps int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetAutoDisableTime">func (w World) SetAutoDisableTime(time float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetCFM">func (w World) SetCFM(cfm float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetContactMaxCorrectingVelocity">func (w World) SetContactMaxCorrectingVelocity(overRelaxation float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetContactSurfaceLayer">func (w World) SetContactSurfaceLayer(depth float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetData">func (w World) SetData(data interface{})</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetERP">func (w World) SetERP(erp float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetGravity">func (w World) SetGravity(grav Vector3)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetLinearDamping">func (w World) SetLinearDamping(scale float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetLinearDampingThreshold">func (w World) SetLinearDampingThreshold(threshold float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetMaxAngularSpeed">func (w World) SetMaxAngularSpeed(maxSpeed float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetQuickStepNumIterations">func (w World) SetQuickStepNumIterations(num int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetQuickStepW">func (w World) SetQuickStepW(overRelaxation float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.SetStepIslandsProcessingMaxThreadCount">func (w World) SetStepIslandsProcessingMaxThreadCount(count int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.Step">func (w World) Step(stepSize float64) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.StepIslandsProcessingMaxThreadCount">func (w World) StepIslandsProcessingMaxThreadCount() int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#World.UseSharedWorkingMemory">func (w World) UseSharedWorkingMemory(from World) bool</a></span></span>
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	Mu2CtParam	= C.dContactMu2
	AxisDepCtParam	= C.dContactAxisDep
	FDir1CtParam	= C.dContactFDir1
	BounceCtParam	= C.dContactBounce
	SoftERPCtParam	= C.dContactSoftERP
	SoftCFMCtParam	= C.dContactSoftCFM
	Motion1CtParam	= C.dContactMotion1
	Motion2CtParam	= C.dContactMotion2
	MotionNCtParam	= C.dContactMotionN
	Slip1CtParam	= C.dContactSlip1
	Slip2CtParam	= C.dContactSlip2
	RollingCtParam	= C.dContactRolling
	Approx0CtParam	= C.dContactApprox0
	Approx11CtParam	= C.dContactApprox1_1
	Approx12CtParam	= C.dContactApprox1_2
	Approx1NCtParam	= C.dContactApprox1_N
	Approx1CtParam	= C.dContactApprox1
)</pre>
		<p>Contact parameter types
</p>
	
		<pre>const (
	SphereClass		= C.dSphereClass
	BoxClass		= C.dBoxClass
	CapsuleClass		= C.dCapsuleClass
	CylinderClass		= C.dCylinderClass
	PlaneClass		= C.dPlaneClass
	RayClass		= C.dRayClass
	ConvexClass		= C.dConvexClass
	TriMeshClass		= C.dTriMeshClass
	HeightfieldClass	= C.dHeightfieldClass
	SimpleSpaceClass	= C.dSimpleSpaceClass
	HashSpaceClass		= C.dHashSpaceClass
	SweepAndPruneSpaceClass	= C.dSweepAndPruneSpaceClass
	QuadTreeSpaceClass	= C.dQuadTreeSpaceClass

	NumClasses	= C.dGeomNumClasses

	MaxUserClasses	= C.dMaxUserClasses
	FirstUserClass	= C.dFirstUserClass
	LastUserClass	= C.dLastUserClass

	FirstSpaceClass	= C.dFirstSpaceClass
	LastSpaceClass	= C.dLastSpaceClass
)</pre>
		<p>Geometry classes
</p>
	
		<pre>const (
	BallJointType		= C.dJointTypeBall
	HingeJointType		= C.dJointTypeHinge
	SliderJointType		= C.dJointTypeSlider
	ContactJointType	= C.dJointTypeContact
	UniversalJointType	= C.dJointTypeUniversal
	Hinge2JointType		= C.dJointTypeHinge2
	FixedJointType		= C.dJointTypeFixed
	NullJointType		= C.dJointTypeNull
	AMotorJointType		= C.dJointTypeAMotor
	LMotorJointType		= C.dJointTypeLMotor
	Plane2DJointType	= C.dJointTypePlane2D
	PRJointType		= C.dJointTypePR
	PUJointType		= C.dJointTypePU
	PistonJointType		= C.dJointTypePiston
	DBallJointType		= C.dJointTypeDBall
	DHingeJointType		= C.dJointTypeDHinge
	TransmissionJointType	= C.dJointTypeTransmission
)</pre>
		<p>Joint types
</p>
	
		<pre>const (
	LoStopJtParam		= C.dParamLoStop
	HiStopJtParam		= C.dParamHiStop
	VelJtParam		= C.dParamVel
	LoVelJtParam		= C.dParamLoVel
	HiVelJtParam		= C.dParamHiVel
	FMaxJtParam		= C.dParamFMax
	FudgeFactorJtParam	= C.dParamFudgeFactor
	BounceJtParam		= C.dParamBounce
	CFMJtParam		= C.dParamCFM
	StopERPJtParam		= C.dParamStopERP
	StopCFMJtParam		= C.dParamStopCFM
	SuspensionERPJtParam	= C.dParamSuspensionERP
	SuspensionCFMJtParam	= C.dParamSuspensionCFM
	ERPJtParam		= C.dParamERP

	NumJtParams	= C.dParamsInGroup

	JtParamGroup1		= C.dParamGroup1
	LoStopJtParam1		= C.dParamLoStop1
	HiStopJtParam1		= C.dParamHiStop1
	VelJtParam1		= C.dParamVel1
	LoVelJtParam1		= C.dParamLoVel1
	HiVelJtParam1		= C.dParamHiVel1
	FMaxJtParam1		= C.dParamFMax1
	FudgeFactorJtParam1	= C.dParamFudgeFactor1
	BounceJtParam1		= C.dParamBounce1
	CFMJtParam1		= C.dParamCFM1
	StopERPJtParam1		= C.dParamStopERP1
	StopCFMJtParam1		= C.dParamStopCFM1
	SuspensionERPJtParam1	= C.dParamSuspensionERP1
	SuspensionCFMJtParam1	= C.dParamSuspensionCFM1
	ERPJtParam1		= C.dParamERP1

	JtParamGroup2		= C.dParamGroup2
	LoStopJtParam2		= C.dParamLoStop2
	HiStopJtParam2		= C.dParamHiStop2
	VelJtParam2		= C.dParamVel2
	LoVelJtParam2		= C.dParamLoVel2
	HiVelJtParam2		= C.dParamHiVel2
	FMaxJtParam2		= C.dParamFMax2
	FudgeFactorJtParam2	= C.dParamFudgeFactor2
	BounceJtParam2		= C.dParamBounce2
	CFMJtParam2		= C.dParamCFM2
	StopERPJtParam2		= C.dParamStopERP2
	StopCFMJtParam2		= C.dParamStopCFM2
	SuspensionERPJtParam2	= C.dParamSuspensionERP2
	SuspensionCFMJtParam2	= C.dParamSuspensionCFM2
	ERPJtParam2		= C.dParamERP2

	JtParamGroup3		= C.dParamGroup3
	LoStopJtParam3		= C.dParamLoStop3
	HiStopJtParam3		= C.dParamHiStop3
	VelJtParam3		= C.dParamVel3
	LoVelJtParam3		= C.dParamLoVel3
	HiVelJtParam3		= C.dParamHiVel3
	FMaxJtParam3		= C.dParamFMax3
	FudgeFactorJtParam3	= C.dParamFudgeFactor3
	BounceJtParam3		= C.dParamBounce3
	CFMJtParam3		= C.dParamCFM3
	StopERPJtParam3		= C.dParamStopERP3
	StopCFMJtParam3		= C.dParamStopCFM3
	SuspensionERPJtParam3	= C.dParamSuspensionERP3
	SuspensionCFMJtParam3	= C.dParamSuspensionCFM3
	ERPJtParam3		= C.dParamERP3
)</pre>
		<p>Joint parameters
</p>
	
		<pre>const (
	AMotorUser	= C.dAMotorUser
	AMotorEuler	= C.dAMotorEuler
)</pre>
		<p>Angular motor parameters
</p>
	
		<pre>const (
	TransmissionParallelAxes	= C.dTransmissionParallelAxes
	TransmissionIntersectingAxes	= C.dTransmissionIntersectingAxes
	TransmissionChainDrive		= C.dTransmissionChainDrive
)</pre>
		<p>Transmission parameters
</p>
	
		<pre>const (
	BasicDataAFlag		= C.dAllocateFlagBasicData
	CollisionDataAFlag	= C.dAllocateFlagCollisionData
	AllAFlag		= C.dAllocateMaskAll
)</pre>
		<p>Allocation flags
</p>
	
		<pre>const (
	SAPAxesXYZ	= C.dSAP_AXES_XYZ
	SAPAxesXZY	= C.dSAP_AXES_XZY
	SAPAxesYXZ	= C.dSAP_AXES_YXZ
	SAPAxesYZX	= C.dSAP_AXES_YZX
	SAPAxesZXY	= C.dSAP_AXES_ZXY
	SAPAxesZYX	= C.dSAP_AXES_ZYX
)</pre>
		<p>Sweep and prune axis orders
</p>
	
		<pre>const (
	ManualThreadCleanupIFlag = C.dInitFlagManualThreadCleanup
)</pre>
		<p>Initialization flags
</p>
	
		<pre>const (
	WorldStepThreadCountUnlimited = C.dWORLDSTEP_THREADCOUNT_UNLIMITED
)</pre>
		<p>World constants
</p>
	
</span>





<h1 id="variables" class="hdr pkg hdr-variables"><a href="#variables" title="permalink">»</a>&nbsp;Variables <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg variables">
	
		<pre>var (
	V3	= NewVector3
	V4	= NewVector4
	M3	= NewMatrix3
	M4	= NewMatrix4
	Q	= NewQuaternion
	BB	= NewAABB
)</pre>
		<p>Short constructor aliases for convenience
</p>
	
</span>





	<h1 id="CleanupAllDataForThread" class="hdr pkg hdr-function"><a href="#CleanupAllDataForThread" title="permalink">»</a>&nbsp;func CleanupAllDataForThread() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func CleanupAllDataForThread()</pre>
		<p>
CleanupAllDataForThread manually releases ODE resources for the current thread.
</p>

	</span>

	<h1 id="Close" class="hdr pkg hdr-function"><a href="#Close" title="permalink">»</a>&nbsp;func Close() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Close()</pre>
		<p>
Close releases ODE resources.
</p>

	</span>

	<h1 id="Init" class="hdr pkg hdr-function"><a href="#Init" title="permalink">»</a>&nbsp;func Init(initFlags, allocFlags int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Init(initFlags, allocFlags int)</pre>
		<p>
Init initializes ODE.
</p>

	</span>





	
	<h1 id="AABB" class="hdr pkg hdr-type"><a href="#AABB" title="permalink">»</a>&nbsp;type AABB <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type AABB Vector</pre>
		<p>
AABB represents an axis-aligned bounding box.
</p>

	</span>

	
	
		<h1 id="NewAABB" class="hdr pkg hdr-function"><a href="#NewAABB" title="permalink">»</a>&nbsp;func NewAABB(vals ...float64) AABB <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewAABB(vals ...float64) AABB</pre>
			<p>
NewAABB returns a new AABB instance.
</p>

		</span>
	

	
	

	
	<h1 id="AMotorJoint" class="hdr pkg hdr-type"><a href="#AMotorJoint" title="permalink">»</a>&nbsp;type AMotorJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type AMotorJoint struct {
	JointBase
}</pre>
		<p>
AMotorJoint represents an angular motor joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="AMotorJoint.AddTorques" class="hdr pkg hdr-method"><a href="#AMotorJoint.AddTorques" title="permalink">»</a>&nbsp;func (j AMotorJoint) AddTorques(torque1, torque2, torque3 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) AddTorques(torque1, torque2, torque3 float64)</pre>
			<p>
AddTorques adds torques to the joint.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.Angle" class="hdr pkg hdr-method"><a href="#AMotorJoint.Angle" title="permalink">»</a>&nbsp;func (j AMotorJoint) Angle(num int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) Angle(num int) float64</pre>
			<p>
Angle returns the angle of the given axis.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.AngleRate" class="hdr pkg hdr-method"><a href="#AMotorJoint.AngleRate" title="permalink">»</a>&nbsp;func (j AMotorJoint) AngleRate(num int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) AngleRate(num int) float64</pre>
			<p>
AngleRate returns the angle&#39;s rate of change for the given axis.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.Axis" class="hdr pkg hdr-method"><a href="#AMotorJoint.Axis" title="permalink">»</a>&nbsp;func (j AMotorJoint) Axis(num int) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) Axis(num int) Vector3</pre>
			<p>
Axis returns the given axis.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.AxisRel" class="hdr pkg hdr-method"><a href="#AMotorJoint.AxisRel" title="permalink">»</a>&nbsp;func (j AMotorJoint) AxisRel(num int) int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) AxisRel(num int) int</pre>
			<p>
AxisRel returns the relative mode for the given axis.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.Mode" class="hdr pkg hdr-method"><a href="#AMotorJoint.Mode" title="permalink">»</a>&nbsp;func (j AMotorJoint) Mode() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) Mode() int</pre>
			<p>
Mode returns the mode.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.NumAxes" class="hdr pkg hdr-method"><a href="#AMotorJoint.NumAxes" title="permalink">»</a>&nbsp;func (j AMotorJoint) NumAxes() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) NumAxes() int</pre>
			<p>
NumAxes returns the number of axes.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.Param" class="hdr pkg hdr-method"><a href="#AMotorJoint.Param" title="permalink">»</a>&nbsp;func (j AMotorJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.SetAngle" class="hdr pkg hdr-method"><a href="#AMotorJoint.SetAngle" title="permalink">»</a>&nbsp;func (j AMotorJoint) SetAngle(num int, angle float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) SetAngle(num int, angle float64)</pre>
			<p>
SetAngle sets the angle of the given axis.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.SetAxis" class="hdr pkg hdr-method"><a href="#AMotorJoint.SetAxis" title="permalink">»</a>&nbsp;func (j AMotorJoint) SetAxis(num, rel int, axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) SetAxis(num, rel int, axis Vector3)</pre>
			<p>
SetAxis sets the given axis relative to body rel (1 or 2) or none (0).
</p>

		</span>
	
		
		<h1 id="AMotorJoint.SetMode" class="hdr pkg hdr-method"><a href="#AMotorJoint.SetMode" title="permalink">»</a>&nbsp;func (j AMotorJoint) SetMode(mode int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) SetMode(mode int)</pre>
			<p>
SetMode sets the mode.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.SetNumAxes" class="hdr pkg hdr-method"><a href="#AMotorJoint.SetNumAxes" title="permalink">»</a>&nbsp;func (j AMotorJoint) SetNumAxes(num int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) SetNumAxes(num int)</pre>
			<p>
SetNumAxes sets the number of axes.
</p>

		</span>
	
		
		<h1 id="AMotorJoint.SetParam" class="hdr pkg hdr-method"><a href="#AMotorJoint.SetParam" title="permalink">»</a>&nbsp;func (j AMotorJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j AMotorJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="BallJoint" class="hdr pkg hdr-type"><a href="#BallJoint" title="permalink">»</a>&nbsp;type BallJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type BallJoint struct {
	JointBase
}</pre>
		<p>
BallJoint implements a ball-and-socket joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="BallJoint.Anchor" class="hdr pkg hdr-method"><a href="#BallJoint.Anchor" title="permalink">»</a>&nbsp;func (j BallJoint) Anchor() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j BallJoint) Anchor() Vector3</pre>
			<p>
Anchor returns the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="BallJoint.Anchor2" class="hdr pkg hdr-method"><a href="#BallJoint.Anchor2" title="permalink">»</a>&nbsp;func (j BallJoint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j BallJoint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="BallJoint.Param" class="hdr pkg hdr-method"><a href="#BallJoint.Param" title="permalink">»</a>&nbsp;func (j BallJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j BallJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="BallJoint.SetAnchor" class="hdr pkg hdr-method"><a href="#BallJoint.SetAnchor" title="permalink">»</a>&nbsp;func (j BallJoint) SetAnchor(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j BallJoint) SetAnchor(pt Vector3)</pre>
			<p>
SetAnchor sets the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="BallJoint.SetAnchor2" class="hdr pkg hdr-method"><a href="#BallJoint.SetAnchor2" title="permalink">»</a>&nbsp;func (j BallJoint) SetAnchor2(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j BallJoint) SetAnchor2(pt Vector3)</pre>
			<p>
SetAnchor2 sets the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="BallJoint.SetParam" class="hdr pkg hdr-method"><a href="#BallJoint.SetParam" title="permalink">»</a>&nbsp;func (j BallJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j BallJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="Body" class="hdr pkg hdr-type"><a href="#Body" title="permalink">»</a>&nbsp;type Body <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Body uintptr</pre>
		<p>
Body represents a rigid body.
</p>

	</span>

	
	

	
	
		
		<h1 id="Body.AddForce" class="hdr pkg hdr-method"><a href="#Body.AddForce" title="permalink">»</a>&nbsp;func (b Body) AddForce(force Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddForce(force Vector3)</pre>
			<p>
AddForce adds a force in world coordinates at the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.AddForceAtPos" class="hdr pkg hdr-method"><a href="#Body.AddForceAtPos" title="permalink">»</a>&nbsp;func (b Body) AddForceAtPos(force, pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddForceAtPos(force, pos Vector3)</pre>
			<p>
AddForceAtPos adds a force in world coordinates at the position in world
coordinates.
</p>

		</span>
	
		
		<h1 id="Body.AddForceAtRelPos" class="hdr pkg hdr-method"><a href="#Body.AddForceAtRelPos" title="permalink">»</a>&nbsp;func (b Body) AddForceAtRelPos(force, pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddForceAtRelPos(force, pos Vector3)</pre>
			<p>
AddForceAtRelPos adds a force in world coordinates at the position in body
coordinates.
</p>

		</span>
	
		
		<h1 id="Body.AddRelForce" class="hdr pkg hdr-method"><a href="#Body.AddRelForce" title="permalink">»</a>&nbsp;func (b Body) AddRelForce(force Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddRelForce(force Vector3)</pre>
			<p>
AddRelForce adds a force in body coordinates at the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.AddRelForceAtPos" class="hdr pkg hdr-method"><a href="#Body.AddRelForceAtPos" title="permalink">»</a>&nbsp;func (b Body) AddRelForceAtPos(force, pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddRelForceAtPos(force, pos Vector3)</pre>
			<p>
AddRelForceAtPos adds a force in body coordinates at the position in world
coordinates.
</p>

		</span>
	
		
		<h1 id="Body.AddRelForceAtRelPos" class="hdr pkg hdr-method"><a href="#Body.AddRelForceAtRelPos" title="permalink">»</a>&nbsp;func (b Body) AddRelForceAtRelPos(force, pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddRelForceAtRelPos(force, pos Vector3)</pre>
			<p>
AddRelForceAtRelPos adds a force in body coordinates at the position in body coordinates.
</p>

		</span>
	
		
		<h1 id="Body.AddRelTorque" class="hdr pkg hdr-method"><a href="#Body.AddRelTorque" title="permalink">»</a>&nbsp;func (b Body) AddRelTorque(torque Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddRelTorque(torque Vector3)</pre>
			<p>
AddRelTorque adds a torque in body coordinates at the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.AddTorque" class="hdr pkg hdr-method"><a href="#Body.AddTorque" title="permalink">»</a>&nbsp;func (b Body) AddTorque(torque Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AddTorque(torque Vector3)</pre>
			<p>
AddTorque adds a torque in world coordinates at the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.AngularDamping" class="hdr pkg hdr-method"><a href="#Body.AngularDamping" title="permalink">»</a>&nbsp;func (b Body) AngularDamping() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AngularDamping() float64</pre>
			<p>
AngularDamping returns the angular damping scale.
</p>

		</span>
	
		
		<h1 id="Body.AngularDampingThreshold" class="hdr pkg hdr-method"><a href="#Body.AngularDampingThreshold" title="permalink">»</a>&nbsp;func (b Body) AngularDampingThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AngularDampingThreshold() float64</pre>
			<p>
AngularDampingThreshold returns the angular damping threshold.
</p>

		</span>
	
		
		<h1 id="Body.AngularVel" class="hdr pkg hdr-method"><a href="#Body.AngularVel" title="permalink">»</a>&nbsp;func (b Body) AngularVel() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AngularVel() Vector3</pre>
			<p>
AngularVel returns the angular velocity.
</p>

		</span>
	
		
		<h1 id="Body.AutoDisable" class="hdr pkg hdr-method"><a href="#Body.AutoDisable" title="permalink">»</a>&nbsp;func (b Body) AutoDisable() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AutoDisable() bool</pre>
			<p>
AutoDisable returns whether the body will be auto disabled.
</p>

		</span>
	
		
		<h1 id="Body.AutoDisableAngularThreshold" class="hdr pkg hdr-method"><a href="#Body.AutoDisableAngularThreshold" title="permalink">»</a>&nbsp;func (b Body) AutoDisableAngularThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AutoDisableAngularThreshold() float64</pre>
			<p>
AutoDisableAngularThreshold returns the auto disable angular average threshold.
</p>

		</span>
	
		
		<h1 id="Body.AutoDisableAverageSamplesCount" class="hdr pkg hdr-method"><a href="#Body.AutoDisableAverageSamplesCount" title="permalink">»</a>&nbsp;func (b Body) AutoDisableAverageSamplesCount() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AutoDisableAverageSamplesCount() int</pre>
			<p>
AutoDisableAverageSamplesCount returns the auto disable sample count.
</p>

		</span>
	
		
		<h1 id="Body.AutoDisableLinearThreshold" class="hdr pkg hdr-method"><a href="#Body.AutoDisableLinearThreshold" title="permalink">»</a>&nbsp;func (b Body) AutoDisableLinearThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AutoDisableLinearThreshold() float64</pre>
			<p>
AutoDisableLinearThreshold returns the auto disable linear average threshold.
</p>

		</span>
	
		
		<h1 id="Body.AutoDisableSteps" class="hdr pkg hdr-method"><a href="#Body.AutoDisableSteps" title="permalink">»</a>&nbsp;func (b Body) AutoDisableSteps() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AutoDisableSteps() int</pre>
			<p>
AutoDisableSteps returns the number of auto disable steps.
</p>

		</span>
	
		
		<h1 id="Body.AutoDisableTime" class="hdr pkg hdr-method"><a href="#Body.AutoDisableTime" title="permalink">»</a>&nbsp;func (b Body) AutoDisableTime() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) AutoDisableTime() float64</pre>
			<p>
AutoDisableTime returns the auto disable time.
</p>

		</span>
	
		
		<h1 id="Body.Connected" class="hdr pkg hdr-method"><a href="#Body.Connected" title="permalink">»</a>&nbsp;func (b Body) Connected(other Body) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Connected(other Body) bool</pre>
			<p>
Connected returns whether the body is connected to the given body by a
joint.
</p>

		</span>
	
		
		<h1 id="Body.ConnectedExcluding" class="hdr pkg hdr-method"><a href="#Body.ConnectedExcluding" title="permalink">»</a>&nbsp;func (b Body) ConnectedExcluding(other Body, jointType int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) ConnectedExcluding(other Body, jointType int) bool</pre>
			<p>
ConnectedExcluding returns whether the body is connected to the given body
by a joint, except for joints of the given class.
</p>

		</span>
	
		
		<h1 id="Body.ConnectingJoint" class="hdr pkg hdr-method"><a href="#Body.ConnectingJoint" title="permalink">»</a>&nbsp;func (b Body) ConnectingJoint(other Body) Joint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) ConnectingJoint(other Body) Joint</pre>
			<p>
ConnectingJoint returns the first joint connecting the body to the specified
body.
</p>

		</span>
	
		
		<h1 id="Body.ConnectingJointList" class="hdr pkg hdr-method"><a href="#Body.ConnectingJointList" title="permalink">»</a>&nbsp;func (b Body) ConnectingJointList(other Body) []Joint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) ConnectingJointList(other Body) []Joint</pre>
			<p>
ConnectingJointList returns a list of joints connecting the body to the
specified body.
</p>

		</span>
	
		
		<h1 id="Body.Data" class="hdr pkg hdr-method"><a href="#Body.Data" title="permalink">»</a>&nbsp;func (b Body) Data() interface{} <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Data() interface{}</pre>
			<p>
Data returns the user-specified data associated with the body.
</p>

		</span>
	
		
		<h1 id="Body.Destroy" class="hdr pkg hdr-method"><a href="#Body.Destroy" title="permalink">»</a>&nbsp;func (b Body) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Destroy()</pre>
			<p>
Destroy destroys the body.
</p>

		</span>
	
		
		<h1 id="Body.Enabled" class="hdr pkg hdr-method"><a href="#Body.Enabled" title="permalink">»</a>&nbsp;func (b Body) Enabled() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Enabled() bool</pre>
			<p>
Enabled returns whether the body is enabled.
</p>

		</span>
	
		
		<h1 id="Body.FiniteRotationAxis" class="hdr pkg hdr-method"><a href="#Body.FiniteRotationAxis" title="permalink">»</a>&nbsp;func (b Body) FiniteRotationAxis() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) FiniteRotationAxis() Vector3</pre>
			<p>
FiniteRotationAxis returns the finite rotation axis.
</p>

		</span>
	
		
		<h1 id="Body.FiniteRotationMode" class="hdr pkg hdr-method"><a href="#Body.FiniteRotationMode" title="permalink">»</a>&nbsp;func (b Body) FiniteRotationMode() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) FiniteRotationMode() bool</pre>
			<p>
FiniteRotationMode returns whether finite rotation mode is used.
</p>

		</span>
	
		
		<h1 id="Body.FirstGeom" class="hdr pkg hdr-method"><a href="#Body.FirstGeom" title="permalink">»</a>&nbsp;func (b Body) FirstGeom() Geom <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) FirstGeom() Geom</pre>
			<p>
FirstGeom returns the first geometry associated with the body.
</p>

		</span>
	
		
		<h1 id="Body.Force" class="hdr pkg hdr-method"><a href="#Body.Force" title="permalink">»</a>&nbsp;func (b Body) Force() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Force() Vector3</pre>
			<p>
Force returns the force acting on the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.GravityEnabled" class="hdr pkg hdr-method"><a href="#Body.GravityEnabled" title="permalink">»</a>&nbsp;func (b Body) GravityEnabled() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) GravityEnabled() bool</pre>
			<p>
GravityEnabled returns whether gravity affects the body.
</p>

		</span>
	
		
		<h1 id="Body.GyroModeEnabled" class="hdr pkg hdr-method"><a href="#Body.GyroModeEnabled" title="permalink">»</a>&nbsp;func (b Body) GyroModeEnabled() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) GyroModeEnabled() bool</pre>
			<p>
GyroModeEnabled returns whether gyroscopic mode is enabled.
</p>

		</span>
	
		
		<h1 id="Body.Joint" class="hdr pkg hdr-method"><a href="#Body.Joint" title="permalink">»</a>&nbsp;func (b Body) Joint(index int) Joint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Joint(index int) Joint</pre>
			<p>
Joint returns the joint attached to the body, specified by index.
</p>

		</span>
	
		
		<h1 id="Body.Kinematic" class="hdr pkg hdr-method"><a href="#Body.Kinematic" title="permalink">»</a>&nbsp;func (b Body) Kinematic() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Kinematic() bool</pre>
			<p>
Kinematic returns whether the body is in kinematic mode.
</p>

		</span>
	
		
		<h1 id="Body.LinearDamping" class="hdr pkg hdr-method"><a href="#Body.LinearDamping" title="permalink">»</a>&nbsp;func (b Body) LinearDamping() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) LinearDamping() float64</pre>
			<p>
LinearDamping returns the linear damping scale.
</p>

		</span>
	
		
		<h1 id="Body.LinearDampingThreshold" class="hdr pkg hdr-method"><a href="#Body.LinearDampingThreshold" title="permalink">»</a>&nbsp;func (b Body) LinearDampingThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) LinearDampingThreshold() float64</pre>
			<p>
LinearDampingThreshold returns the linear damping threshold.
</p>

		</span>
	
		
		<h1 id="Body.LinearVelocity" class="hdr pkg hdr-method"><a href="#Body.LinearVelocity" title="permalink">»</a>&nbsp;func (b Body) LinearVelocity() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) LinearVelocity() Vector3</pre>
			<p>
LinearVelocity returns the linear velocity.
</p>

		</span>
	
		
		<h1 id="Body.Mass" class="hdr pkg hdr-method"><a href="#Body.Mass" title="permalink">»</a>&nbsp;func (b Body) Mass() *Mass <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Mass() *Mass</pre>
			<p>
Mass returns the mass.
</p>

		</span>
	
		
		<h1 id="Body.MaxAngularSpeed" class="hdr pkg hdr-method"><a href="#Body.MaxAngularSpeed" title="permalink">»</a>&nbsp;func (b Body) MaxAngularSpeed() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) MaxAngularSpeed() float64</pre>
			<p>
MaxAngularSpeed returns the maximum angular speed.
</p>

		</span>
	
		
		<h1 id="Body.NumJoints" class="hdr pkg hdr-method"><a href="#Body.NumJoints" title="permalink">»</a>&nbsp;func (b Body) NumJoints() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) NumJoints() int</pre>
			<p>
NumJoints returns the number of joints attached to the body.
</p>

		</span>
	
		
		<h1 id="Body.PointVel" class="hdr pkg hdr-method"><a href="#Body.PointVel" title="permalink">»</a>&nbsp;func (b Body) PointVel(pt Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) PointVel(pt Vector3) Vector3</pre>
			<p>
PointVel returns the velocity in world coordinates of a point in world
coordinates.
</p>

		</span>
	
		
		<h1 id="Body.PosRelPoint" class="hdr pkg hdr-method"><a href="#Body.PosRelPoint" title="permalink">»</a>&nbsp;func (b Body) PosRelPoint(pos Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) PosRelPoint(pos Vector3) Vector3</pre>
			<p>
PosRelPoint returns the position in body coordinates of a point in world
coordinates.
</p>

		</span>
	
		
		<h1 id="Body.Position" class="hdr pkg hdr-method"><a href="#Body.Position" title="permalink">»</a>&nbsp;func (b Body) Position() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Position() Vector3</pre>
			<p>
Position returns the position.
</p>

		</span>
	
		
		<h1 id="Body.Quaternion" class="hdr pkg hdr-method"><a href="#Body.Quaternion" title="permalink">»</a>&nbsp;func (b Body) Quaternion() Quaternion <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Quaternion() Quaternion</pre>
			<p>
Quaternion returns the orientation represented by a quaternion.
</p>

		</span>
	
		
		<h1 id="Body.RelPointPos" class="hdr pkg hdr-method"><a href="#Body.RelPointPos" title="permalink">»</a>&nbsp;func (b Body) RelPointPos(pt Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) RelPointPos(pt Vector3) Vector3</pre>
			<p>
RelPointPos returns the position in world coordinates of a point in body
coordinates.
</p>

		</span>
	
		
		<h1 id="Body.RelPointVel" class="hdr pkg hdr-method"><a href="#Body.RelPointVel" title="permalink">»</a>&nbsp;func (b Body) RelPointVel(pt Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) RelPointVel(pt Vector3) Vector3</pre>
			<p>
RelPointVel returns the velocity in world coordinates of a point in body
coordinates.
</p>

		</span>
	
		
		<h1 id="Body.Rotation" class="hdr pkg hdr-method"><a href="#Body.Rotation" title="permalink">»</a>&nbsp;func (b Body) Rotation() Matrix3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Rotation() Matrix3</pre>
			<p>
Rotation returns the orientation represented by a rotation matrix.
</p>

		</span>
	
		
		<h1 id="Body.SetAngularDamping" class="hdr pkg hdr-method"><a href="#Body.SetAngularDamping" title="permalink">»</a>&nbsp;func (b Body) SetAngularDamping(scale float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAngularDamping(scale float64)</pre>
			<p>
SetAngularDamping sets the angular damping scale.
</p>

		</span>
	
		
		<h1 id="Body.SetAngularDampingThreshold" class="hdr pkg hdr-method"><a href="#Body.SetAngularDampingThreshold" title="permalink">»</a>&nbsp;func (b Body) SetAngularDampingThreshold(threshold float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAngularDampingThreshold(threshold float64)</pre>
			<p>
SetAngularDampingThreshold sets the angular damping threshold.
</p>

		</span>
	
		
		<h1 id="Body.SetAngularVelocity" class="hdr pkg hdr-method"><a href="#Body.SetAngularVelocity" title="permalink">»</a>&nbsp;func (b Body) SetAngularVelocity(vel Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAngularVelocity(vel Vector3)</pre>
			<p>
SetAngularVelocity sets the angular velocity.
</p>

		</span>
	
		
		<h1 id="Body.SetAutoAutoDisableAverageSamplesCount" class="hdr pkg hdr-method"><a href="#Body.SetAutoAutoDisableAverageSamplesCount" title="permalink">»</a>&nbsp;func (b Body) SetAutoAutoDisableAverageSamplesCount(count int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAutoAutoDisableAverageSamplesCount(count int)</pre>
			<p>
SetAutoAutoDisableAverageSamplesCount sets auto disable average sample count.
</p>

		</span>
	
		
		<h1 id="Body.SetAutoDisable" class="hdr pkg hdr-method"><a href="#Body.SetAutoDisable" title="permalink">»</a>&nbsp;func (b Body) SetAutoDisable(doAutoDisable bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAutoDisable(doAutoDisable bool)</pre>
			<p>
SetAutoDisable sets wether the body will be auto disabled.
</p>

		</span>
	
		
		<h1 id="Body.SetAutoDisableAngularThreshold" class="hdr pkg hdr-method"><a href="#Body.SetAutoDisableAngularThreshold" title="permalink">»</a>&nbsp;func (b Body) SetAutoDisableAngularThreshold(thresh float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAutoDisableAngularThreshold(thresh float64)</pre>
			<p>
SetAutoDisableAngularThreshold sets the auto disable angular average threshold.
</p>

		</span>
	
		
		<h1 id="Body.SetAutoDisableDefaults" class="hdr pkg hdr-method"><a href="#Body.SetAutoDisableDefaults" title="permalink">»</a>&nbsp;func (b Body) SetAutoDisableDefaults() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAutoDisableDefaults()</pre>
			<p>
SetAutoDisableDefaults sets auto disable settings to default defaults.
</p>

		</span>
	
		
		<h1 id="Body.SetAutoDisableLinearThreshold" class="hdr pkg hdr-method"><a href="#Body.SetAutoDisableLinearThreshold" title="permalink">»</a>&nbsp;func (b Body) SetAutoDisableLinearThreshold(thresh float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAutoDisableLinearThreshold(thresh float64)</pre>
			<p>
SetAutoDisableLinearThreshold sets the auto disable linear average threshold.
</p>

		</span>
	
		
		<h1 id="Body.SetAutoDisableSteps" class="hdr pkg hdr-method"><a href="#Body.SetAutoDisableSteps" title="permalink">»</a>&nbsp;func (b Body) SetAutoDisableSteps(steps int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAutoDisableSteps(steps int)</pre>
			<p>
SetAutoDisableSteps sets the number of auto disable steps.
</p>

		</span>
	
		
		<h1 id="Body.SetAutoDisableTime" class="hdr pkg hdr-method"><a href="#Body.SetAutoDisableTime" title="permalink">»</a>&nbsp;func (b Body) SetAutoDisableTime(time float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetAutoDisableTime(time float64)</pre>
			<p>
SetAutoDisableTime sets the auto disable time.
</p>

		</span>
	
		
		<h1 id="Body.SetDampingDefaults" class="hdr pkg hdr-method"><a href="#Body.SetDampingDefaults" title="permalink">»</a>&nbsp;func (b Body) SetDampingDefaults() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetDampingDefaults()</pre>
			<p>
SetDampingDefaults sets damping settings to default values.
</p>

		</span>
	
		
		<h1 id="Body.SetData" class="hdr pkg hdr-method"><a href="#Body.SetData" title="permalink">»</a>&nbsp;func (b Body) SetData(data interface{}) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetData(data interface{})</pre>
			<p>
SetData associates user-specified data with the body.
</p>

		</span>
	
		
		<h1 id="Body.SetEnabled" class="hdr pkg hdr-method"><a href="#Body.SetEnabled" title="permalink">»</a>&nbsp;func (b Body) SetEnabled(isEnabled bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetEnabled(isEnabled bool)</pre>
			<p>
SetEnabled sets whether the body is enabled.
</p>

		</span>
	
		
		<h1 id="Body.SetFiniteRotationAxis" class="hdr pkg hdr-method"><a href="#Body.SetFiniteRotationAxis" title="permalink">»</a>&nbsp;func (b Body) SetFiniteRotationAxis(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetFiniteRotationAxis(axis Vector3)</pre>
			<p>
SetFiniteRotationAxis sets the finite rotation axis.
</p>

		</span>
	
		
		<h1 id="Body.SetFiniteRotationMode" class="hdr pkg hdr-method"><a href="#Body.SetFiniteRotationMode" title="permalink">»</a>&nbsp;func (b Body) SetFiniteRotationMode(isFinite bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetFiniteRotationMode(isFinite bool)</pre>
			<p>
SetFiniteRotationMode sets whether finite rotation mode is used.
</p>

		</span>
	
		
		<h1 id="Body.SetForce" class="hdr pkg hdr-method"><a href="#Body.SetForce" title="permalink">»</a>&nbsp;func (b Body) SetForce(force Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetForce(force Vector3)</pre>
			<p>
SetForce sets the force acting on the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.SetGravityEnabled" class="hdr pkg hdr-method"><a href="#Body.SetGravityEnabled" title="permalink">»</a>&nbsp;func (b Body) SetGravityEnabled(isGravityEnabled bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetGravityEnabled(isGravityEnabled bool)</pre>
			<p>
SetGravityEnabled sets whether gravity affects the body.
</p>

		</span>
	
		
		<h1 id="Body.SetGyroModeEnabled" class="hdr pkg hdr-method"><a href="#Body.SetGyroModeEnabled" title="permalink">»</a>&nbsp;func (b Body) SetGyroModeEnabled(isEnabled bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetGyroModeEnabled(isEnabled bool)</pre>
			<p>
SetGyroModeEnabled sets whether gyroscopic mode is enabled.
</p>

		</span>
	
		
		<h1 id="Body.SetKinematic" class="hdr pkg hdr-method"><a href="#Body.SetKinematic" title="permalink">»</a>&nbsp;func (b Body) SetKinematic(isKinematic bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetKinematic(isKinematic bool)</pre>
			<p>
SetKinematic sets whether the body is in kinematic mode.
</p>

		</span>
	
		
		<h1 id="Body.SetLinearDamping" class="hdr pkg hdr-method"><a href="#Body.SetLinearDamping" title="permalink">»</a>&nbsp;func (b Body) SetLinearDamping(scale float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetLinearDamping(scale float64)</pre>
			<p>
SetLinearDamping sets the linear damping scale.
</p>

		</span>
	
		
		<h1 id="Body.SetLinearDampingThreshold" class="hdr pkg hdr-method"><a href="#Body.SetLinearDampingThreshold" title="permalink">»</a>&nbsp;func (b Body) SetLinearDampingThreshold(threshold float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetLinearDampingThreshold(threshold float64)</pre>
			<p>
SetLinearDampingThreshold sets the linear damping threshold.
</p>

		</span>
	
		
		<h1 id="Body.SetLinearVelocity" class="hdr pkg hdr-method"><a href="#Body.SetLinearVelocity" title="permalink">»</a>&nbsp;func (b Body) SetLinearVelocity(vel Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetLinearVelocity(vel Vector3)</pre>
			<p>
SetLinearVelocity sets the linear velocity.
</p>

		</span>
	
		
		<h1 id="Body.SetMass" class="hdr pkg hdr-method"><a href="#Body.SetMass" title="permalink">»</a>&nbsp;func (b Body) SetMass(mass *Mass) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetMass(mass *Mass)</pre>
			<p>
SetMass sets the mass.
</p>

		</span>
	
		
		<h1 id="Body.SetMaxAngularSpeed" class="hdr pkg hdr-method"><a href="#Body.SetMaxAngularSpeed" title="permalink">»</a>&nbsp;func (b Body) SetMaxAngularSpeed(maxSpeed float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetMaxAngularSpeed(maxSpeed float64)</pre>
			<p>
SetMaxAngularSpeed sets the maximum angular speed.
</p>

		</span>
	
		
		<h1 id="Body.SetMovedCallback" class="hdr pkg hdr-method"><a href="#Body.SetMovedCallback" title="permalink">»</a>&nbsp;func (b Body) SetMovedCallback(cb MovedCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetMovedCallback(cb MovedCallback)</pre>
			<p>
SetMovedCallback sets callback to call when the body has moved.
</p>

		</span>
	
		
		<h1 id="Body.SetPosition" class="hdr pkg hdr-method"><a href="#Body.SetPosition" title="permalink">»</a>&nbsp;func (b Body) SetPosition(pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetPosition(pos Vector3)</pre>
			<p>
SetPosition sets the position.
</p>

		</span>
	
		
		<h1 id="Body.SetQuaternion" class="hdr pkg hdr-method"><a href="#Body.SetQuaternion" title="permalink">»</a>&nbsp;func (b Body) SetQuaternion(quat Quaternion) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetQuaternion(quat Quaternion)</pre>
			<p>
SetQuaternion sets the orientation represented by a quaternion.
</p>

		</span>
	
		
		<h1 id="Body.SetRotation" class="hdr pkg hdr-method"><a href="#Body.SetRotation" title="permalink">»</a>&nbsp;func (b Body) SetRotation(rot Matrix3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetRotation(rot Matrix3)</pre>
			<p>
SetRotation sets the orientation represented by a rotation matrix.
</p>

		</span>
	
		
		<h1 id="Body.SetTorque" class="hdr pkg hdr-method"><a href="#Body.SetTorque" title="permalink">»</a>&nbsp;func (b Body) SetTorque(torque Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) SetTorque(torque Vector3)</pre>
			<p>
SetTorque sets the torque acting on the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.Torque" class="hdr pkg hdr-method"><a href="#Body.Torque" title="permalink">»</a>&nbsp;func (b Body) Torque() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) Torque() Vector3</pre>
			<p>
Torque returns the torque acting on the center of mass.
</p>

		</span>
	
		
		<h1 id="Body.VectorFromWorld" class="hdr pkg hdr-method"><a href="#Body.VectorFromWorld" title="permalink">»</a>&nbsp;func (b Body) VectorFromWorld(wld Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) VectorFromWorld(wld Vector3) Vector3</pre>
			<p>
VectorFromWorld converts a vector in world coordinates to body coordinates.
</p>

		</span>
	
		
		<h1 id="Body.VectorToWorld" class="hdr pkg hdr-method"><a href="#Body.VectorToWorld" title="permalink">»</a>&nbsp;func (b Body) VectorToWorld(vec Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) VectorToWorld(vec Vector3) Vector3</pre>
			<p>
VectorToWorld converts a vector in body coordinates to world coordinates.
</p>

		</span>
	
		
		<h1 id="Body.World" class="hdr pkg hdr-method"><a href="#Body.World" title="permalink">»</a>&nbsp;func (b Body) World() World <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Body) World() World</pre>
			<p>
World returns the world which contains the body.
</p>

		</span>
	

	
	<h1 id="Box" class="hdr pkg hdr-type"><a href="#Box" title="permalink">»</a>&nbsp;type Box <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Box struct {
	GeomBase
}</pre>
		<p>
Box is a geometry representing a rectangular box.
</p>

	</span>

	
	

	
	
		
		<h1 id="Box.Lengths" class="hdr pkg hdr-method"><a href="#Box.Lengths" title="permalink">»</a>&nbsp;func (b Box) Lengths() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Box) Lengths() Vector3</pre>
			<p>
Lengths returns the lengths of the sides.
</p>

		</span>
	
		
		<h1 id="Box.PointDepth" class="hdr pkg hdr-method"><a href="#Box.PointDepth" title="permalink">»</a>&nbsp;func (b Box) PointDepth(pt Vector3) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Box) PointDepth(pt Vector3) float64</pre>
			<p>
PointDepth returns the depth of the given point.
</p>

		</span>
	
		
		<h1 id="Box.SetLengths" class="hdr pkg hdr-method"><a href="#Box.SetLengths" title="permalink">»</a>&nbsp;func (b Box) SetLengths(lens Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (b Box) SetLengths(lens Vector3)</pre>
			<p>
SetLengths sets the lengths of the sides.
</p>

		</span>
	

	
	<h1 id="Capsule" class="hdr pkg hdr-type"><a href="#Capsule" title="permalink">»</a>&nbsp;type Capsule <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Capsule struct {
	GeomBase
}</pre>
		<p>
Capsule is a geometry that represents a capsule (a cylinder with a half
sphere on each end).
</p>

	</span>

	
	

	
	
		
		<h1 id="Capsule.Params" class="hdr pkg hdr-method"><a href="#Capsule.Params" title="permalink">»</a>&nbsp;func (c Capsule) Params() (float64, float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c Capsule) Params() (float64, float64)</pre>
			<p>
Params returns the radius and length.
</p>

		</span>
	
		
		<h1 id="Capsule.PointDepth" class="hdr pkg hdr-method"><a href="#Capsule.PointDepth" title="permalink">»</a>&nbsp;func (c Capsule) PointDepth(pt Vector3) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c Capsule) PointDepth(pt Vector3) float64</pre>
			<p>
PointDepth returns the depth of the given point.
</p>

		</span>
	
		
		<h1 id="Capsule.SetParams" class="hdr pkg hdr-method"><a href="#Capsule.SetParams" title="permalink">»</a>&nbsp;func (c Capsule) SetParams(radius, length float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c Capsule) SetParams(radius, length float64)</pre>
			<p>
SetParams sets the radius and length.
</p>

		</span>
	

	
	<h1 id="Contact" class="hdr pkg hdr-type"><a href="#Contact" title="permalink">»</a>&nbsp;type Contact <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Contact struct {
	Surface	SurfaceParameters
	Geom	ContactGeom
	FDir1	Vector3
}</pre>
		<p>
Contact represents a contact.
</p>

	</span>

	
	
		<h1 id="NewContact" class="hdr pkg hdr-function"><a href="#NewContact" title="permalink">»</a>&nbsp;func NewContact() *Contact <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewContact() *Contact</pre>
			<p>
NewContact returns a new Contact.
</p>

		</span>
	

	
	

	
	<h1 id="ContactGeom" class="hdr pkg hdr-type"><a href="#ContactGeom" title="permalink">»</a>&nbsp;type ContactGeom <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type ContactGeom struct {
	Pos	Vector3
	Normal	Vector3
	Depth	float64
	G1	Geom
	G2	Geom
	Side1	int
	Side2	int
}</pre>
		<p>
ContactGeom represents a contact point.
</p>

	</span>

	
	
		<h1 id="NewContactGeom" class="hdr pkg hdr-function"><a href="#NewContactGeom" title="permalink">»</a>&nbsp;func NewContactGeom() *ContactGeom <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewContactGeom() *ContactGeom</pre>
			<p>
NewContactGeom returns a new ContactGeom.
</p>

		</span>
	

	
	

	
	<h1 id="ContactJoint" class="hdr pkg hdr-type"><a href="#ContactJoint" title="permalink">»</a>&nbsp;type ContactJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type ContactJoint struct {
	JointBase
}</pre>
		<p>
ContactJoint represents a contact joint.
</p>

	</span>

	
	

	
	

	
	<h1 id="Convex" class="hdr pkg hdr-type"><a href="#Convex" title="permalink">»</a>&nbsp;type Convex <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Convex struct {
	GeomBase
}</pre>
		<p>
Convex is a geometry representing a convex object.
</p>

	</span>

	
	

	
	
		
		<h1 id="Convex.Set" class="hdr pkg hdr-method"><a href="#Convex.Set" title="permalink">»</a>&nbsp;func (c Convex) Set(planes PlaneList, pts VertexList, polyList PolygonList) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c Convex) Set(planes PlaneList, pts VertexList, polyList PolygonList)</pre>
			<p>
Set sets convex object data
</p>

		</span>
	

	
	<h1 id="Cylinder" class="hdr pkg hdr-type"><a href="#Cylinder" title="permalink">»</a>&nbsp;type Cylinder <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Cylinder struct {
	GeomBase
}</pre>
		<p>
Cylinder is a geometry that represents a cylider.
</p>

	</span>

	
	

	
	
		
		<h1 id="Cylinder.Params" class="hdr pkg hdr-method"><a href="#Cylinder.Params" title="permalink">»</a>&nbsp;func (c Cylinder) Params() (float64, float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c Cylinder) Params() (float64, float64)</pre>
			<p>
Params returns the radius and length.
</p>

		</span>
	
		
		<h1 id="Cylinder.SetParams" class="hdr pkg hdr-method"><a href="#Cylinder.SetParams" title="permalink">»</a>&nbsp;func (c Cylinder) SetParams(radius, length float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c Cylinder) SetParams(radius, length float64)</pre>
			<p>
SetParams sets the radius and length.
</p>

		</span>
	

	
	<h1 id="DBallJoint" class="hdr pkg hdr-type"><a href="#DBallJoint" title="permalink">»</a>&nbsp;type DBallJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DBallJoint struct {
	JointBase
}</pre>
		<p>
DBallJoint represents a double ball joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="DBallJoint.Anchor1" class="hdr pkg hdr-method"><a href="#DBallJoint.Anchor1" title="permalink">»</a>&nbsp;func (j DBallJoint) Anchor1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DBallJoint) Anchor1() Vector3</pre>
			<p>
Anchor1 returns the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="DBallJoint.Anchor2" class="hdr pkg hdr-method"><a href="#DBallJoint.Anchor2" title="permalink">»</a>&nbsp;func (j DBallJoint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DBallJoint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="DBallJoint.Distance" class="hdr pkg hdr-method"><a href="#DBallJoint.Distance" title="permalink">»</a>&nbsp;func (j DBallJoint) Distance() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DBallJoint) Distance() float64</pre>
			<p>
Distance returns the joint distance.
</p>

		</span>
	
		
		<h1 id="DBallJoint.Param" class="hdr pkg hdr-method"><a href="#DBallJoint.Param" title="permalink">»</a>&nbsp;func (j DBallJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DBallJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="DBallJoint.SetAnchor1" class="hdr pkg hdr-method"><a href="#DBallJoint.SetAnchor1" title="permalink">»</a>&nbsp;func (j DBallJoint) SetAnchor1(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DBallJoint) SetAnchor1(pt Vector3)</pre>
			<p>
SetAnchor1 sets the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="DBallJoint.SetAnchor2" class="hdr pkg hdr-method"><a href="#DBallJoint.SetAnchor2" title="permalink">»</a>&nbsp;func (j DBallJoint) SetAnchor2(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DBallJoint) SetAnchor2(pt Vector3)</pre>
			<p>
SetAnchor2 sets the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="DBallJoint.SetParam" class="hdr pkg hdr-method"><a href="#DBallJoint.SetParam" title="permalink">»</a>&nbsp;func (j DBallJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DBallJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="DHingeJoint" class="hdr pkg hdr-type"><a href="#DHingeJoint" title="permalink">»</a>&nbsp;type DHingeJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DHingeJoint struct {
	JointBase
}</pre>
		<p>
DHingeJoint represents a double hinge joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="DHingeJoint.Anchor1" class="hdr pkg hdr-method"><a href="#DHingeJoint.Anchor1" title="permalink">»</a>&nbsp;func (j DHingeJoint) Anchor1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) Anchor1() Vector3</pre>
			<p>
Anchor1 returns the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.Anchor2" class="hdr pkg hdr-method"><a href="#DHingeJoint.Anchor2" title="permalink">»</a>&nbsp;func (j DHingeJoint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.Axis" class="hdr pkg hdr-method"><a href="#DHingeJoint.Axis" title="permalink">»</a>&nbsp;func (j DHingeJoint) Axis() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) Axis() Vector3</pre>
			<p>
Axis returns the joint axis.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.Distance" class="hdr pkg hdr-method"><a href="#DHingeJoint.Distance" title="permalink">»</a>&nbsp;func (j DHingeJoint) Distance() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) Distance() float64</pre>
			<p>
Distance returns the joint distance.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.Param" class="hdr pkg hdr-method"><a href="#DHingeJoint.Param" title="permalink">»</a>&nbsp;func (j DHingeJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.SetAnchor1" class="hdr pkg hdr-method"><a href="#DHingeJoint.SetAnchor1" title="permalink">»</a>&nbsp;func (j DHingeJoint) SetAnchor1(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) SetAnchor1(pt Vector3)</pre>
			<p>
SetAnchor1 sets the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.SetAnchor2" class="hdr pkg hdr-method"><a href="#DHingeJoint.SetAnchor2" title="permalink">»</a>&nbsp;func (j DHingeJoint) SetAnchor2(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) SetAnchor2(pt Vector3)</pre>
			<p>
SetAnchor2 sets the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.SetAxis" class="hdr pkg hdr-method"><a href="#DHingeJoint.SetAxis" title="permalink">»</a>&nbsp;func (j DHingeJoint) SetAxis(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) SetAxis(axis Vector3)</pre>
			<p>
SetAxis sets the joint axis.
</p>

		</span>
	
		
		<h1 id="DHingeJoint.SetParam" class="hdr pkg hdr-method"><a href="#DHingeJoint.SetParam" title="permalink">»</a>&nbsp;func (j DHingeJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j DHingeJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="FixedJoint" class="hdr pkg hdr-type"><a href="#FixedJoint" title="permalink">»</a>&nbsp;type FixedJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type FixedJoint struct {
	JointBase
}</pre>
		<p>
FixedJoint represents a fixed joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="FixedJoint.Fix" class="hdr pkg hdr-method"><a href="#FixedJoint.Fix" title="permalink">»</a>&nbsp;func (j FixedJoint) Fix() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j FixedJoint) Fix()</pre>
			<p>
Fix fixes the joint in its current state.
</p>

		</span>
	
		
		<h1 id="FixedJoint.Param" class="hdr pkg hdr-method"><a href="#FixedJoint.Param" title="permalink">»</a>&nbsp;func (j FixedJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j FixedJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="FixedJoint.SetParam" class="hdr pkg hdr-method"><a href="#FixedJoint.SetParam" title="permalink">»</a>&nbsp;func (j FixedJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j FixedJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="Geom" class="hdr pkg hdr-type"><a href="#Geom" title="permalink">»</a>&nbsp;type Geom <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Geom interface {
	Destroy()
	SetData(data interface{})
	Data() interface{}
	SetBody(body Body)
	Body() Body
	SetPosition(pos Vector3)
	Position() Vector3
	SetRotation(rot Matrix3)
	Rotation() Matrix3
	SetQuaternion(quat Quaternion)
	Quaternion() Quaternion
	AABB() AABB
	IsSpace() bool
	Space() Space
	Class() int
	SetCategoryBits(bits int)
	SetCollideBits(bits int)
	CategoryBits() int
	CollideBits() int
	SetEnabled(isEnabled bool)
	Enabled() bool
	RelPointPos(pt Vector3) Vector3
	PosRelPoint(pos Vector3) Vector3
	VectorToWorld(vec Vector3) Vector3
	VectorFromWorld(wld Vector3) Vector3
	OffsetPosition() Vector3
	SetOffsetPosition(pos Vector3)
	OffsetRotation() Matrix3
	SetOffsetRotation(rot Matrix3)
	OffsetQuaternion() Quaternion
	SetOffsetQuaternion(quat Quaternion)
	SetOffsetWorldPosition(pos Vector3)
	SetOffsetWorldRotation(rot Matrix3)
	SetOffsetWorldQuaternion(quat Quaternion)
	ClearOffset()
	IsOffset() bool
	Collide(other Geom, maxContacts uint16, flags int) []ContactGeom
	Collide2(other Geom, data interface{}, cb NearCallback)
	Next() Geom
	// contains filtered or unexported methods
}</pre>
		<p>
Geom represents rigid body geometry.
</p>

	</span>

	
	

	
	

	
	<h1 id="GeomBase" class="hdr pkg hdr-type"><a href="#GeomBase" title="permalink">»</a>&nbsp;type GeomBase <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type GeomBase uintptr</pre>
		<p>
GeomBase implements Geom, and is embedded by specific Geom types.
</p>

	</span>

	
	

	
	
		
		<h1 id="GeomBase.AABB" class="hdr pkg hdr-method"><a href="#GeomBase.AABB" title="permalink">»</a>&nbsp;func (g GeomBase) AABB() AABB <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) AABB() AABB</pre>
			<p>
AABB returns the axis-aligned bounding box.
</p>

		</span>
	
		
		<h1 id="GeomBase.Body" class="hdr pkg hdr-method"><a href="#GeomBase.Body" title="permalink">»</a>&nbsp;func (g GeomBase) Body() Body <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Body() Body</pre>
			<p>
Body returns the body associated with the geometry.
</p>

		</span>
	
		
		<h1 id="GeomBase.CategoryBits" class="hdr pkg hdr-method"><a href="#GeomBase.CategoryBits" title="permalink">»</a>&nbsp;func (g GeomBase) CategoryBits() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) CategoryBits() int</pre>
			<p>
CategoryBits returns the category bitfield.
</p>

		</span>
	
		
		<h1 id="GeomBase.Class" class="hdr pkg hdr-method"><a href="#GeomBase.Class" title="permalink">»</a>&nbsp;func (g GeomBase) Class() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Class() int</pre>
			<p>
Class returns the geometry class.
</p>

		</span>
	
		
		<h1 id="GeomBase.ClearOffset" class="hdr pkg hdr-method"><a href="#GeomBase.ClearOffset" title="permalink">»</a>&nbsp;func (g GeomBase) ClearOffset() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) ClearOffset()</pre>
			<p>
ClearOffset removes the body offset.
</p>

		</span>
	
		
		<h1 id="GeomBase.Collide" class="hdr pkg hdr-method"><a href="#GeomBase.Collide" title="permalink">»</a>&nbsp;func (g GeomBase) Collide(other Geom, maxContacts uint16, flags int) []ContactGeom <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Collide(other Geom, maxContacts uint16, flags int) []ContactGeom</pre>
			<p>
Collide tests for collision with the given geometry and returns a list of
contact points.
</p>

		</span>
	
		
		<h1 id="GeomBase.Collide2" class="hdr pkg hdr-method"><a href="#GeomBase.Collide2" title="permalink">»</a>&nbsp;func (g GeomBase) Collide2(other Geom, data interface{}, cb NearCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Collide2(other Geom, data interface{}, cb NearCallback)</pre>
			<p>
Collide2 tests for collision with the given geometry, applying cb for each
contact.
</p>

		</span>
	
		
		<h1 id="GeomBase.CollideBits" class="hdr pkg hdr-method"><a href="#GeomBase.CollideBits" title="permalink">»</a>&nbsp;func (g GeomBase) CollideBits() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) CollideBits() int</pre>
			<p>
CollideBits returns the collide bitfield.
</p>

		</span>
	
		
		<h1 id="GeomBase.Data" class="hdr pkg hdr-method"><a href="#GeomBase.Data" title="permalink">»</a>&nbsp;func (g GeomBase) Data() interface{} <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Data() interface{}</pre>
			<p>
Data returns the user-specified data associated with the geometry.
</p>

		</span>
	
		
		<h1 id="GeomBase.Destroy" class="hdr pkg hdr-method"><a href="#GeomBase.Destroy" title="permalink">»</a>&nbsp;func (g GeomBase) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Destroy()</pre>
			<p>
Destroy destroys the GeomBase.
</p>

		</span>
	
		
		<h1 id="GeomBase.Enabled" class="hdr pkg hdr-method"><a href="#GeomBase.Enabled" title="permalink">»</a>&nbsp;func (g GeomBase) Enabled() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Enabled() bool</pre>
			<p>
Enabled returns whether the geometry is enabled.
</p>

		</span>
	
		
		<h1 id="GeomBase.IsOffset" class="hdr pkg hdr-method"><a href="#GeomBase.IsOffset" title="permalink">»</a>&nbsp;func (g GeomBase) IsOffset() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) IsOffset() bool</pre>
			<p>
IsOffset returns whether a body offset has been created.
</p>

		</span>
	
		
		<h1 id="GeomBase.IsSpace" class="hdr pkg hdr-method"><a href="#GeomBase.IsSpace" title="permalink">»</a>&nbsp;func (g GeomBase) IsSpace() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) IsSpace() bool</pre>
			<p>
IsSpace returns whether the geometry is a space.
</p>

		</span>
	
		
		<h1 id="GeomBase.Next" class="hdr pkg hdr-method"><a href="#GeomBase.Next" title="permalink">»</a>&nbsp;func (g GeomBase) Next() Geom <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Next() Geom</pre>
			<p>
Next returns the next geometry.
</p>

		</span>
	
		
		<h1 id="GeomBase.OffsetPosition" class="hdr pkg hdr-method"><a href="#GeomBase.OffsetPosition" title="permalink">»</a>&nbsp;func (g GeomBase) OffsetPosition() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) OffsetPosition() Vector3</pre>
			<p>
OffsetPosition returns the position offset from the body.
</p>

		</span>
	
		
		<h1 id="GeomBase.OffsetQuaternion" class="hdr pkg hdr-method"><a href="#GeomBase.OffsetQuaternion" title="permalink">»</a>&nbsp;func (g GeomBase) OffsetQuaternion() Quaternion <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) OffsetQuaternion() Quaternion</pre>
			<p>
OffsetQuaternion returns the orientation offset from the body represented by
a quaternion.
</p>

		</span>
	
		
		<h1 id="GeomBase.OffsetRotation" class="hdr pkg hdr-method"><a href="#GeomBase.OffsetRotation" title="permalink">»</a>&nbsp;func (g GeomBase) OffsetRotation() Matrix3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) OffsetRotation() Matrix3</pre>
			<p>
OffsetRotation returns the orientation offset from the body represented by a
rotation matrix.
</p>

		</span>
	
		
		<h1 id="GeomBase.PosRelPoint" class="hdr pkg hdr-method"><a href="#GeomBase.PosRelPoint" title="permalink">»</a>&nbsp;func (g GeomBase) PosRelPoint(pos Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) PosRelPoint(pos Vector3) Vector3</pre>
			<p>
PosRelPoint returns the position in geometry coordinates of a point in world
coordinates.
</p>

		</span>
	
		
		<h1 id="GeomBase.Position" class="hdr pkg hdr-method"><a href="#GeomBase.Position" title="permalink">»</a>&nbsp;func (g GeomBase) Position() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Position() Vector3</pre>
			<p>
Position returns the position.
</p>

		</span>
	
		
		<h1 id="GeomBase.Quaternion" class="hdr pkg hdr-method"><a href="#GeomBase.Quaternion" title="permalink">»</a>&nbsp;func (g GeomBase) Quaternion() Quaternion <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Quaternion() Quaternion</pre>
			<p>
Quaternion returns the orientation represented by a quaternion.
</p>

		</span>
	
		
		<h1 id="GeomBase.RelPointPos" class="hdr pkg hdr-method"><a href="#GeomBase.RelPointPos" title="permalink">»</a>&nbsp;func (g GeomBase) RelPointPos(pt Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) RelPointPos(pt Vector3) Vector3</pre>
			<p>
RelPointPos returns the position in world coordinates of a point in geometry
coordinates.
</p>

		</span>
	
		
		<h1 id="GeomBase.Rotation" class="hdr pkg hdr-method"><a href="#GeomBase.Rotation" title="permalink">»</a>&nbsp;func (g GeomBase) Rotation() Matrix3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Rotation() Matrix3</pre>
			<p>
Rotation returns the orientation represented by a rotation matrix.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetBody" class="hdr pkg hdr-method"><a href="#GeomBase.SetBody" title="permalink">»</a>&nbsp;func (g GeomBase) SetBody(body Body) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetBody(body Body)</pre>
			<p>
SetBody sets the associated body.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetCategoryBits" class="hdr pkg hdr-method"><a href="#GeomBase.SetCategoryBits" title="permalink">»</a>&nbsp;func (g GeomBase) SetCategoryBits(bits int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetCategoryBits(bits int)</pre>
			<p>
SetCategoryBits sets the category bitfield.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetCollideBits" class="hdr pkg hdr-method"><a href="#GeomBase.SetCollideBits" title="permalink">»</a>&nbsp;func (g GeomBase) SetCollideBits(bits int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetCollideBits(bits int)</pre>
			<p>
SetCollideBits sets the collide bitfield.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetData" class="hdr pkg hdr-method"><a href="#GeomBase.SetData" title="permalink">»</a>&nbsp;func (g GeomBase) SetData(data interface{}) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetData(data interface{})</pre>
			<p>
SetData associates user-specified data with the geometry.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetEnabled" class="hdr pkg hdr-method"><a href="#GeomBase.SetEnabled" title="permalink">»</a>&nbsp;func (g GeomBase) SetEnabled(isEnabled bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetEnabled(isEnabled bool)</pre>
			<p>
SetEnabled sets whether the geometry is enabled.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetOffsetPosition" class="hdr pkg hdr-method"><a href="#GeomBase.SetOffsetPosition" title="permalink">»</a>&nbsp;func (g GeomBase) SetOffsetPosition(pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetOffsetPosition(pos Vector3)</pre>
			<p>
SetOffsetPosition sets the position offset from the body.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetOffsetQuaternion" class="hdr pkg hdr-method"><a href="#GeomBase.SetOffsetQuaternion" title="permalink">»</a>&nbsp;func (g GeomBase) SetOffsetQuaternion(quat Quaternion) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetOffsetQuaternion(quat Quaternion)</pre>
			<p>
SetOffsetQuaternion sets the offset from the body orientation represented by
a quaternion.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetOffsetRotation" class="hdr pkg hdr-method"><a href="#GeomBase.SetOffsetRotation" title="permalink">»</a>&nbsp;func (g GeomBase) SetOffsetRotation(rot Matrix3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetOffsetRotation(rot Matrix3)</pre>
			<p>
SetOffsetRotation sets the orientation offset from the body represented by a
rotation matrix.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetOffsetWorldPosition" class="hdr pkg hdr-method"><a href="#GeomBase.SetOffsetWorldPosition" title="permalink">»</a>&nbsp;func (g GeomBase) SetOffsetWorldPosition(pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetOffsetWorldPosition(pos Vector3)</pre>
			<p>
SetOffsetWorldPosition sets the offset to the body position such that the
geom&#39;s world position is pos.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetOffsetWorldQuaternion" class="hdr pkg hdr-method"><a href="#GeomBase.SetOffsetWorldQuaternion" title="permalink">»</a>&nbsp;func (g GeomBase) SetOffsetWorldQuaternion(quat Quaternion) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetOffsetWorldQuaternion(quat Quaternion)</pre>
			<p>
SetOffsetWorldQuaternion sets the offset to the body orientation such that
the geom&#39;s world orientation is represented by the quaternion quat.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetOffsetWorldRotation" class="hdr pkg hdr-method"><a href="#GeomBase.SetOffsetWorldRotation" title="permalink">»</a>&nbsp;func (g GeomBase) SetOffsetWorldRotation(rot Matrix3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetOffsetWorldRotation(rot Matrix3)</pre>
			<p>
SetOffsetWorldRotation sets the offset to the body orientation such that the
geom&#39;s world orientation is represented by the matrix rot.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetPosition" class="hdr pkg hdr-method"><a href="#GeomBase.SetPosition" title="permalink">»</a>&nbsp;func (g GeomBase) SetPosition(pos Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetPosition(pos Vector3)</pre>
			<p>
SetPosition sets the position.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetQuaternion" class="hdr pkg hdr-method"><a href="#GeomBase.SetQuaternion" title="permalink">»</a>&nbsp;func (g GeomBase) SetQuaternion(quat Quaternion) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetQuaternion(quat Quaternion)</pre>
			<p>
SetQuaternion sets the orientation represented by a quaternion.
</p>

		</span>
	
		
		<h1 id="GeomBase.SetRotation" class="hdr pkg hdr-method"><a href="#GeomBase.SetRotation" title="permalink">»</a>&nbsp;func (g GeomBase) SetRotation(rot Matrix3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) SetRotation(rot Matrix3)</pre>
			<p>
SetRotation sets the orientation represented by a rotation matrix.
</p>

		</span>
	
		
		<h1 id="GeomBase.Space" class="hdr pkg hdr-method"><a href="#GeomBase.Space" title="permalink">»</a>&nbsp;func (g GeomBase) Space() Space <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) Space() Space</pre>
			<p>
Space returns the containing space.
</p>

		</span>
	
		
		<h1 id="GeomBase.VectorFromWorld" class="hdr pkg hdr-method"><a href="#GeomBase.VectorFromWorld" title="permalink">»</a>&nbsp;func (g GeomBase) VectorFromWorld(wld Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) VectorFromWorld(wld Vector3) Vector3</pre>
			<p>
VectorFromWorld converts a vector in world coordinates to geometry
coordinates.
</p>

		</span>
	
		
		<h1 id="GeomBase.VectorToWorld" class="hdr pkg hdr-method"><a href="#GeomBase.VectorToWorld" title="permalink">»</a>&nbsp;func (g GeomBase) VectorToWorld(vec Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g GeomBase) VectorToWorld(vec Vector3) Vector3</pre>
			<p>
VectorToWorld converts a vector in geometry coordinates to world
coordinates.
</p>

		</span>
	

	
	<h1 id="HashSpace" class="hdr pkg hdr-type"><a href="#HashSpace" title="permalink">»</a>&nbsp;type HashSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type HashSpace struct {
	SpaceBase
}</pre>
		<p>
HashSpace represents a hash space.
</p>

	</span>

	
	

	
	
		
		<h1 id="HashSpace.Levels" class="hdr pkg hdr-method"><a href="#HashSpace.Levels" title="permalink">»</a>&nbsp;func (s HashSpace) Levels() (int, int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s HashSpace) Levels() (int, int)</pre>
			<p>
Levels returns the minimum and maximum levels.
</p>

		</span>
	
		
		<h1 id="HashSpace.SetLevels" class="hdr pkg hdr-method"><a href="#HashSpace.SetLevels" title="permalink">»</a>&nbsp;func (s HashSpace) SetLevels(min, max int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s HashSpace) SetLevels(min, max int)</pre>
			<p>
SetLevels sets the minimum and maximum levels.
</p>

		</span>
	

	
	<h1 id="Heightfield" class="hdr pkg hdr-type"><a href="#Heightfield" title="permalink">»</a>&nbsp;type Heightfield <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Heightfield struct {
	GeomBase
}</pre>
		<p>
Heightfield is a geometry representing a heightfield.
</p>

	</span>

	
	

	
	
		
		<h1 id="Heightfield.Build" class="hdr pkg hdr-method"><a href="#Heightfield.Build" title="permalink">»</a>&nbsp;func (h Heightfield) Build(data HeightfieldData, heightSamples Matrix,
	width, depth, scale, offset, thickness float64, doWrap bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (h Heightfield) Build(data HeightfieldData, heightSamples Matrix,
	width, depth, scale, offset, thickness float64, doWrap bool)</pre>
			<p>
Build builds a heightfield data set.
</p>

		</span>
	
		
		<h1 id="Heightfield.HeightfieldData" class="hdr pkg hdr-method"><a href="#Heightfield.HeightfieldData" title="permalink">»</a>&nbsp;func (h Heightfield) HeightfieldData() HeightfieldData <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (h Heightfield) HeightfieldData() HeightfieldData</pre>
			<p>
HeightfieldData returns the data set associated with the heightfield.
</p>

		</span>
	
		
		<h1 id="Heightfield.SetBounds" class="hdr pkg hdr-method"><a href="#Heightfield.SetBounds" title="permalink">»</a>&nbsp;func (h Heightfield) SetBounds(data HeightfieldData, minHeight, maxHeight float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (h Heightfield) SetBounds(data HeightfieldData, minHeight, maxHeight float64)</pre>
			<p>
SetBounds sets the minimum and maximum height.
</p>

		</span>
	
		
		<h1 id="Heightfield.SetHeightfieldData" class="hdr pkg hdr-method"><a href="#Heightfield.SetHeightfieldData" title="permalink">»</a>&nbsp;func (h Heightfield) SetHeightfieldData(data HeightfieldData) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (h Heightfield) SetHeightfieldData(data HeightfieldData)</pre>
			<p>
SetHeightfieldData associates a data set to the heightfield.
</p>

		</span>
	

	
	<h1 id="HeightfieldData" class="hdr pkg hdr-type"><a href="#HeightfieldData" title="permalink">»</a>&nbsp;type HeightfieldData <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type HeightfieldData uintptr</pre>
		<p>
HeightfieldData represents heightfield data.
</p>

	</span>

	
	
		<h1 id="NewHeightfieldData" class="hdr pkg hdr-function"><a href="#NewHeightfieldData" title="permalink">»</a>&nbsp;func NewHeightfieldData() HeightfieldData <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewHeightfieldData() HeightfieldData</pre>
			<p>
NewHeightfieldData returns a new HeightfieldData instance.
</p>

		</span>
	

	
	
		
		<h1 id="HeightfieldData.Destroy" class="hdr pkg hdr-method"><a href="#HeightfieldData.Destroy" title="permalink">»</a>&nbsp;func (h *HeightfieldData) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (h *HeightfieldData) Destroy()</pre>
			<p>
Destroy destroys the heightfield data.
</p>

		</span>
	

	
	<h1 id="Hinge2Joint" class="hdr pkg hdr-type"><a href="#Hinge2Joint" title="permalink">»</a>&nbsp;type Hinge2Joint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Hinge2Joint struct {
	JointBase
}</pre>
		<p>
Hinge2Joint represents two hinge joints in series.
</p>

	</span>

	
	

	
	
		
		<h1 id="Hinge2Joint.AddTorques" class="hdr pkg hdr-method"><a href="#Hinge2Joint.AddTorques" title="permalink">»</a>&nbsp;func (j Hinge2Joint) AddTorques(torque1, torque2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) AddTorques(torque1, torque2 float64)</pre>
			<p>
AddTorques adds torques to the joint.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Anchor" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Anchor" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Anchor() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Anchor() Vector3</pre>
			<p>
Anchor returns the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Anchor2" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Anchor2" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Angle1" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Angle1" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Angle1() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Angle1() float64</pre>
			<p>
Angle1 returns the first angle.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Angle1Rate" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Angle1Rate" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Angle1Rate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Angle1Rate() float64</pre>
			<p>
Angle1Rate returns the first angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Angle2" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Angle2" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Angle2() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Angle2() float64</pre>
			<p>
Angle2 returns the second angle.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Angle2Rate" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Angle2Rate" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Angle2Rate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Angle2Rate() float64</pre>
			<p>
Angle2Rate returns the second angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Axis1" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Axis1" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Axis1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Axis1() Vector3</pre>
			<p>
Axis1 returns the first axis.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Axis2" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Axis2" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Axis2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Axis2() Vector3</pre>
			<p>
Axis2 returns the second axis.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.Param" class="hdr pkg hdr-method"><a href="#Hinge2Joint.Param" title="permalink">»</a>&nbsp;func (j Hinge2Joint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.SetAnchor" class="hdr pkg hdr-method"><a href="#Hinge2Joint.SetAnchor" title="permalink">»</a>&nbsp;func (j Hinge2Joint) SetAnchor(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) SetAnchor(pt Vector3)</pre>
			<p>
SetAnchor sets the anchor point.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.SetAxis1" class="hdr pkg hdr-method"><a href="#Hinge2Joint.SetAxis1" title="permalink">»</a>&nbsp;func (j Hinge2Joint) SetAxis1(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) SetAxis1(axis Vector3)</pre>
			<p>
SetAxis1 sets the first axis.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.SetAxis2" class="hdr pkg hdr-method"><a href="#Hinge2Joint.SetAxis2" title="permalink">»</a>&nbsp;func (j Hinge2Joint) SetAxis2(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) SetAxis2(axis Vector3)</pre>
			<p>
SetAxis2 sets the second axis.
</p>

		</span>
	
		
		<h1 id="Hinge2Joint.SetParam" class="hdr pkg hdr-method"><a href="#Hinge2Joint.SetParam" title="permalink">»</a>&nbsp;func (j Hinge2Joint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Hinge2Joint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="HingeJoint" class="hdr pkg hdr-type"><a href="#HingeJoint" title="permalink">»</a>&nbsp;type HingeJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type HingeJoint struct {
	JointBase
}</pre>
		<p>
HingeJoint represents a hinge joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="HingeJoint.AddTorque" class="hdr pkg hdr-method"><a href="#HingeJoint.AddTorque" title="permalink">»</a>&nbsp;func (j HingeJoint) AddTorque(torque float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) AddTorque(torque float64)</pre>
			<p>
AddTorque adds a torque to the joint.
</p>

		</span>
	
		
		<h1 id="HingeJoint.Anchor" class="hdr pkg hdr-method"><a href="#HingeJoint.Anchor" title="permalink">»</a>&nbsp;func (j HingeJoint) Anchor() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) Anchor() Vector3</pre>
			<p>
Anchor returns the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="HingeJoint.Anchor2" class="hdr pkg hdr-method"><a href="#HingeJoint.Anchor2" title="permalink">»</a>&nbsp;func (j HingeJoint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="HingeJoint.Angle" class="hdr pkg hdr-method"><a href="#HingeJoint.Angle" title="permalink">»</a>&nbsp;func (j HingeJoint) Angle() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) Angle() float64</pre>
			<p>
Angle returns the joint angle.
</p>

		</span>
	
		
		<h1 id="HingeJoint.AngleRate" class="hdr pkg hdr-method"><a href="#HingeJoint.AngleRate" title="permalink">»</a>&nbsp;func (j HingeJoint) AngleRate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) AngleRate() float64</pre>
			<p>
AngleRate returns the joint angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="HingeJoint.Axis" class="hdr pkg hdr-method"><a href="#HingeJoint.Axis" title="permalink">»</a>&nbsp;func (j HingeJoint) Axis() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) Axis() Vector3</pre>
			<p>
Axis returns the hinge axis.
</p>

		</span>
	
		
		<h1 id="HingeJoint.Param" class="hdr pkg hdr-method"><a href="#HingeJoint.Param" title="permalink">»</a>&nbsp;func (j HingeJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="HingeJoint.SetAnchor" class="hdr pkg hdr-method"><a href="#HingeJoint.SetAnchor" title="permalink">»</a>&nbsp;func (j HingeJoint) SetAnchor(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) SetAnchor(pt Vector3)</pre>
			<p>
SetAnchor sets the anchor point.
</p>

		</span>
	
		
		<h1 id="HingeJoint.SetAnchorDelta" class="hdr pkg hdr-method"><a href="#HingeJoint.SetAnchorDelta" title="permalink">»</a>&nbsp;func (j HingeJoint) SetAnchorDelta(pt, delta Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) SetAnchorDelta(pt, delta Vector3)</pre>
			<p>
SetAnchorDelta sets the hinge anchor delta.
</p>

		</span>
	
		
		<h1 id="HingeJoint.SetAxis" class="hdr pkg hdr-method"><a href="#HingeJoint.SetAxis" title="permalink">»</a>&nbsp;func (j HingeJoint) SetAxis(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) SetAxis(axis Vector3)</pre>
			<p>
SetAxis sets the hinge axis.
</p>

		</span>
	
		
		<h1 id="HingeJoint.SetAxisOffset" class="hdr pkg hdr-method"><a href="#HingeJoint.SetAxisOffset" title="permalink">»</a>&nbsp;func (j HingeJoint) SetAxisOffset(axis Vector3, angle float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) SetAxisOffset(axis Vector3, angle float64)</pre>
			<p>
SetAxisOffset set the hinge axis as if the 2 bodies were already at angle appart.
</p>

		</span>
	
		
		<h1 id="HingeJoint.SetParam" class="hdr pkg hdr-method"><a href="#HingeJoint.SetParam" title="permalink">»</a>&nbsp;func (j HingeJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j HingeJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="Joint" class="hdr pkg hdr-type"><a href="#Joint" title="permalink">»</a>&nbsp;type Joint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Joint interface {
	Destroy()
	SetData(data interface{})
	Data() interface{}
	NumBodies() int
	Attach(body1, body2 Body)
	SetEnabled(isEnabled bool)
	Enabled() bool
	Type() int
	Body(index int) Body
	SetFeedback(f *JointFeedback)
	Feedback() *JointFeedback
	// contains filtered or unexported methods
}</pre>
		<p>
Joint represents a joint.
</p>

	</span>

	
	

	
	

	
	<h1 id="JointBase" class="hdr pkg hdr-type"><a href="#JointBase" title="permalink">»</a>&nbsp;type JointBase <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type JointBase uintptr</pre>
		<p>
JointBase implements Joint, and is embedded by specific Joint types.
</p>

	</span>

	
	

	
	
		
		<h1 id="JointBase.Attach" class="hdr pkg hdr-method"><a href="#JointBase.Attach" title="permalink">»</a>&nbsp;func (j JointBase) Attach(body1, body2 Body) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) Attach(body1, body2 Body)</pre>
			<p>
Attach attaches two bodies with the joint.
</p>

		</span>
	
		
		<h1 id="JointBase.Body" class="hdr pkg hdr-method"><a href="#JointBase.Body" title="permalink">»</a>&nbsp;func (j JointBase) Body(index int) Body <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) Body(index int) Body</pre>
			<p>
Body returns the attached body, specified by index.
</p>

		</span>
	
		
		<h1 id="JointBase.Data" class="hdr pkg hdr-method"><a href="#JointBase.Data" title="permalink">»</a>&nbsp;func (j JointBase) Data() interface{} <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) Data() interface{}</pre>
			<p>
Data returns the user-specified data associated with the joint.
</p>

		</span>
	
		
		<h1 id="JointBase.Destroy" class="hdr pkg hdr-method"><a href="#JointBase.Destroy" title="permalink">»</a>&nbsp;func (j JointBase) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) Destroy()</pre>
			<p>
Destroy destroys the joint base.
</p>

		</span>
	
		
		<h1 id="JointBase.Enabled" class="hdr pkg hdr-method"><a href="#JointBase.Enabled" title="permalink">»</a>&nbsp;func (j JointBase) Enabled() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) Enabled() bool</pre>
			<p>
Enabled returns whether the joint is enabled.
</p>

		</span>
	
		
		<h1 id="JointBase.Feedback" class="hdr pkg hdr-method"><a href="#JointBase.Feedback" title="permalink">»</a>&nbsp;func (j JointBase) Feedback() *JointFeedback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) Feedback() *JointFeedback</pre>
			<p>
Feedback returns the feedback forces and torques.
</p>

		</span>
	
		
		<h1 id="JointBase.NumBodies" class="hdr pkg hdr-method"><a href="#JointBase.NumBodies" title="permalink">»</a>&nbsp;func (j JointBase) NumBodies() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) NumBodies() int</pre>
			<p>
NumBodies returns the number of attached bodies.
</p>

		</span>
	
		
		<h1 id="JointBase.SetData" class="hdr pkg hdr-method"><a href="#JointBase.SetData" title="permalink">»</a>&nbsp;func (j JointBase) SetData(data interface{}) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) SetData(data interface{})</pre>
			<p>
SetData associates user-specified data with the joint.
</p>

		</span>
	
		
		<h1 id="JointBase.SetEnabled" class="hdr pkg hdr-method"><a href="#JointBase.SetEnabled" title="permalink">»</a>&nbsp;func (j JointBase) SetEnabled(isEnabled bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) SetEnabled(isEnabled bool)</pre>
			<p>
SetEnabled sets whether the joint is enabled.
</p>

		</span>
	
		
		<h1 id="JointBase.SetFeedback" class="hdr pkg hdr-method"><a href="#JointBase.SetFeedback" title="permalink">»</a>&nbsp;func (j JointBase) SetFeedback(f *JointFeedback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) SetFeedback(f *JointFeedback)</pre>
			<p>
SetFeedback sets the feedback forces and torques.
</p>

		</span>
	
		
		<h1 id="JointBase.Type" class="hdr pkg hdr-method"><a href="#JointBase.Type" title="permalink">»</a>&nbsp;func (j JointBase) Type() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j JointBase) Type() int</pre>
			<p>
Type returns the joint type.
</p>

		</span>
	

	
	<h1 id="JointFeedback" class="hdr pkg hdr-type"><a href="#JointFeedback" title="permalink">»</a>&nbsp;type JointFeedback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type JointFeedback struct {
	Force1	Vector3	// force applied to body 1
	Torque1	Vector3	// torque applied to body 1
	Force2	Vector3	// force applied to body 2
	Torque2	Vector3	// torque applied to body 2
}</pre>
		<p>
JointFeedback represents feedback forces and torques associated with a
joint.
</p>

	</span>

	
	

	
	

	
	<h1 id="JointGroup" class="hdr pkg hdr-type"><a href="#JointGroup" title="permalink">»</a>&nbsp;type JointGroup <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type JointGroup uintptr</pre>
		<p>
JointGroup represents a group of joints.
</p>

	</span>

	
	
		<h1 id="NewJointGroup" class="hdr pkg hdr-function"><a href="#NewJointGroup" title="permalink">»</a>&nbsp;func NewJointGroup(maxJoints int) JointGroup <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewJointGroup(maxJoints int) JointGroup</pre>
			<p>
NewJointGroup returns a new JointGroup instance.
</p>

		</span>
	

	
	
		
		<h1 id="JointGroup.Destroy" class="hdr pkg hdr-method"><a href="#JointGroup.Destroy" title="permalink">»</a>&nbsp;func (g JointGroup) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g JointGroup) Destroy()</pre>
			<p>
Destroy destroys the joint group.
</p>

		</span>
	
		
		<h1 id="JointGroup.Empty" class="hdr pkg hdr-method"><a href="#JointGroup.Empty" title="permalink">»</a>&nbsp;func (g JointGroup) Empty() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g JointGroup) Empty()</pre>
			<p>
Empty removes all joints from the group.
</p>

		</span>
	

	
	<h1 id="LMotorJoint" class="hdr pkg hdr-type"><a href="#LMotorJoint" title="permalink">»</a>&nbsp;type LMotorJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type LMotorJoint struct {
	JointBase
}</pre>
		<p>
LMotorJoint represents a linear motor joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="LMotorJoint.Axis" class="hdr pkg hdr-method"><a href="#LMotorJoint.Axis" title="permalink">»</a>&nbsp;func (j LMotorJoint) Axis(num int) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j LMotorJoint) Axis(num int) Vector3</pre>
			<p>
Axis returns the given axis.
</p>

		</span>
	
		
		<h1 id="LMotorJoint.NumAxes" class="hdr pkg hdr-method"><a href="#LMotorJoint.NumAxes" title="permalink">»</a>&nbsp;func (j LMotorJoint) NumAxes() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j LMotorJoint) NumAxes() int</pre>
			<p>
NumAxes returns the number of axes.
</p>

		</span>
	
		
		<h1 id="LMotorJoint.Param" class="hdr pkg hdr-method"><a href="#LMotorJoint.Param" title="permalink">»</a>&nbsp;func (j LMotorJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j LMotorJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="LMotorJoint.SetAxis" class="hdr pkg hdr-method"><a href="#LMotorJoint.SetAxis" title="permalink">»</a>&nbsp;func (j LMotorJoint) SetAxis(num, rel int, axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j LMotorJoint) SetAxis(num, rel int, axis Vector3)</pre>
			<p>
SetAxis sets the given axis relative to a body (1 or 2) or none (0).
</p>

		</span>
	
		
		<h1 id="LMotorJoint.SetNumAxes" class="hdr pkg hdr-method"><a href="#LMotorJoint.SetNumAxes" title="permalink">»</a>&nbsp;func (j LMotorJoint) SetNumAxes(num int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j LMotorJoint) SetNumAxes(num int)</pre>
			<p>
SetNumAxes sets the number of axes.
</p>

		</span>
	
		
		<h1 id="LMotorJoint.SetParam" class="hdr pkg hdr-method"><a href="#LMotorJoint.SetParam" title="permalink">»</a>&nbsp;func (j LMotorJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j LMotorJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="Mass" class="hdr pkg hdr-type"><a href="#Mass" title="permalink">»</a>&nbsp;type Mass <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Mass struct {
	Center	Vector3
	Inertia	Matrix3
	Mass	float64
}</pre>
		<p>
Mass represents object mass properties.
</p>

	</span>

	
	
		<h1 id="NewMass" class="hdr pkg hdr-function"><a href="#NewMass" title="permalink">»</a>&nbsp;func NewMass() *Mass <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewMass() *Mass</pre>
			<p>
NewMass returns a new Mass instance.
</p>

		</span>
	

	
	
		
		<h1 id="Mass.Add" class="hdr pkg hdr-method"><a href="#Mass.Add" title="permalink">»</a>&nbsp;func (m *Mass) Add(other *Mass) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) Add(other *Mass)</pre>
			<p>
Add adds the other mass to this mass.
</p>

		</span>
	
		
		<h1 id="Mass.Adjust" class="hdr pkg hdr-method"><a href="#Mass.Adjust" title="permalink">»</a>&nbsp;func (m *Mass) Adjust(mass float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) Adjust(mass float64)</pre>
			<p>
Adjust sets parameters based on the given total mass.
</p>

		</span>
	
		
		<h1 id="Mass.Check" class="hdr pkg hdr-method"><a href="#Mass.Check" title="permalink">»</a>&nbsp;func (m *Mass) Check() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) Check() bool</pre>
			<p>
Check returns whether the mass&#39;s parameter values are valid.
</p>

		</span>
	
		
		<h1 id="Mass.Rotate" class="hdr pkg hdr-method"><a href="#Mass.Rotate" title="permalink">»</a>&nbsp;func (m *Mass) Rotate(rot Matrix3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) Rotate(rot Matrix3)</pre>
			<p>
Rotate rotates the mass by rot.
</p>

		</span>
	
		
		<h1 id="Mass.SetBox" class="hdr pkg hdr-method"><a href="#Mass.SetBox" title="permalink">»</a>&nbsp;func (m *Mass) SetBox(density float64, lens Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetBox(density float64, lens Vector3)</pre>
			<p>
SetBox sets the mass for a box of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetBoxTotal" class="hdr pkg hdr-method"><a href="#Mass.SetBoxTotal" title="permalink">»</a>&nbsp;func (m *Mass) SetBoxTotal(totalMass float64, lens Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetBoxTotal(totalMass float64, lens Vector3)</pre>
			<p>
SetBoxTotal sets the mass for a box of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetCapsule" class="hdr pkg hdr-method"><a href="#Mass.SetCapsule" title="permalink">»</a>&nbsp;func (m *Mass) SetCapsule(density float64, direction int, radius, length float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetCapsule(density float64, direction int, radius, length float64)</pre>
			<p>
SetCapsule sets the mass for a capsule of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetCapsuleTotal" class="hdr pkg hdr-method"><a href="#Mass.SetCapsuleTotal" title="permalink">»</a>&nbsp;func (m *Mass) SetCapsuleTotal(totalMass float64, direction int, radius, length float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetCapsuleTotal(totalMass float64, direction int, radius, length float64)</pre>
			<p>
SetCapsuleTotal sets the mass for a capsule of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetCylinder" class="hdr pkg hdr-method"><a href="#Mass.SetCylinder" title="permalink">»</a>&nbsp;func (m *Mass) SetCylinder(density float64, direction int, radius, length float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetCylinder(density float64, direction int, radius, length float64)</pre>
			<p>
SetCylinder sets the mass for a cylinder of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetCylinderTotal" class="hdr pkg hdr-method"><a href="#Mass.SetCylinderTotal" title="permalink">»</a>&nbsp;func (m *Mass) SetCylinderTotal(totalMass float64, direction int, radius, length float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetCylinderTotal(totalMass float64, direction int, radius, length float64)</pre>
			<p>
SetCylinderTotal sets the mass for a cylinder of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetParams" class="hdr pkg hdr-method"><a href="#Mass.SetParams" title="permalink">»</a>&nbsp;func (m *Mass) SetParams(mass float64, com Vector3, inert Matrix3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetParams(mass float64, com Vector3, inert Matrix3)</pre>
			<p>
SetParams sets the mass parameters.
</p>

		</span>
	
		
		<h1 id="Mass.SetSphere" class="hdr pkg hdr-method"><a href="#Mass.SetSphere" title="permalink">»</a>&nbsp;func (m *Mass) SetSphere(density, radius float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetSphere(density, radius float64)</pre>
			<p>
SetSphere sets the mass for a sphere of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetSphereTotal" class="hdr pkg hdr-method"><a href="#Mass.SetSphereTotal" title="permalink">»</a>&nbsp;func (m *Mass) SetSphereTotal(totalMass, radius float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetSphereTotal(totalMass, radius float64)</pre>
			<p>
SetSphereTotal sets the mass for a sphere of given properties.
</p>

		</span>
	
		
		<h1 id="Mass.SetTriMesh" class="hdr pkg hdr-method"><a href="#Mass.SetTriMesh" title="permalink">»</a>&nbsp;func (m *Mass) SetTriMesh(density float64, mesh TriMesh) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetTriMesh(density float64, mesh TriMesh)</pre>
			<p>
SetTrimesh sets the mass for the given triangle mesh.
</p>

		</span>
	
		
		<h1 id="Mass.SetTriMeshTotal" class="hdr pkg hdr-method"><a href="#Mass.SetTriMeshTotal" title="permalink">»</a>&nbsp;func (m *Mass) SetTriMeshTotal(totalMass float64, mesh TriMesh) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetTriMeshTotal(totalMass float64, mesh TriMesh)</pre>
			<p>
SetTrimeshTotal sets the mass for the given triangle mesh.
</p>

		</span>
	
		
		<h1 id="Mass.SetZero" class="hdr pkg hdr-method"><a href="#Mass.SetZero" title="permalink">»</a>&nbsp;func (m *Mass) SetZero() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) SetZero()</pre>
			<p>
SetZero sets the mass to 0.
</p>

		</span>
	
		
		<h1 id="Mass.Translate" class="hdr pkg hdr-method"><a href="#Mass.Translate" title="permalink">»</a>&nbsp;func (m *Mass) Translate(vec Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Mass) Translate(vec Vector3)</pre>
			<p>
Translate translates the mass by vec.
</p>

		</span>
	

	
	<h1 id="Matrix" class="hdr pkg hdr-type"><a href="#Matrix" title="permalink">»</a>&nbsp;type Matrix <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Matrix [][]float64</pre>
		<p>
Matrix represents a double precision matrix.
</p>

	</span>

	
	
		<h1 id="NewMatrix" class="hdr pkg hdr-function"><a href="#NewMatrix" title="permalink">»</a>&nbsp;func NewMatrix(numRows, numCols, align int, vals ...float64) Matrix <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewMatrix(numRows, numCols, align int, vals ...float64) Matrix</pre>
			<p>
NewVector returns a new Matrix instance.
</p>

		</span>
	

	
	

	
	<h1 id="Matrix3" class="hdr pkg hdr-type"><a href="#Matrix3" title="permalink">»</a>&nbsp;type Matrix3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Matrix3 Matrix</pre>
		<p>
Matrix3 represents a 3x3 matrix.
</p>

	</span>

	
	
		<h1 id="NewMatrix3" class="hdr pkg hdr-function"><a href="#NewMatrix3" title="permalink">»</a>&nbsp;func NewMatrix3(vals ...float64) Matrix3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewMatrix3(vals ...float64) Matrix3</pre>
			<p>
NewMatrix3 returns a new Matrix3 instance.
</p>

		</span>
	

	
	

	
	<h1 id="Matrix4" class="hdr pkg hdr-type"><a href="#Matrix4" title="permalink">»</a>&nbsp;type Matrix4 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Matrix4 Matrix</pre>
		<p>
Matrix4 represents a 4x4 matrix.
</p>

	</span>

	
	
		<h1 id="NewMatrix4" class="hdr pkg hdr-function"><a href="#NewMatrix4" title="permalink">»</a>&nbsp;func NewMatrix4(vals ...float64) Matrix4 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewMatrix4(vals ...float64) Matrix4</pre>
			<p>
NewMatrix4 returns a new Matrix4 instance.
</p>

		</span>
	

	
	

	
	<h1 id="MovedCallback" class="hdr pkg hdr-type"><a href="#MovedCallback" title="permalink">»</a>&nbsp;type MovedCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type MovedCallback func(b Body)</pre>
		<p>
MovedCallback is called when the body has moved.
</p>

	</span>

	
	

	
	

	
	<h1 id="NearCallback" class="hdr pkg hdr-type"><a href="#NearCallback" title="permalink">»</a>&nbsp;type NearCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type NearCallback func(data interface{}, obj1, obj2 Geom)</pre>
		<p>
NearCallback is a callback type for handling potential object collisions.
</p>

	</span>

	
	

	
	

	
	<h1 id="NullJoint" class="hdr pkg hdr-type"><a href="#NullJoint" title="permalink">»</a>&nbsp;type NullJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type NullJoint struct {
	JointBase
}</pre>
		<p>
NullJoint represents a null joint.
</p>

	</span>

	
	

	
	

	
	<h1 id="PRJoint" class="hdr pkg hdr-type"><a href="#PRJoint" title="permalink">»</a>&nbsp;type PRJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type PRJoint struct {
	JointBase
}</pre>
		<p>
PRJoint represents a prismatic rotoide joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="PRJoint.AddTorque" class="hdr pkg hdr-method"><a href="#PRJoint.AddTorque" title="permalink">»</a>&nbsp;func (j PRJoint) AddTorque(torque float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) AddTorque(torque float64)</pre>
			<p>
AddTorque adds a torque to the joint.
</p>

		</span>
	
		
		<h1 id="PRJoint.Anchor" class="hdr pkg hdr-method"><a href="#PRJoint.Anchor" title="permalink">»</a>&nbsp;func (j PRJoint) Anchor() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) Anchor() Vector3</pre>
			<p>
Anchor returns the anchor point.
</p>

		</span>
	
		
		<h1 id="PRJoint.Angle" class="hdr pkg hdr-method"><a href="#PRJoint.Angle" title="permalink">»</a>&nbsp;func (j PRJoint) Angle() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) Angle() float64</pre>
			<p>
Angle returns the joint angle.
</p>

		</span>
	
		
		<h1 id="PRJoint.AngleRate" class="hdr pkg hdr-method"><a href="#PRJoint.AngleRate" title="permalink">»</a>&nbsp;func (j PRJoint) AngleRate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) AngleRate() float64</pre>
			<p>
AngleRate returns the joint angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="PRJoint.Axis1" class="hdr pkg hdr-method"><a href="#PRJoint.Axis1" title="permalink">»</a>&nbsp;func (j PRJoint) Axis1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) Axis1() Vector3</pre>
			<p>
Axis1 returns the first axis.
</p>

		</span>
	
		
		<h1 id="PRJoint.Axis2" class="hdr pkg hdr-method"><a href="#PRJoint.Axis2" title="permalink">»</a>&nbsp;func (j PRJoint) Axis2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) Axis2() Vector3</pre>
			<p>
Axis2 returns the second axis.
</p>

		</span>
	
		
		<h1 id="PRJoint.Param" class="hdr pkg hdr-method"><a href="#PRJoint.Param" title="permalink">»</a>&nbsp;func (j PRJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="PRJoint.Position" class="hdr pkg hdr-method"><a href="#PRJoint.Position" title="permalink">»</a>&nbsp;func (j PRJoint) Position() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) Position() float64</pre>
			<p>
Position returns the slider position.
</p>

		</span>
	
		
		<h1 id="PRJoint.PositionRate" class="hdr pkg hdr-method"><a href="#PRJoint.PositionRate" title="permalink">»</a>&nbsp;func (j PRJoint) PositionRate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) PositionRate() float64</pre>
			<p>
PositionRate returns the slider position&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="PRJoint.SetAnchor" class="hdr pkg hdr-method"><a href="#PRJoint.SetAnchor" title="permalink">»</a>&nbsp;func (j PRJoint) SetAnchor(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) SetAnchor(pt Vector3)</pre>
			<p>
SetAnchor sets the anchor point.
</p>

		</span>
	
		
		<h1 id="PRJoint.SetAxis1" class="hdr pkg hdr-method"><a href="#PRJoint.SetAxis1" title="permalink">»</a>&nbsp;func (j PRJoint) SetAxis1(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) SetAxis1(axis Vector3)</pre>
			<p>
SetAxis1 sets the first axis.
</p>

		</span>
	
		
		<h1 id="PRJoint.SetAxis2" class="hdr pkg hdr-method"><a href="#PRJoint.SetAxis2" title="permalink">»</a>&nbsp;func (j PRJoint) SetAxis2(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) SetAxis2(axis Vector3)</pre>
			<p>
SetAxis2 sets the second axis.
</p>

		</span>
	
		
		<h1 id="PRJoint.SetParam" class="hdr pkg hdr-method"><a href="#PRJoint.SetParam" title="permalink">»</a>&nbsp;func (j PRJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PRJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="PUJoint" class="hdr pkg hdr-type"><a href="#PUJoint" title="permalink">»</a>&nbsp;type PUJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type PUJoint struct {
	JointBase
}</pre>
		<p>
PUJoint represents a prismatic universal joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="PUJoint.Anchor" class="hdr pkg hdr-method"><a href="#PUJoint.Anchor" title="permalink">»</a>&nbsp;func (j PUJoint) Anchor() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Anchor() Vector3</pre>
			<p>
Anchor returns the anchor point.
</p>

		</span>
	
		
		<h1 id="PUJoint.Angle1" class="hdr pkg hdr-method"><a href="#PUJoint.Angle1" title="permalink">»</a>&nbsp;func (j PUJoint) Angle1() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Angle1() float64</pre>
			<p>
Angle1 returns the first angle.
</p>

		</span>
	
		
		<h1 id="PUJoint.Angle1Rate" class="hdr pkg hdr-method"><a href="#PUJoint.Angle1Rate" title="permalink">»</a>&nbsp;func (j PUJoint) Angle1Rate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Angle1Rate() float64</pre>
			<p>
Angle1Rate returns the first angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="PUJoint.Angle2" class="hdr pkg hdr-method"><a href="#PUJoint.Angle2" title="permalink">»</a>&nbsp;func (j PUJoint) Angle2() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Angle2() float64</pre>
			<p>
Angle2 returns the second angle.
</p>

		</span>
	
		
		<h1 id="PUJoint.Angle2Rate" class="hdr pkg hdr-method"><a href="#PUJoint.Angle2Rate" title="permalink">»</a>&nbsp;func (j PUJoint) Angle2Rate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Angle2Rate() float64</pre>
			<p>
Angle2Rate returns the second angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="PUJoint.Angles" class="hdr pkg hdr-method"><a href="#PUJoint.Angles" title="permalink">»</a>&nbsp;func (j PUJoint) Angles() (float64, float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Angles() (float64, float64)</pre>
			<p>
Angles returns the two joint angles.
</p>

		</span>
	
		
		<h1 id="PUJoint.Axis1" class="hdr pkg hdr-method"><a href="#PUJoint.Axis1" title="permalink">»</a>&nbsp;func (j PUJoint) Axis1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Axis1() Vector3</pre>
			<p>
Axis1 returns the first axis.
</p>

		</span>
	
		
		<h1 id="PUJoint.Axis2" class="hdr pkg hdr-method"><a href="#PUJoint.Axis2" title="permalink">»</a>&nbsp;func (j PUJoint) Axis2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Axis2() Vector3</pre>
			<p>
Axis2 returns the second axis.
</p>

		</span>
	
		
		<h1 id="PUJoint.Axis3" class="hdr pkg hdr-method"><a href="#PUJoint.Axis3" title="permalink">»</a>&nbsp;func (j PUJoint) Axis3() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Axis3() Vector3</pre>
			<p>
Axis3 returns the third (prismatic) axis.
</p>

		</span>
	
		
		<h1 id="PUJoint.Param" class="hdr pkg hdr-method"><a href="#PUJoint.Param" title="permalink">»</a>&nbsp;func (j PUJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="PUJoint.Position" class="hdr pkg hdr-method"><a href="#PUJoint.Position" title="permalink">»</a>&nbsp;func (j PUJoint) Position() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) Position() float64</pre>
			<p>
Position returns the joint position.
</p>

		</span>
	
		
		<h1 id="PUJoint.PositionRate" class="hdr pkg hdr-method"><a href="#PUJoint.PositionRate" title="permalink">»</a>&nbsp;func (j PUJoint) PositionRate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) PositionRate() float64</pre>
			<p>
PositionRate returns the joint position&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="PUJoint.SetAnchor" class="hdr pkg hdr-method"><a href="#PUJoint.SetAnchor" title="permalink">»</a>&nbsp;func (j PUJoint) SetAnchor(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) SetAnchor(pt Vector3)</pre>
			<p>
SetAnchor sets the anchor point.
</p>

		</span>
	
		
		<h1 id="PUJoint.SetAnchorOffset" class="hdr pkg hdr-method"><a href="#PUJoint.SetAnchorOffset" title="permalink">»</a>&nbsp;func (j PUJoint) SetAnchorOffset(pt, delta Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) SetAnchorOffset(pt, delta Vector3)</pre>
			<p>
SetAnchorOffset sets the anchor as if the 2 bodies were already delta appart.
</p>

		</span>
	
		
		<h1 id="PUJoint.SetAxis1" class="hdr pkg hdr-method"><a href="#PUJoint.SetAxis1" title="permalink">»</a>&nbsp;func (j PUJoint) SetAxis1(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) SetAxis1(axis Vector3)</pre>
			<p>
SetAxis1 sets the first axis.
</p>

		</span>
	
		
		<h1 id="PUJoint.SetAxis2" class="hdr pkg hdr-method"><a href="#PUJoint.SetAxis2" title="permalink">»</a>&nbsp;func (j PUJoint) SetAxis2(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) SetAxis2(axis Vector3)</pre>
			<p>
SetAxis2 sets the second axis.
</p>

		</span>
	
		
		<h1 id="PUJoint.SetAxis3" class="hdr pkg hdr-method"><a href="#PUJoint.SetAxis3" title="permalink">»</a>&nbsp;func (j PUJoint) SetAxis3(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) SetAxis3(axis Vector3)</pre>
			<p>
SetAxis3 sets the third (prismatic) axis.
</p>

		</span>
	
		
		<h1 id="PUJoint.SetParam" class="hdr pkg hdr-method"><a href="#PUJoint.SetParam" title="permalink">»</a>&nbsp;func (j PUJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PUJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="PistonJoint" class="hdr pkg hdr-type"><a href="#PistonJoint" title="permalink">»</a>&nbsp;type PistonJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type PistonJoint struct {
	JointBase
}</pre>
		<p>
PistonJoint represents a piston joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="PistonJoint.AddForce" class="hdr pkg hdr-method"><a href="#PistonJoint.AddForce" title="permalink">»</a>&nbsp;func (j PistonJoint) AddForce(force float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) AddForce(force float64)</pre>
			<p>
AddForce adds a force to the joint.
</p>

		</span>
	
		
		<h1 id="PistonJoint.Anchor2" class="hdr pkg hdr-method"><a href="#PistonJoint.Anchor2" title="permalink">»</a>&nbsp;func (j PistonJoint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="PistonJoint.Angle" class="hdr pkg hdr-method"><a href="#PistonJoint.Angle" title="permalink">»</a>&nbsp;func (j PistonJoint) Angle() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) Angle() float64</pre>
			<p>
Angle returns the joint angle.
</p>

		</span>
	
		
		<h1 id="PistonJoint.AngleRate" class="hdr pkg hdr-method"><a href="#PistonJoint.AngleRate" title="permalink">»</a>&nbsp;func (j PistonJoint) AngleRate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) AngleRate() float64</pre>
			<p>
AngleRate returns the joint angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="PistonJoint.Axis" class="hdr pkg hdr-method"><a href="#PistonJoint.Axis" title="permalink">»</a>&nbsp;func (j PistonJoint) Axis() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) Axis() Vector3</pre>
			<p>
Axis returns the piston axis.
</p>

		</span>
	
		
		<h1 id="PistonJoint.Param" class="hdr pkg hdr-method"><a href="#PistonJoint.Param" title="permalink">»</a>&nbsp;func (j PistonJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="PistonJoint.Position" class="hdr pkg hdr-method"><a href="#PistonJoint.Position" title="permalink">»</a>&nbsp;func (j PistonJoint) Position() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) Position() float64</pre>
			<p>
Position returns the piston position.
</p>

		</span>
	
		
		<h1 id="PistonJoint.PositionRate" class="hdr pkg hdr-method"><a href="#PistonJoint.PositionRate" title="permalink">»</a>&nbsp;func (j PistonJoint) PositionRate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) PositionRate() float64</pre>
			<p>
PositionRate returns the piston position&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="PistonJoint.SetAnchor" class="hdr pkg hdr-method"><a href="#PistonJoint.SetAnchor" title="permalink">»</a>&nbsp;func (j PistonJoint) SetAnchor(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) SetAnchor(pt Vector3)</pre>
			<p>
SetAnchor sets the anchor point.
</p>

		</span>
	
		
		<h1 id="PistonJoint.SetAnchorOffset" class="hdr pkg hdr-method"><a href="#PistonJoint.SetAnchorOffset" title="permalink">»</a>&nbsp;func (j PistonJoint) SetAnchorOffset(pt, delta Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) SetAnchorOffset(pt, delta Vector3)</pre>
			<p>
SetAnchorOffset sets the anchor as if the 2 bodies were already delta appart.
</p>

		</span>
	
		
		<h1 id="PistonJoint.SetAxis" class="hdr pkg hdr-method"><a href="#PistonJoint.SetAxis" title="permalink">»</a>&nbsp;func (j PistonJoint) SetAxis(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) SetAxis(axis Vector3)</pre>
			<p>
SetAxis sets the piston axis.
</p>

		</span>
	
		
		<h1 id="PistonJoint.SetParam" class="hdr pkg hdr-method"><a href="#PistonJoint.SetParam" title="permalink">»</a>&nbsp;func (j PistonJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j PistonJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="Plane" class="hdr pkg hdr-type"><a href="#Plane" title="permalink">»</a>&nbsp;type Plane <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Plane struct {
	GeomBase
}</pre>
		<p>
Plane is a geometry that represents a plane.
</p>

	</span>

	
	

	
	
		
		<h1 id="Plane.Params" class="hdr pkg hdr-method"><a href="#Plane.Params" title="permalink">»</a>&nbsp;func (p Plane) Params() Vector4 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p Plane) Params() Vector4</pre>
			<p>
Params returns plane parameters.
</p>

		</span>
	
		
		<h1 id="Plane.PointDepth" class="hdr pkg hdr-method"><a href="#Plane.PointDepth" title="permalink">»</a>&nbsp;func (p Plane) PointDepth(pt Vector3) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p Plane) PointDepth(pt Vector3) float64</pre>
			<p>
PointDepth returns the depth of the given point.
</p>

		</span>
	
		
		<h1 id="Plane.SetParams" class="hdr pkg hdr-method"><a href="#Plane.SetParams" title="permalink">»</a>&nbsp;func (p Plane) SetParams(params Vector4) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (p Plane) SetParams(params Vector4)</pre>
			<p>
SetParams sets plane parameters.
</p>

		</span>
	

	
	<h1 id="Plane2DJoint" class="hdr pkg hdr-type"><a href="#Plane2DJoint" title="permalink">»</a>&nbsp;type Plane2DJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Plane2DJoint struct {
	JointBase
}</pre>
		<p>
Plane2DJoint represents a plane joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="Plane2DJoint.SetAngleParam" class="hdr pkg hdr-method"><a href="#Plane2DJoint.SetAngleParam" title="permalink">»</a>&nbsp;func (j Plane2DJoint) SetAngleParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Plane2DJoint) SetAngleParam(parameter int, value float64)</pre>
			<p>
SetAngleParam sets a joint parameter.
</p>

		</span>
	
		
		<h1 id="Plane2DJoint.SetXParam" class="hdr pkg hdr-method"><a href="#Plane2DJoint.SetXParam" title="permalink">»</a>&nbsp;func (j Plane2DJoint) SetXParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Plane2DJoint) SetXParam(parameter int, value float64)</pre>
			<p>
SetXParam sets a joint parameter.
</p>

		</span>
	
		
		<h1 id="Plane2DJoint.SetYParam" class="hdr pkg hdr-method"><a href="#Plane2DJoint.SetYParam" title="permalink">»</a>&nbsp;func (j Plane2DJoint) SetYParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j Plane2DJoint) SetYParam(parameter int, value float64)</pre>
			<p>
SetYParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="PlaneList" class="hdr pkg hdr-type"><a href="#PlaneList" title="permalink">»</a>&nbsp;type PlaneList <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type PlaneList Matrix</pre>
		<p>
PlaneList represents a list of plane definitions.
</p>

	</span>

	
	
		<h1 id="NewPlaneList" class="hdr pkg hdr-function"><a href="#NewPlaneList" title="permalink">»</a>&nbsp;func NewPlaneList(size int, vals ...float64) PlaneList <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewPlaneList(size int, vals ...float64) PlaneList</pre>
			<p>
NewPlaneList returns a new PlaneList instance.
</p>

		</span>
	

	
	

	
	<h1 id="PolygonList" class="hdr pkg hdr-type"><a href="#PolygonList" title="permalink">»</a>&nbsp;type PolygonList <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type PolygonList []C.uint</pre>
		<p>
PolygonList represents a list of polygon definitions
</p>

	</span>

	
	

	
	

	
	<h1 id="QuadTreeSpace" class="hdr pkg hdr-type"><a href="#QuadTreeSpace" title="permalink">»</a>&nbsp;type QuadTreeSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type QuadTreeSpace struct {
	SpaceBase
}</pre>
		<p>
QuadTreeSpace represents a quad tree space.
</p>

	</span>

	
	

	
	

	
	<h1 id="Quaternion" class="hdr pkg hdr-type"><a href="#Quaternion" title="permalink">»</a>&nbsp;type Quaternion <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Quaternion Vector</pre>
		<p>
Quaternion represents a quaternion.
</p>

	</span>

	
	
		<h1 id="NewQuaternion" class="hdr pkg hdr-function"><a href="#NewQuaternion" title="permalink">»</a>&nbsp;func NewQuaternion(vals ...float64) Quaternion <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewQuaternion(vals ...float64) Quaternion</pre>
			<p>
NewQuaternion returns a new Quaternion instance.
</p>

		</span>
	

	
	

	
	<h1 id="Ray" class="hdr pkg hdr-type"><a href="#Ray" title="permalink">»</a>&nbsp;type Ray <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Ray struct {
	GeomBase
}</pre>
		<p>
Ray is a geometry representing a ray.
</p>

	</span>

	
	

	
	
		
		<h1 id="Ray.BackfaceCull" class="hdr pkg hdr-method"><a href="#Ray.BackfaceCull" title="permalink">»</a>&nbsp;func (r Ray) BackfaceCull() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) BackfaceCull() bool</pre>
			<p>
BackfaceCull returns whether backface culling is enabled.
</p>

		</span>
	
		
		<h1 id="Ray.ClosestHit" class="hdr pkg hdr-method"><a href="#Ray.ClosestHit" title="permalink">»</a>&nbsp;func (r Ray) ClosestHit() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) ClosestHit() bool</pre>
			<p>
ClosestHit returns whether only the closest hit will be reported.
</p>

		</span>
	
		
		<h1 id="Ray.FirstContact" class="hdr pkg hdr-method"><a href="#Ray.FirstContact" title="permalink">»</a>&nbsp;func (r Ray) FirstContact() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) FirstContact() bool</pre>
			<p>
FirstContact returns whether collision detection will stop after finding the
first contact.
</p>

		</span>
	
		
		<h1 id="Ray.Length" class="hdr pkg hdr-method"><a href="#Ray.Length" title="permalink">»</a>&nbsp;func (r Ray) Length() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) Length() float64</pre>
			<p>
Length returns the length.
</p>

		</span>
	
		
		<h1 id="Ray.PosDir" class="hdr pkg hdr-method"><a href="#Ray.PosDir" title="permalink">»</a>&nbsp;func (r Ray) PosDir() (Vector3, Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) PosDir() (Vector3, Vector3)</pre>
			<p>
PosDir returns the position and direction.
</p>

		</span>
	
		
		<h1 id="Ray.SetBackfaceCull" class="hdr pkg hdr-method"><a href="#Ray.SetBackfaceCull" title="permalink">»</a>&nbsp;func (r Ray) SetBackfaceCull(backfaceCull bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) SetBackfaceCull(backfaceCull bool)</pre>
			<p>
SetBackfaceCull sets whether backface culling is enabled.
</p>

		</span>
	
		
		<h1 id="Ray.SetClosestHit" class="hdr pkg hdr-method"><a href="#Ray.SetClosestHit" title="permalink">»</a>&nbsp;func (r Ray) SetClosestHit(closestHit bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) SetClosestHit(closestHit bool)</pre>
			<p>
SetClosestHit sets whether to only report the closest hit.
</p>

		</span>
	
		
		<h1 id="Ray.SetFirstContact" class="hdr pkg hdr-method"><a href="#Ray.SetFirstContact" title="permalink">»</a>&nbsp;func (r Ray) SetFirstContact(firstContact bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) SetFirstContact(firstContact bool)</pre>
			<p>
SetFirstContact sets whether to stop collision detection after finding the
first contact point.
</p>

		</span>
	
		
		<h1 id="Ray.SetLength" class="hdr pkg hdr-method"><a href="#Ray.SetLength" title="permalink">»</a>&nbsp;func (r Ray) SetLength(length float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) SetLength(length float64)</pre>
			<p>
SetLength sets the length.
</p>

		</span>
	
		
		<h1 id="Ray.SetPosDir" class="hdr pkg hdr-method"><a href="#Ray.SetPosDir" title="permalink">»</a>&nbsp;func (r Ray) SetPosDir(pos, dir Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (r Ray) SetPosDir(pos, dir Vector3)</pre>
			<p>
SetPosDir sets the position and direction.
</p>

		</span>
	

	
	<h1 id="SimpleSpace" class="hdr pkg hdr-type"><a href="#SimpleSpace" title="permalink">»</a>&nbsp;type SimpleSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type SimpleSpace struct {
	SpaceBase
}</pre>
		<p>
SimpleSpace represents a simple space.
</p>

	</span>

	
	

	
	

	
	<h1 id="SliderJoint" class="hdr pkg hdr-type"><a href="#SliderJoint" title="permalink">»</a>&nbsp;type SliderJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type SliderJoint struct {
	JointBase
}</pre>
		<p>
SliderJoint represents a slider joints.
</p>

	</span>

	
	

	
	
		
		<h1 id="SliderJoint.AddForce" class="hdr pkg hdr-method"><a href="#SliderJoint.AddForce" title="permalink">»</a>&nbsp;func (j SliderJoint) AddForce(force float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) AddForce(force float64)</pre>
			<p>
AddForce adds a force to the joint.
</p>

		</span>
	
		
		<h1 id="SliderJoint.Axis" class="hdr pkg hdr-method"><a href="#SliderJoint.Axis" title="permalink">»</a>&nbsp;func (j SliderJoint) Axis() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) Axis() Vector3</pre>
			<p>
Axis returns the slider axis.
</p>

		</span>
	
		
		<h1 id="SliderJoint.Param" class="hdr pkg hdr-method"><a href="#SliderJoint.Param" title="permalink">»</a>&nbsp;func (j SliderJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="SliderJoint.Position" class="hdr pkg hdr-method"><a href="#SliderJoint.Position" title="permalink">»</a>&nbsp;func (j SliderJoint) Position() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) Position() float64</pre>
			<p>
Position returns the slider position.
</p>

		</span>
	
		
		<h1 id="SliderJoint.PositionRate" class="hdr pkg hdr-method"><a href="#SliderJoint.PositionRate" title="permalink">»</a>&nbsp;func (j SliderJoint) PositionRate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) PositionRate() float64</pre>
			<p>
PositionRate returns the slider position&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="SliderJoint.SetAxis" class="hdr pkg hdr-method"><a href="#SliderJoint.SetAxis" title="permalink">»</a>&nbsp;func (j SliderJoint) SetAxis(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) SetAxis(axis Vector3)</pre>
			<p>
SetAxis sets the slider axis.
</p>

		</span>
	
		
		<h1 id="SliderJoint.SetAxisDelta" class="hdr pkg hdr-method"><a href="#SliderJoint.SetAxisDelta" title="permalink">»</a>&nbsp;func (j SliderJoint) SetAxisDelta(pt, delta Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) SetAxisDelta(pt, delta Vector3)</pre>
			<p>
SetAxisDelta sets the slider axis delta.
</p>

		</span>
	
		
		<h1 id="SliderJoint.SetParam" class="hdr pkg hdr-method"><a href="#SliderJoint.SetParam" title="permalink">»</a>&nbsp;func (j SliderJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j SliderJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="Space" class="hdr pkg hdr-type"><a href="#Space" title="permalink">»</a>&nbsp;type Space <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Space interface {
	Destroy()
	SetCleanup(mode bool)
	Cleanup() bool
	SetManualCleanup(mode bool)
	SetSublevel(sublevel int)
	Sublevel() int
	ManualCleanup() bool
	Clean()
	Class() int
	Add(g Geom)
	Remove(g Geom)
	Query(g Geom) bool
	NumGeoms(g Geom) int
	Geom(index int) Geom
	Collide(data interface{}, cb NearCallback)
	NewSphere(radius float64) Sphere
	NewBox(lens Vector3) Box
	NewPlane(params Vector4) Plane
	NewCapsule(radius, length float64) Capsule
	NewCylinder(radius, length float64) Cylinder
	NewRay(length float64) Ray
	NewHeightfield(data HeightfieldData, placeable bool) Heightfield
	NewSimpleSpace() SimpleSpace
	NewHashSpace() HashSpace
	NewQuadTreeSpace(center, extents Vector3, depth int) QuadTreeSpace
	NewSweepAndPruneSpace(axisOrder int) SweepAndPruneSpace
	// contains filtered or unexported methods
}</pre>
		<p>
Space represents a space containing bodies.
</p>

	</span>

	
	
		<h1 id="NilSpace" class="hdr pkg hdr-function"><a href="#NilSpace" title="permalink">»</a>&nbsp;func NilSpace() Space <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NilSpace() Space</pre>
			<p>
NilSpace returns the top level &#34;0&#34; space
</p>

		</span>
	

	
	

	
	<h1 id="SpaceBase" class="hdr pkg hdr-type"><a href="#SpaceBase" title="permalink">»</a>&nbsp;type SpaceBase <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type SpaceBase uintptr</pre>
		<p>
SpaceBase implements Space, and is embedded by specific Space types.
</p>

	</span>

	
	

	
	
		
		<h1 id="SpaceBase.Add" class="hdr pkg hdr-method"><a href="#SpaceBase.Add" title="permalink">»</a>&nbsp;func (s SpaceBase) Add(g Geom) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Add(g Geom)</pre>
			<p>
Add adds a geometry to the space.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Class" class="hdr pkg hdr-method"><a href="#SpaceBase.Class" title="permalink">»</a>&nbsp;func (s SpaceBase) Class() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Class() int</pre>
			<p>
Class returns the space class.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Clean" class="hdr pkg hdr-method"><a href="#SpaceBase.Clean" title="permalink">»</a>&nbsp;func (s SpaceBase) Clean() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Clean()</pre>
			<p>
Clean cleans the space.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Cleanup" class="hdr pkg hdr-method"><a href="#SpaceBase.Cleanup" title="permalink">»</a>&nbsp;func (s SpaceBase) Cleanup() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Cleanup() bool</pre>
			<p>
Cleanup returns whether contained objects will be destroyed.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Collide" class="hdr pkg hdr-method"><a href="#SpaceBase.Collide" title="permalink">»</a>&nbsp;func (s SpaceBase) Collide(data interface{}, cb NearCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Collide(data interface{}, cb NearCallback)</pre>
			<p>
Collide tests for collision between  contained objects.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Destroy" class="hdr pkg hdr-method"><a href="#SpaceBase.Destroy" title="permalink">»</a>&nbsp;func (s SpaceBase) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Destroy()</pre>
			<p>
Destroy destroys the space.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Geom" class="hdr pkg hdr-method"><a href="#SpaceBase.Geom" title="permalink">»</a>&nbsp;func (s SpaceBase) Geom(index int) Geom <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Geom(index int) Geom</pre>
			<p>
Geom returns the specified contained geometry.
</p>

		</span>
	
		
		<h1 id="SpaceBase.ManualCleanup" class="hdr pkg hdr-method"><a href="#SpaceBase.ManualCleanup" title="permalink">»</a>&nbsp;func (s SpaceBase) ManualCleanup() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) ManualCleanup() bool</pre>
			<p>
ManualCleanup returns whether this space is marked for manual cleanup.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewBox" class="hdr pkg hdr-method"><a href="#SpaceBase.NewBox" title="permalink">»</a>&nbsp;func (s SpaceBase) NewBox(lens Vector3) Box <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewBox(lens Vector3) Box</pre>
			<p>
NewBox returns a new Box instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewCapsule" class="hdr pkg hdr-method"><a href="#SpaceBase.NewCapsule" title="permalink">»</a>&nbsp;func (s SpaceBase) NewCapsule(radius, length float64) Capsule <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewCapsule(radius, length float64) Capsule</pre>
			<p>
NewCapsule returns a new Capsule instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewConvex" class="hdr pkg hdr-method"><a href="#SpaceBase.NewConvex" title="permalink">»</a>&nbsp;func (s SpaceBase) NewConvex(planes PlaneList, pts VertexList, polyList PolygonList) Convex <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewConvex(planes PlaneList, pts VertexList, polyList PolygonList) Convex</pre>
			<p>
NewConvex returns a new Convex instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewCylinder" class="hdr pkg hdr-method"><a href="#SpaceBase.NewCylinder" title="permalink">»</a>&nbsp;func (s SpaceBase) NewCylinder(radius, length float64) Cylinder <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewCylinder(radius, length float64) Cylinder</pre>
			<p>
NewCylinder returns a new Cylinder instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewHashSpace" class="hdr pkg hdr-method"><a href="#SpaceBase.NewHashSpace" title="permalink">»</a>&nbsp;func (s SpaceBase) NewHashSpace() HashSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewHashSpace() HashSpace</pre>
			<p>
NewHashSpace returns a new HashSpace instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewHeightfield" class="hdr pkg hdr-method"><a href="#SpaceBase.NewHeightfield" title="permalink">»</a>&nbsp;func (s SpaceBase) NewHeightfield(data HeightfieldData, placeable bool) Heightfield <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewHeightfield(data HeightfieldData, placeable bool) Heightfield</pre>
			<p>
NewHeightfield returns a new Heightfield instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewPlane" class="hdr pkg hdr-method"><a href="#SpaceBase.NewPlane" title="permalink">»</a>&nbsp;func (s SpaceBase) NewPlane(params Vector4) Plane <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewPlane(params Vector4) Plane</pre>
			<p>
NewPlane returns a new Plane instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewQuadTreeSpace" class="hdr pkg hdr-method"><a href="#SpaceBase.NewQuadTreeSpace" title="permalink">»</a>&nbsp;func (s SpaceBase) NewQuadTreeSpace(center, extents Vector3, depth int) QuadTreeSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewQuadTreeSpace(center, extents Vector3, depth int) QuadTreeSpace</pre>
			<p>
NewQuadTreeSpace returns a new QuadTreeSpace instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewRay" class="hdr pkg hdr-method"><a href="#SpaceBase.NewRay" title="permalink">»</a>&nbsp;func (s SpaceBase) NewRay(length float64) Ray <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewRay(length float64) Ray</pre>
			<p>
NewRay returns a new Ray instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewSimpleSpace" class="hdr pkg hdr-method"><a href="#SpaceBase.NewSimpleSpace" title="permalink">»</a>&nbsp;func (s SpaceBase) NewSimpleSpace() SimpleSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewSimpleSpace() SimpleSpace</pre>
			<p>
NewSimpleSpace returns a new SimpleSpace instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewSphere" class="hdr pkg hdr-method"><a href="#SpaceBase.NewSphere" title="permalink">»</a>&nbsp;func (s SpaceBase) NewSphere(radius float64) Sphere <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewSphere(radius float64) Sphere</pre>
			<p>
NewSphere returns a new Sphere instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewSweepAndPruneSpace" class="hdr pkg hdr-method"><a href="#SpaceBase.NewSweepAndPruneSpace" title="permalink">»</a>&nbsp;func (s SpaceBase) NewSweepAndPruneSpace(axisOrder int) SweepAndPruneSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewSweepAndPruneSpace(axisOrder int) SweepAndPruneSpace</pre>
			<p>
NewSweepAndPruneSpace returns a new SweepAndPruneSpace instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NewTriMesh" class="hdr pkg hdr-method"><a href="#SpaceBase.NewTriMesh" title="permalink">»</a>&nbsp;func (s SpaceBase) NewTriMesh(data TriMeshData) TriMesh <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NewTriMesh(data TriMeshData) TriMesh</pre>
			<p>
NewTriMesh returns a new TriMesh instance.
</p>

		</span>
	
		
		<h1 id="SpaceBase.NumGeoms" class="hdr pkg hdr-method"><a href="#SpaceBase.NumGeoms" title="permalink">»</a>&nbsp;func (s SpaceBase) NumGeoms(g Geom) int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) NumGeoms(g Geom) int</pre>
			<p>
NumGeoms returns the number of geometries contained in the space.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Query" class="hdr pkg hdr-method"><a href="#SpaceBase.Query" title="permalink">»</a>&nbsp;func (s SpaceBase) Query(g Geom) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Query(g Geom) bool</pre>
			<p>
Query returns whether a geometry is contained in the space.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Remove" class="hdr pkg hdr-method"><a href="#SpaceBase.Remove" title="permalink">»</a>&nbsp;func (s SpaceBase) Remove(g Geom) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Remove(g Geom)</pre>
			<p>
Remove removes a geometry from the space.
</p>

		</span>
	
		
		<h1 id="SpaceBase.SetCleanup" class="hdr pkg hdr-method"><a href="#SpaceBase.SetCleanup" title="permalink">»</a>&nbsp;func (s SpaceBase) SetCleanup(mode bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) SetCleanup(mode bool)</pre>
			<p>
SetCleanup sets whether contained objects will be destroyed.
</p>

		</span>
	
		
		<h1 id="SpaceBase.SetManualCleanup" class="hdr pkg hdr-method"><a href="#SpaceBase.SetManualCleanup" title="permalink">»</a>&nbsp;func (s SpaceBase) SetManualCleanup(mode bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) SetManualCleanup(mode bool)</pre>
			<p>
SetManualCleanup sets whether this space is marked for manual cleanup.
</p>

		</span>
	
		
		<h1 id="SpaceBase.SetSublevel" class="hdr pkg hdr-method"><a href="#SpaceBase.SetSublevel" title="permalink">»</a>&nbsp;func (s SpaceBase) SetSublevel(sublevel int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) SetSublevel(sublevel int)</pre>
			<p>
SetSublevel sets the sublevel for this space.
</p>

		</span>
	
		
		<h1 id="SpaceBase.Sublevel" class="hdr pkg hdr-method"><a href="#SpaceBase.Sublevel" title="permalink">»</a>&nbsp;func (s SpaceBase) Sublevel() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s SpaceBase) Sublevel() int</pre>
			<p>
Sublevel returns the sublevel for this space.
</p>

		</span>
	

	
	<h1 id="Sphere" class="hdr pkg hdr-type"><a href="#Sphere" title="permalink">»</a>&nbsp;type Sphere <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Sphere struct {
	GeomBase
}</pre>
		<p>
Sphere is a geometry representing a sphere.
</p>

	</span>

	
	

	
	
		
		<h1 id="Sphere.Radius" class="hdr pkg hdr-method"><a href="#Sphere.Radius" title="permalink">»</a>&nbsp;func (s Sphere) Radius() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s Sphere) Radius() float64</pre>
			<p>
Radius returns the radius.
</p>

		</span>
	
		
		<h1 id="Sphere.SetRadius" class="hdr pkg hdr-method"><a href="#Sphere.SetRadius" title="permalink">»</a>&nbsp;func (s Sphere) SetRadius(radius float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s Sphere) SetRadius(radius float64)</pre>
			<p>
SetRadius sets the radius.
</p>

		</span>
	
		
		<h1 id="Sphere.SpherePointDepth" class="hdr pkg hdr-method"><a href="#Sphere.SpherePointDepth" title="permalink">»</a>&nbsp;func (s Sphere) SpherePointDepth(pt Vector3) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (s Sphere) SpherePointDepth(pt Vector3) float64</pre>
			<p>
SpherePointDepth returns the depth of the given point.
</p>

		</span>
	

	
	<h1 id="SurfaceParameters" class="hdr pkg hdr-type"><a href="#SurfaceParameters" title="permalink">»</a>&nbsp;type SurfaceParameters <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type SurfaceParameters struct {
	// must always be defined
	Mode	int
	Mu	float64

	// only defined if the corresponding flag is set in mode
	Mu2		float64
	Rho		float64
	Rho2		float64
	RhoN		float64
	Bounce		float64
	BounceVel	float64
	SoftErp		float64
	SoftCfm		float64
	Motion1		float64
	Motion2		float64
	MotionN		float64
	Slip1		float64
	Slip2		float64
}</pre>
		<p>
SurfaceParameters represents the parameters of a contact surface.
</p>

	</span>

	
	

	
	

	
	<h1 id="SweepAndPruneSpace" class="hdr pkg hdr-type"><a href="#SweepAndPruneSpace" title="permalink">»</a>&nbsp;type SweepAndPruneSpace <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type SweepAndPruneSpace struct {
	SpaceBase
}</pre>
		<p>
SweepAndPruneSpace represents a sweep and prune space.
</p>

	</span>

	
	

	
	

	
	<h1 id="TransmissionJoint" class="hdr pkg hdr-type"><a href="#TransmissionJoint" title="permalink">»</a>&nbsp;type TransmissionJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TransmissionJoint struct {
	JointBase
}</pre>
		<p>
TransmissionJoint represents a transmission joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="TransmissionJoint.Anchor1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Anchor1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Anchor1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Anchor1() Vector3</pre>
			<p>
Anchor1 returns the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Anchor2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Anchor2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Angle1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Angle1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Angle1() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Angle1() float64</pre>
			<p>
Angle1 returns the angle of the first wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Angle2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Angle2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Angle2() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Angle2() float64</pre>
			<p>
Angle2 returns the angle of the second wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Axis" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Axis" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Axis() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Axis() Vector3</pre>
			<p>
Axis returns the common axis.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Axis1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Axis1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Axis1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Axis1() Vector3</pre>
			<p>
Axis1 returns the first axis.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Axis2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Axis2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Axis2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Axis2() Vector3</pre>
			<p>
Axis2 returns the second axis.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Backlash" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Backlash" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Backlash() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Backlash() float64</pre>
			<p>
Backlash returns the backlash (gear tooth play distance).
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.ContactPoint1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.ContactPoint1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) ContactPoint1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) ContactPoint1() Vector3</pre>
			<p>
ContactPoint1 returns the contact point on the first wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.ContactPoint2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.ContactPoint2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) ContactPoint2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) ContactPoint2() Vector3</pre>
			<p>
ContactPoint2 returns the contact point on the second wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Mode" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Mode" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Mode() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Mode() int</pre>
			<p>
Mode returns the transmission mode.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Param" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Param" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Radius1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Radius1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Radius1() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Radius1() float64</pre>
			<p>
Radius1 returns the radius of the first wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Radius2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Radius2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Radius2() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Radius2() float64</pre>
			<p>
Radius2 returns the radius of the second wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.Ratio" class="hdr pkg hdr-method"><a href="#TransmissionJoint.Ratio" title="permalink">»</a>&nbsp;func (j TransmissionJoint) Ratio() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) Ratio() float64</pre>
			<p>
Ratio returns the gear ratio.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetAnchor1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetAnchor1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetAnchor1(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetAnchor1(pt Vector3)</pre>
			<p>
SetAnchor1 sets the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetAnchor2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetAnchor2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetAnchor2(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetAnchor2(pt Vector3)</pre>
			<p>
SetAnchor2 sets the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetAxis" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetAxis" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetAxis(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetAxis(axis Vector3)</pre>
			<p>
SetAxis sets the common axis.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetAxis1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetAxis1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetAxis1(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetAxis1(axis Vector3)</pre>
			<p>
SetAxis1 sets the first axis.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetAxis2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetAxis2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetAxis2(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetAxis2(axis Vector3)</pre>
			<p>
SetAxis2 sets the second axis.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetBacklash" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetBacklash" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetBacklash(backlash float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetBacklash(backlash float64)</pre>
			<p>
SetBacklash set the backlash (gear tooth play distance).
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetMode" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetMode" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetMode(mode int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetMode(mode int)</pre>
			<p>
SetMode sets the transmission mode.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetParam" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetParam" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetRadius1" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetRadius1" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetRadius1(radius float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetRadius1(radius float64)</pre>
			<p>
SetRadius1 sets the radius of the first wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetRadius2" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetRadius2" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetRadius2(radius float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetRadius2(radius float64)</pre>
			<p>
SetRadius2 sets the radius of the second wheel.
</p>

		</span>
	
		
		<h1 id="TransmissionJoint.SetRatio" class="hdr pkg hdr-method"><a href="#TransmissionJoint.SetRatio" title="permalink">»</a>&nbsp;func (j TransmissionJoint) SetRatio(ratio float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j TransmissionJoint) SetRatio(ratio float64)</pre>
			<p>
SetRatio sets the gear ratio.
</p>

		</span>
	

	
	<h1 id="TriCallback" class="hdr pkg hdr-type"><a href="#TriCallback" title="permalink">»</a>&nbsp;type TriCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TriCallback func(mesh TriMesh, other Geom, index int) bool</pre>
		<p>
TriCallback is called to determine whether to collide a triangle with
another geometry.
</p>

	</span>

	
	

	
	

	
	<h1 id="TriMesh" class="hdr pkg hdr-type"><a href="#TriMesh" title="permalink">»</a>&nbsp;type TriMesh <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TriMesh struct {
	GeomBase
}</pre>
		<p>
TriMesh is a geometry representing a triangle mesh.
</p>

	</span>

	
	

	
	
		
		<h1 id="TriMesh.ClearTCCache" class="hdr pkg hdr-method"><a href="#TriMesh.ClearTCCache" title="permalink">»</a>&nbsp;func (t TriMesh) ClearTCCache() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) ClearTCCache()</pre>
			<p>
ClearTCCache clears the temporal coherence cache.
</p>

		</span>
	
		
		<h1 id="TriMesh.LastTransform" class="hdr pkg hdr-method"><a href="#TriMesh.LastTransform" title="permalink">»</a>&nbsp;func (t TriMesh) LastTransform() Matrix4 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) LastTransform() Matrix4</pre>
			<p>
LastTransform returns the last transform.
</p>

		</span>
	
		
		<h1 id="TriMesh.MeshData" class="hdr pkg hdr-method"><a href="#TriMesh.MeshData" title="permalink">»</a>&nbsp;func (t TriMesh) MeshData() TriMeshData <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) MeshData() TriMeshData</pre>
			<p>
MeshData returns the mesh data.
</p>

		</span>
	
		
		<h1 id="TriMesh.Point" class="hdr pkg hdr-method"><a href="#TriMesh.Point" title="permalink">»</a>&nbsp;func (t TriMesh) Point(index int, u, v float64) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) Point(index int, u, v float64) Vector3</pre>
			<p>
Point returns a point on the specified triangle at the given barycentric coordinates.
</p>

		</span>
	
		
		<h1 id="TriMesh.SetLastTransform" class="hdr pkg hdr-method"><a href="#TriMesh.SetLastTransform" title="permalink">»</a>&nbsp;func (t TriMesh) SetLastTransform(xform Matrix4) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) SetLastTransform(xform Matrix4)</pre>
			<p>
SetLastTransform sets the last transform.
</p>

		</span>
	
		
		<h1 id="TriMesh.SetMeshData" class="hdr pkg hdr-method"><a href="#TriMesh.SetMeshData" title="permalink">»</a>&nbsp;func (t TriMesh) SetMeshData(data TriMeshData) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) SetMeshData(data TriMeshData)</pre>
			<p>
SetMeshData sets the mesh data.
</p>

		</span>
	
		
		<h1 id="TriMesh.SetTCEnabled" class="hdr pkg hdr-method"><a href="#TriMesh.SetTCEnabled" title="permalink">»</a>&nbsp;func (t TriMesh) SetTCEnabled(class int, isEnabled bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) SetTCEnabled(class int, isEnabled bool)</pre>
			<p>
SetTCEnabled sets whether temporal coherence is enabled for the given
geometry class.
</p>

		</span>
	
		
		<h1 id="TriMesh.SetTriCallback" class="hdr pkg hdr-method"><a href="#TriMesh.SetTriCallback" title="permalink">»</a>&nbsp;func (t TriMesh) SetTriCallback(cb TriCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) SetTriCallback(cb TriCallback)</pre>
			<p>
SetTriCallback sets the triangle collision callback.
</p>

		</span>
	
		
		<h1 id="TriMesh.SetTriRayCallback" class="hdr pkg hdr-method"><a href="#TriMesh.SetTriRayCallback" title="permalink">»</a>&nbsp;func (t TriMesh) SetTriRayCallback(cb TriRayCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) SetTriRayCallback(cb TriRayCallback)</pre>
			<p>
SetTriRayCallback sets the triangle/ray collision callback.
</p>

		</span>
	
		
		<h1 id="TriMesh.TCEnabled" class="hdr pkg hdr-method"><a href="#TriMesh.TCEnabled" title="permalink">»</a>&nbsp;func (t TriMesh) TCEnabled(class int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) TCEnabled(class int) bool</pre>
			<p>
TCEnabled returns whether temporal coherence is enabled for the given
geometry class.
</p>

		</span>
	
		
		<h1 id="TriMesh.TriCallback" class="hdr pkg hdr-method"><a href="#TriMesh.TriCallback" title="permalink">»</a>&nbsp;func (t TriMesh) TriCallback() TriCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) TriCallback() TriCallback</pre>
			<p>
TriCallback returns the triangle collision callback.
</p>

		</span>
	
		
		<h1 id="TriMesh.TriRayCallback" class="hdr pkg hdr-method"><a href="#TriMesh.TriRayCallback" title="permalink">»</a>&nbsp;func (t TriMesh) TriRayCallback() TriRayCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) TriRayCallback() TriRayCallback</pre>
			<p>
TriRayCallback returns the triangle/ray collision callback.
</p>

		</span>
	
		
		<h1 id="TriMesh.Triangle" class="hdr pkg hdr-method"><a href="#TriMesh.Triangle" title="permalink">»</a>&nbsp;func (t TriMesh) Triangle(index int) (Vector3, Vector3, Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) Triangle(index int) (Vector3, Vector3, Vector3)</pre>
			<p>
Triangle returns a triangle in the mesh by index.
</p>

		</span>
	
		
		<h1 id="TriMesh.TriangleCount" class="hdr pkg hdr-method"><a href="#TriMesh.TriangleCount" title="permalink">»</a>&nbsp;func (t TriMesh) TriangleCount() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMesh) TriangleCount() int</pre>
			<p>
TriangleCount returns the number of triangles in the mesh.
</p>

		</span>
	

	
	<h1 id="TriMeshData" class="hdr pkg hdr-type"><a href="#TriMeshData" title="permalink">»</a>&nbsp;type TriMeshData <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TriMeshData uintptr</pre>
		<p>
TriMeshData represents triangle mesh data.
</p>

	</span>

	
	
		<h1 id="NewTriMeshData" class="hdr pkg hdr-function"><a href="#NewTriMeshData" title="permalink">»</a>&nbsp;func NewTriMeshData() TriMeshData <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewTriMeshData() TriMeshData</pre>
			<p>
NewTriMeshData returns a new TriMeshData instance.
</p>

		</span>
	

	
	
		
		<h1 id="TriMeshData.Build" class="hdr pkg hdr-method"><a href="#TriMeshData.Build" title="permalink">»</a>&nbsp;func (t TriMeshData) Build(verts VertexList, tris TriVertexIndexList) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMeshData) Build(verts VertexList, tris TriVertexIndexList)</pre>
			<p>
Build builds a triangle mesh from the given data.
</p>

		</span>
	
		
		<h1 id="TriMeshData.Destroy" class="hdr pkg hdr-method"><a href="#TriMeshData.Destroy" title="permalink">»</a>&nbsp;func (t TriMeshData) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMeshData) Destroy()</pre>
			<p>
Destroy destroys the triangle mesh data.
</p>

		</span>
	
		
		<h1 id="TriMeshData.Preprocess" class="hdr pkg hdr-method"><a href="#TriMeshData.Preprocess" title="permalink">»</a>&nbsp;func (t TriMeshData) Preprocess() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMeshData) Preprocess()</pre>
			<p>
Preprocess preprocesses the triangle mesh data.
</p>

		</span>
	
		
		<h1 id="TriMeshData.Update" class="hdr pkg hdr-method"><a href="#TriMeshData.Update" title="permalink">»</a>&nbsp;func (t TriMeshData) Update() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (t TriMeshData) Update()</pre>
			<p>
Update updates the triangle mesh data.
</p>

		</span>
	

	
	<h1 id="TriRayCallback" class="hdr pkg hdr-type"><a href="#TriRayCallback" title="permalink">»</a>&nbsp;type TriRayCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TriRayCallback func(mesh TriMesh, ray Ray, index int, u, v float64) bool</pre>
		<p>
TriRayCallback is called to determine whether to collide a triangle with a
ray at a given point.
</p>

	</span>

	
	

	
	

	
	<h1 id="TriVertexIndexList" class="hdr pkg hdr-type"><a href="#TriVertexIndexList" title="permalink">»</a>&nbsp;type TriVertexIndexList <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type TriVertexIndexList [][]uint32</pre>
		<p>
TriVertexIndexList represents a list of triangle vertex indices.
</p>

	</span>

	
	
		<h1 id="NewTriVertexIndexList" class="hdr pkg hdr-function"><a href="#NewTriVertexIndexList" title="permalink">»</a>&nbsp;func NewTriVertexIndexList(size int, indices ...uint32) TriVertexIndexList <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewTriVertexIndexList(size int, indices ...uint32) TriVertexIndexList</pre>
			<p>
NewTriVertexIndexList returns a new TriVertexIndexList instance.
</p>

		</span>
	

	
	

	
	<h1 id="UniversalJoint" class="hdr pkg hdr-type"><a href="#UniversalJoint" title="permalink">»</a>&nbsp;type UniversalJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type UniversalJoint struct {
	JointBase
}</pre>
		<p>
UniversalJoint represents a universal joint.
</p>

	</span>

	
	

	
	
		
		<h1 id="UniversalJoint.AddTorques" class="hdr pkg hdr-method"><a href="#UniversalJoint.AddTorques" title="permalink">»</a>&nbsp;func (j UniversalJoint) AddTorques(torque1, torque2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) AddTorques(torque1, torque2 float64)</pre>
			<p>
AddTorques adds torques to the joint.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Anchor" class="hdr pkg hdr-method"><a href="#UniversalJoint.Anchor" title="permalink">»</a>&nbsp;func (j UniversalJoint) Anchor() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Anchor() Vector3</pre>
			<p>
Anchor returns the anchor point for the first body.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Anchor2" class="hdr pkg hdr-method"><a href="#UniversalJoint.Anchor2" title="permalink">»</a>&nbsp;func (j UniversalJoint) Anchor2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Anchor2() Vector3</pre>
			<p>
Anchor2 returns the anchor point for the second body.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Angle1" class="hdr pkg hdr-method"><a href="#UniversalJoint.Angle1" title="permalink">»</a>&nbsp;func (j UniversalJoint) Angle1() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Angle1() float64</pre>
			<p>
Angle1 returns the first angle.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Angle1Rate" class="hdr pkg hdr-method"><a href="#UniversalJoint.Angle1Rate" title="permalink">»</a>&nbsp;func (j UniversalJoint) Angle1Rate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Angle1Rate() float64</pre>
			<p>
Angle1Rate returns the first angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Angle2" class="hdr pkg hdr-method"><a href="#UniversalJoint.Angle2" title="permalink">»</a>&nbsp;func (j UniversalJoint) Angle2() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Angle2() float64</pre>
			<p>
Angle2 returns the second angle.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Angle2Rate" class="hdr pkg hdr-method"><a href="#UniversalJoint.Angle2Rate" title="permalink">»</a>&nbsp;func (j UniversalJoint) Angle2Rate() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Angle2Rate() float64</pre>
			<p>
Angle2Rate returns the second angle&#39;s rate of change.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Angles" class="hdr pkg hdr-method"><a href="#UniversalJoint.Angles" title="permalink">»</a>&nbsp;func (j UniversalJoint) Angles() (float64, float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Angles() (float64, float64)</pre>
			<p>
Angles returns the two angles.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Axis1" class="hdr pkg hdr-method"><a href="#UniversalJoint.Axis1" title="permalink">»</a>&nbsp;func (j UniversalJoint) Axis1() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Axis1() Vector3</pre>
			<p>
Axis1 returns the first axis.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Axis2" class="hdr pkg hdr-method"><a href="#UniversalJoint.Axis2" title="permalink">»</a>&nbsp;func (j UniversalJoint) Axis2() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Axis2() Vector3</pre>
			<p>
Axis2 returns the second axis.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.Param" class="hdr pkg hdr-method"><a href="#UniversalJoint.Param" title="permalink">»</a>&nbsp;func (j UniversalJoint) Param(parameter int) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) Param(parameter int) float64</pre>
			<p>
Param returns a joint parameter.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.SetAnchor" class="hdr pkg hdr-method"><a href="#UniversalJoint.SetAnchor" title="permalink">»</a>&nbsp;func (j UniversalJoint) SetAnchor(pt Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) SetAnchor(pt Vector3)</pre>
			<p>
SetAnchor sets the anchor point.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.SetAxis1" class="hdr pkg hdr-method"><a href="#UniversalJoint.SetAxis1" title="permalink">»</a>&nbsp;func (j UniversalJoint) SetAxis1(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) SetAxis1(axis Vector3)</pre>
			<p>
SetAxis1 sets the first axis.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.SetAxis1Offset" class="hdr pkg hdr-method"><a href="#UniversalJoint.SetAxis1Offset" title="permalink">»</a>&nbsp;func (j UniversalJoint) SetAxis1Offset(axis Vector3, offset1, offset2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) SetAxis1Offset(axis Vector3, offset1, offset2 float64)</pre>
			<p>
SetAxis1Offset sets the first axis as if the 2 bodies were already at
offset1 and offset2 appart with respect to the first and second axes.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.SetAxis2" class="hdr pkg hdr-method"><a href="#UniversalJoint.SetAxis2" title="permalink">»</a>&nbsp;func (j UniversalJoint) SetAxis2(axis Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) SetAxis2(axis Vector3)</pre>
			<p>
SetAxis2 sets the second axis.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.SetAxis2Offset" class="hdr pkg hdr-method"><a href="#UniversalJoint.SetAxis2Offset" title="permalink">»</a>&nbsp;func (j UniversalJoint) SetAxis2Offset(axis Vector3, offset1, offset2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) SetAxis2Offset(axis Vector3, offset1, offset2 float64)</pre>
			<p>
SetAxis2Offset sets the second axis as if the 2 bodies were already at
offset1 and offset2 appart with respect to the first and second axes.
</p>

		</span>
	
		
		<h1 id="UniversalJoint.SetParam" class="hdr pkg hdr-method"><a href="#UniversalJoint.SetParam" title="permalink">»</a>&nbsp;func (j UniversalJoint) SetParam(parameter int, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (j UniversalJoint) SetParam(parameter int, value float64)</pre>
			<p>
SetParam sets a joint parameter.
</p>

		</span>
	

	
	<h1 id="Vector" class="hdr pkg hdr-type"><a href="#Vector" title="permalink">»</a>&nbsp;type Vector <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Vector []float64</pre>
		<p>
Vector represents a double precision vector.
</p>

	</span>

	
	
		<h1 id="NewVector" class="hdr pkg hdr-function"><a href="#NewVector" title="permalink">»</a>&nbsp;func NewVector(size, align int, vals ...float64) Vector <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewVector(size, align int, vals ...float64) Vector</pre>
			<p>
NewVector returns a new Vector instance.
</p>

		</span>
	

	
	

	
	<h1 id="Vector3" class="hdr pkg hdr-type"><a href="#Vector3" title="permalink">»</a>&nbsp;type Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Vector3 Vector</pre>
		<p>
Vector3 represents a 3 component vector.
</p>

	</span>

	
	
		<h1 id="NewVector3" class="hdr pkg hdr-function"><a href="#NewVector3" title="permalink">»</a>&nbsp;func NewVector3(vals ...float64) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewVector3(vals ...float64) Vector3</pre>
			<p>
NewVector3 returns a new Vector3 instance.
</p>

		</span>
	

	
	

	
	<h1 id="Vector4" class="hdr pkg hdr-type"><a href="#Vector4" title="permalink">»</a>&nbsp;type Vector4 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Vector4 Vector</pre>
		<p>
Vector4 represents a 4 component vector.
</p>

	</span>

	
	
		<h1 id="NewVector4" class="hdr pkg hdr-function"><a href="#NewVector4" title="permalink">»</a>&nbsp;func NewVector4(vals ...float64) Vector4 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewVector4(vals ...float64) Vector4</pre>
			<p>
NewVector4 returns a new Vector4 instance.
</p>

		</span>
	

	
	

	
	<h1 id="VertexList" class="hdr pkg hdr-type"><a href="#VertexList" title="permalink">»</a>&nbsp;type VertexList <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type VertexList Matrix</pre>
		<p>
VertexList represents a list of 3D vertices.
</p>

	</span>

	
	
		<h1 id="NewVertexList" class="hdr pkg hdr-function"><a href="#NewVertexList" title="permalink">»</a>&nbsp;func NewVertexList(size int, vals ...float64) VertexList <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewVertexList(size int, vals ...float64) VertexList</pre>
			<p>
NewVertexList returns a new VertexList instance.
</p>

		</span>
	

	
	

	
	<h1 id="World" class="hdr pkg hdr-type"><a href="#World" title="permalink">»</a>&nbsp;type World <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type World uintptr</pre>
		<p>
World represents a simulation world.
</p>

	</span>

	
	
		<h1 id="NewWorld" class="hdr pkg hdr-function"><a href="#NewWorld" title="permalink">»</a>&nbsp;func NewWorld() World <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func NewWorld() World</pre>
			<p>
NewWorld returns a new World instance.
</p>

		</span>
	

	
	
		
		<h1 id="World.AngularDamping" class="hdr pkg hdr-method"><a href="#World.AngularDamping" title="permalink">»</a>&nbsp;func (w World) AngularDamping() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AngularDamping() float64</pre>
			<p>
AngularDamping returns the angular damping scale.
</p>

		</span>
	
		
		<h1 id="World.AngularDampingThreshold" class="hdr pkg hdr-method"><a href="#World.AngularDampingThreshold" title="permalink">»</a>&nbsp;func (w World) AngularDampingThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AngularDampingThreshold() float64</pre>
			<p>
AngularDampingThreshold returns the angular damping threshold.
</p>

		</span>
	
		
		<h1 id="World.AutoDisable" class="hdr pkg hdr-method"><a href="#World.AutoDisable" title="permalink">»</a>&nbsp;func (w World) AutoDisable() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AutoDisable() bool</pre>
			<p>
AutoDisable returns whether the body will be auto disabled.
</p>

		</span>
	
		
		<h1 id="World.AutoDisableAngularThreshold" class="hdr pkg hdr-method"><a href="#World.AutoDisableAngularThreshold" title="permalink">»</a>&nbsp;func (w World) AutoDisableAngularThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AutoDisableAngularThreshold() float64</pre>
			<p>
AutoDisableAngularThreshold returns the auto disable angular average threshold.
</p>

		</span>
	
		
		<h1 id="World.AutoDisableAverageSamplesCount" class="hdr pkg hdr-method"><a href="#World.AutoDisableAverageSamplesCount" title="permalink">»</a>&nbsp;func (w World) AutoDisableAverageSamplesCount() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AutoDisableAverageSamplesCount() bool</pre>
			<p>
AutoDisableAverageSamplesCount returns the auto disable sample count.
</p>

		</span>
	
		
		<h1 id="World.AutoDisableLinearThreshold" class="hdr pkg hdr-method"><a href="#World.AutoDisableLinearThreshold" title="permalink">»</a>&nbsp;func (w World) AutoDisableLinearThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AutoDisableLinearThreshold() float64</pre>
			<p>
AutoDisableLinearThreshold returns the auto disable linear average threshold.
</p>

		</span>
	
		
		<h1 id="World.AutoDisableSteps" class="hdr pkg hdr-method"><a href="#World.AutoDisableSteps" title="permalink">»</a>&nbsp;func (w World) AutoDisableSteps() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AutoDisableSteps() int</pre>
			<p>
AutoDisableSteps returns the number of auto disable steps.
</p>

		</span>
	
		
		<h1 id="World.AutoDisableTime" class="hdr pkg hdr-method"><a href="#World.AutoDisableTime" title="permalink">»</a>&nbsp;func (w World) AutoDisableTime() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) AutoDisableTime() float64</pre>
			<p>
AutoDisableTime returns the auto disable time.
</p>

		</span>
	
		
		<h1 id="World.CFM" class="hdr pkg hdr-method"><a href="#World.CFM" title="permalink">»</a>&nbsp;func (w World) CFM() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) CFM() float64</pre>
			<p>
CFM returns the constraint force mixing value.
</p>

		</span>
	
		
		<h1 id="World.CleanupWorkingMemory" class="hdr pkg hdr-method"><a href="#World.CleanupWorkingMemory" title="permalink">»</a>&nbsp;func (w World) CleanupWorkingMemory() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) CleanupWorkingMemory()</pre>
			<p>
CleanupWorkingMemory cleans up the world&#39;s working memory.
</p>

		</span>
	
		
		<h1 id="World.ContactMaxCorrectingVelocity" class="hdr pkg hdr-method"><a href="#World.ContactMaxCorrectingVelocity" title="permalink">»</a>&nbsp;func (w World) ContactMaxCorrectingVelocity() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) ContactMaxCorrectingVelocity() float64</pre>
			<p>
ContactMaxCorrectingVelocity returns the maximum correcting velocity that
contacts are allowed to generate.
</p>

		</span>
	
		
		<h1 id="World.ContactSurfaceLayer" class="hdr pkg hdr-method"><a href="#World.ContactSurfaceLayer" title="permalink">»</a>&nbsp;func (w World) ContactSurfaceLayer() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) ContactSurfaceLayer() float64</pre>
			<p>
ContactSurfaceLayer returns the depth of the surface layer around all
geometry objects.
</p>

		</span>
	
		
		<h1 id="World.Data" class="hdr pkg hdr-method"><a href="#World.Data" title="permalink">»</a>&nbsp;func (w World) Data() interface{} <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) Data() interface{}</pre>
			<p>
Data returns the user-specified data associated with the world.
</p>

		</span>
	
		
		<h1 id="World.Destroy" class="hdr pkg hdr-method"><a href="#World.Destroy" title="permalink">»</a>&nbsp;func (w World) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) Destroy()</pre>
			<p>
Destroy destroys the world.
</p>

		</span>
	
		
		<h1 id="World.ERP" class="hdr pkg hdr-method"><a href="#World.ERP" title="permalink">»</a>&nbsp;func (w World) ERP() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) ERP() float64</pre>
			<p>
ERP returns the error reduction parameter.
</p>

		</span>
	
		
		<h1 id="World.Gravity" class="hdr pkg hdr-method"><a href="#World.Gravity" title="permalink">»</a>&nbsp;func (w World) Gravity() Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) Gravity() Vector3</pre>
			<p>
Gravity returns the gravity vector.
</p>

		</span>
	
		
		<h1 id="World.ImpulseToForce" class="hdr pkg hdr-method"><a href="#World.ImpulseToForce" title="permalink">»</a>&nbsp;func (w World) ImpulseToForce(stepSize float64, impulse Vector3) Vector3 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) ImpulseToForce(stepSize float64, impulse Vector3) Vector3</pre>
			<p>
ImpulseToForce converts an impulse to a force over a step duration.
</p>

		</span>
	
		
		<h1 id="World.LinearDamping" class="hdr pkg hdr-method"><a href="#World.LinearDamping" title="permalink">»</a>&nbsp;func (w World) LinearDamping() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) LinearDamping() float64</pre>
			<p>
LinearDamping returns the linear damping scale.
</p>

		</span>
	
		
		<h1 id="World.LinearDampingThreshold" class="hdr pkg hdr-method"><a href="#World.LinearDampingThreshold" title="permalink">»</a>&nbsp;func (w World) LinearDampingThreshold() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) LinearDampingThreshold() float64</pre>
			<p>
LinearDampingThreshold returns the linear damping threshold.
</p>

		</span>
	
		
		<h1 id="World.MaxAngularSpeed" class="hdr pkg hdr-method"><a href="#World.MaxAngularSpeed" title="permalink">»</a>&nbsp;func (w World) MaxAngularSpeed() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) MaxAngularSpeed() float64</pre>
			<p>
MaxAngularSpeed returns the maximum angular speed.
</p>

		</span>
	
		
		<h1 id="World.NewAMotorJoint" class="hdr pkg hdr-method"><a href="#World.NewAMotorJoint" title="permalink">»</a>&nbsp;func (w World) NewAMotorJoint(group JointGroup) AMotorJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewAMotorJoint(group JointGroup) AMotorJoint</pre>
			<p>
NewAMotorJoint returns a new AMotorJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewBallJoint" class="hdr pkg hdr-method"><a href="#World.NewBallJoint" title="permalink">»</a>&nbsp;func (w World) NewBallJoint(group JointGroup) BallJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewBallJoint(group JointGroup) BallJoint</pre>
			<p>
NewBallJoint returns a new BallJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewBody" class="hdr pkg hdr-method"><a href="#World.NewBody" title="permalink">»</a>&nbsp;func (w World) NewBody() Body <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewBody() Body</pre>
			<p>
NewBody returns a new Body instance.
</p>

		</span>
	
		
		<h1 id="World.NewContactJoint" class="hdr pkg hdr-method"><a href="#World.NewContactJoint" title="permalink">»</a>&nbsp;func (w World) NewContactJoint(group JointGroup, contact *Contact) ContactJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewContactJoint(group JointGroup, contact *Contact) ContactJoint</pre>
			<p>
NewContactJoint returns a new ContactJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewDBallJoint" class="hdr pkg hdr-method"><a href="#World.NewDBallJoint" title="permalink">»</a>&nbsp;func (w World) NewDBallJoint(group JointGroup) DBallJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewDBallJoint(group JointGroup) DBallJoint</pre>
			<p>
NewDBallJoint returns a new DBallJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewDHingeJoint" class="hdr pkg hdr-method"><a href="#World.NewDHingeJoint" title="permalink">»</a>&nbsp;func (w World) NewDHingeJoint(group JointGroup) DHingeJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewDHingeJoint(group JointGroup) DHingeJoint</pre>
			<p>
NewDHingeJoint returns a new DHingeJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewFixedJoint" class="hdr pkg hdr-method"><a href="#World.NewFixedJoint" title="permalink">»</a>&nbsp;func (w World) NewFixedJoint(group JointGroup) FixedJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewFixedJoint(group JointGroup) FixedJoint</pre>
			<p>
NewFixedJoint returns a new FixedJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewHinge2Joint" class="hdr pkg hdr-method"><a href="#World.NewHinge2Joint" title="permalink">»</a>&nbsp;func (w World) NewHinge2Joint(group JointGroup) Hinge2Joint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewHinge2Joint(group JointGroup) Hinge2Joint</pre>
			<p>
NewHinge2Joint returns a new Hinge2Joint instance
</p>

		</span>
	
		
		<h1 id="World.NewHingeJoint" class="hdr pkg hdr-method"><a href="#World.NewHingeJoint" title="permalink">»</a>&nbsp;func (w World) NewHingeJoint(group JointGroup) HingeJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewHingeJoint(group JointGroup) HingeJoint</pre>
			<p>
NewHingeJoint returns a new HingeJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewLMotorJoint" class="hdr pkg hdr-method"><a href="#World.NewLMotorJoint" title="permalink">»</a>&nbsp;func (w World) NewLMotorJoint(group JointGroup) LMotorJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewLMotorJoint(group JointGroup) LMotorJoint</pre>
			<p>
NewLMotorJoint returns a new LMotorJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewNullJoint" class="hdr pkg hdr-method"><a href="#World.NewNullJoint" title="permalink">»</a>&nbsp;func (w World) NewNullJoint(group JointGroup) NullJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewNullJoint(group JointGroup) NullJoint</pre>
			<p>
NewNullJoint returns a new NullJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewPRJoint" class="hdr pkg hdr-method"><a href="#World.NewPRJoint" title="permalink">»</a>&nbsp;func (w World) NewPRJoint(group JointGroup) PRJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewPRJoint(group JointGroup) PRJoint</pre>
			<p>
NewPRJoint returns a new PRJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewPUJoint" class="hdr pkg hdr-method"><a href="#World.NewPUJoint" title="permalink">»</a>&nbsp;func (w World) NewPUJoint(group JointGroup) PUJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewPUJoint(group JointGroup) PUJoint</pre>
			<p>
NewPUJoint returns a new PUJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewPistonJoint" class="hdr pkg hdr-method"><a href="#World.NewPistonJoint" title="permalink">»</a>&nbsp;func (w World) NewPistonJoint(group JointGroup) PistonJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewPistonJoint(group JointGroup) PistonJoint</pre>
			<p>
NewPistonJoint returns a new PistonJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewPlane2DJoint" class="hdr pkg hdr-method"><a href="#World.NewPlane2DJoint" title="permalink">»</a>&nbsp;func (w World) NewPlane2DJoint(group JointGroup) Plane2DJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewPlane2DJoint(group JointGroup) Plane2DJoint</pre>
			<p>
NewPlane2DJoint returns a new Plane2DJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewSliderJoint" class="hdr pkg hdr-method"><a href="#World.NewSliderJoint" title="permalink">»</a>&nbsp;func (w World) NewSliderJoint(group JointGroup) SliderJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewSliderJoint(group JointGroup) SliderJoint</pre>
			<p>
NewSliderJoint returns a new SliderJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewTransmissionJoint" class="hdr pkg hdr-method"><a href="#World.NewTransmissionJoint" title="permalink">»</a>&nbsp;func (w World) NewTransmissionJoint(group JointGroup) TransmissionJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewTransmissionJoint(group JointGroup) TransmissionJoint</pre>
			<p>
NewTransmissionJoint returns a new TransmissionJoint instance
</p>

		</span>
	
		
		<h1 id="World.NewUniversalJoint" class="hdr pkg hdr-method"><a href="#World.NewUniversalJoint" title="permalink">»</a>&nbsp;func (w World) NewUniversalJoint(group JointGroup) UniversalJoint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) NewUniversalJoint(group JointGroup) UniversalJoint</pre>
			<p>
NewUniversalJoint returns a new UniversalJoint instance
</p>

		</span>
	
		
		<h1 id="World.QuickStep" class="hdr pkg hdr-method"><a href="#World.QuickStep" title="permalink">»</a>&nbsp;func (w World) QuickStep(stepSize float64) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) QuickStep(stepSize float64) bool</pre>
			<p>
QuickStep executes a simulation quick step, and returns whether the
operation succeeded.
</p>

		</span>
	
		
		<h1 id="World.QuickStepNumIterations" class="hdr pkg hdr-method"><a href="#World.QuickStepNumIterations" title="permalink">»</a>&nbsp;func (w World) QuickStepNumIterations() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) QuickStepNumIterations() int</pre>
			<p>
QuickStepNumIterations returns the number of iterations to execute during a
quick step.
</p>

		</span>
	
		
		<h1 id="World.QuickStepW" class="hdr pkg hdr-method"><a href="#World.QuickStepW" title="permalink">»</a>&nbsp;func (w World) QuickStepW() float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) QuickStepW() float64</pre>
			<p>
QuickStepW returns the over-relaxation parameter.
</p>

		</span>
	
		
		<h1 id="World.SetAngularDamping" class="hdr pkg hdr-method"><a href="#World.SetAngularDamping" title="permalink">»</a>&nbsp;func (w World) SetAngularDamping(scale float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAngularDamping(scale float64)</pre>
			<p>
SetAngularDamping sets the angular damping scale.
</p>

		</span>
	
		
		<h1 id="World.SetAngularDampingThreshold" class="hdr pkg hdr-method"><a href="#World.SetAngularDampingThreshold" title="permalink">»</a>&nbsp;func (w World) SetAngularDampingThreshold(threshold float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAngularDampingThreshold(threshold float64)</pre>
			<p>
SetAngularDampingThreshold sets the angular damping threshold.
</p>

		</span>
	
		
		<h1 id="World.SetAutoAutoDisableAverageSamplesCount" class="hdr pkg hdr-method"><a href="#World.SetAutoAutoDisableAverageSamplesCount" title="permalink">»</a>&nbsp;func (w World) SetAutoAutoDisableAverageSamplesCount(averageSamplesCount bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAutoAutoDisableAverageSamplesCount(averageSamplesCount bool)</pre>
			<p>
SetAutoAutoDisableAverageSamplesCount sets auto disable average sample count.
</p>

		</span>
	
		
		<h1 id="World.SetAutoDisable" class="hdr pkg hdr-method"><a href="#World.SetAutoDisable" title="permalink">»</a>&nbsp;func (w World) SetAutoDisable(doAutoDisable bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAutoDisable(doAutoDisable bool)</pre>
			<p>
SetAutoDisable sets wether the body will be auto disabled.
</p>

		</span>
	
		
		<h1 id="World.SetAutoDisableAngularThreshold" class="hdr pkg hdr-method"><a href="#World.SetAutoDisableAngularThreshold" title="permalink">»</a>&nbsp;func (w World) SetAutoDisableAngularThreshold(angularThreshold float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAutoDisableAngularThreshold(angularThreshold float64)</pre>
			<p>
SetAutoDisableAngularThreshold sets the auto disable angular average threshold.
</p>

		</span>
	
		
		<h1 id="World.SetAutoDisableLinearThreshold" class="hdr pkg hdr-method"><a href="#World.SetAutoDisableLinearThreshold" title="permalink">»</a>&nbsp;func (w World) SetAutoDisableLinearThreshold(linearThreshold float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAutoDisableLinearThreshold(linearThreshold float64)</pre>
			<p>
SetAutoDisableLinearThreshold sets the auto disable linear average threshold.
</p>

		</span>
	
		
		<h1 id="World.SetAutoDisableSteps" class="hdr pkg hdr-method"><a href="#World.SetAutoDisableSteps" title="permalink">»</a>&nbsp;func (w World) SetAutoDisableSteps(steps int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAutoDisableSteps(steps int)</pre>
			<p>
SetAutoDisableSteps sets the number of auto disable steps.
</p>

		</span>
	
		
		<h1 id="World.SetAutoDisableTime" class="hdr pkg hdr-method"><a href="#World.SetAutoDisableTime" title="permalink">»</a>&nbsp;func (w World) SetAutoDisableTime(time float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetAutoDisableTime(time float64)</pre>
			<p>
SetAutoDisableTime sets the auto disable time.
</p>

		</span>
	
		
		<h1 id="World.SetCFM" class="hdr pkg hdr-method"><a href="#World.SetCFM" title="permalink">»</a>&nbsp;func (w World) SetCFM(cfm float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetCFM(cfm float64)</pre>
			<p>
SetCFM sets the constraint force mixing value.
</p>

		</span>
	
		
		<h1 id="World.SetContactMaxCorrectingVelocity" class="hdr pkg hdr-method"><a href="#World.SetContactMaxCorrectingVelocity" title="permalink">»</a>&nbsp;func (w World) SetContactMaxCorrectingVelocity(overRelaxation float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetContactMaxCorrectingVelocity(overRelaxation float64)</pre>
			<p>
SetContactMaxCorrectingVelocity sets the maximum correcting velocity that
contacts are allowed to generate.
</p>

		</span>
	
		
		<h1 id="World.SetContactSurfaceLayer" class="hdr pkg hdr-method"><a href="#World.SetContactSurfaceLayer" title="permalink">»</a>&nbsp;func (w World) SetContactSurfaceLayer(depth float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetContactSurfaceLayer(depth float64)</pre>
			<p>
SetContactSurfaceLayer sets the depth of the surface layer around all
geometry objects.
</p>

		</span>
	
		
		<h1 id="World.SetData" class="hdr pkg hdr-method"><a href="#World.SetData" title="permalink">»</a>&nbsp;func (w World) SetData(data interface{}) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetData(data interface{})</pre>
			<p>
SetData associates user-specified data with the world.
</p>

		</span>
	
		
		<h1 id="World.SetERP" class="hdr pkg hdr-method"><a href="#World.SetERP" title="permalink">»</a>&nbsp;func (w World) SetERP(erp float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetERP(erp float64)</pre>
			<p>
SetERP sets the error reduction parameter.
</p>

		</span>
	
		
		<h1 id="World.SetGravity" class="hdr pkg hdr-method"><a href="#World.SetGravity" title="permalink">»</a>&nbsp;func (w World) SetGravity(grav Vector3) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetGravity(grav Vector3)</pre>
			<p>
SetGravity sets the gravity vector.
</p>

		</span>
	
		
		<h1 id="World.SetLinearDamping" class="hdr pkg hdr-method"><a href="#World.SetLinearDamping" title="permalink">»</a>&nbsp;func (w World) SetLinearDamping(scale float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetLinearDamping(scale float64)</pre>
			<p>
SetLinearDamping sets the linear damping scale.
</p>

		</span>
	
		
		<h1 id="World.SetLinearDampingThreshold" class="hdr pkg hdr-method"><a href="#World.SetLinearDampingThreshold" title="permalink">»</a>&nbsp;func (w World) SetLinearDampingThreshold(threshold float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetLinearDampingThreshold(threshold float64)</pre>
			<p>
SetLinearDampingThreshold sets the linear damping threshold.
</p>

		</span>
	
		
		<h1 id="World.SetMaxAngularSpeed" class="hdr pkg hdr-method"><a href="#World.SetMaxAngularSpeed" title="permalink">»</a>&nbsp;func (w World) SetMaxAngularSpeed(maxSpeed float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetMaxAngularSpeed(maxSpeed float64)</pre>
			<p>
SetMaxAngularSpeed sets the maximum angular speed.
</p>

		</span>
	
		
		<h1 id="World.SetQuickStepNumIterations" class="hdr pkg hdr-method"><a href="#World.SetQuickStepNumIterations" title="permalink">»</a>&nbsp;func (w World) SetQuickStepNumIterations(num int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetQuickStepNumIterations(num int)</pre>
			<p>
SetQuickStepNumIterations sets the number of iterations to execute during a
quick step.
</p>

		</span>
	
		
		<h1 id="World.SetQuickStepW" class="hdr pkg hdr-method"><a href="#World.SetQuickStepW" title="permalink">»</a>&nbsp;func (w World) SetQuickStepW(overRelaxation float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetQuickStepW(overRelaxation float64)</pre>
			<p>
SetQuickStepW sets the over-relaxation parameter.
</p>

		</span>
	
		
		<h1 id="World.SetStepIslandsProcessingMaxThreadCount" class="hdr pkg hdr-method"><a href="#World.SetStepIslandsProcessingMaxThreadCount" title="permalink">»</a>&nbsp;func (w World) SetStepIslandsProcessingMaxThreadCount(count int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) SetStepIslandsProcessingMaxThreadCount(count int)</pre>
			<p>
SetStepIslandsProcessingMaxThreadCount sets the maximum number of threads to
use for island stepping.
</p>

		</span>
	
		
		<h1 id="World.Step" class="hdr pkg hdr-method"><a href="#World.Step" title="permalink">»</a>&nbsp;func (w World) Step(stepSize float64) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) Step(stepSize float64) bool</pre>
			<p>
Step executes a simulation step, and returns whether the operation
succeeded.
</p>

		</span>
	
		
		<h1 id="World.StepIslandsProcessingMaxThreadCount" class="hdr pkg hdr-method"><a href="#World.StepIslandsProcessingMaxThreadCount" title="permalink">»</a>&nbsp;func (w World) StepIslandsProcessingMaxThreadCount() int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) StepIslandsProcessingMaxThreadCount() int</pre>
			<p>
StepIslandsProcessingMaxThreadCount returns the maximum number of threads to
use for island stepping.
</p>

		</span>
	
		
		<h1 id="World.UseSharedWorkingMemory" class="hdr pkg hdr-method"><a href="#World.UseSharedWorkingMemory" title="permalink">»</a>&nbsp;func (w World) UseSharedWorkingMemory(from World) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w World) UseSharedWorkingMemory(from World) bool</pre>
			<p>
UseSharedWorkingMemory enables sharing working memory with another world,
and returns whether the operation succeeded.
</p>

		</span>
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/native-ode/blob/dev/body.go" title="view source">body.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/contact.go" title="view source">contact.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/geom.go" title="view source">geom.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/heightfield.go" title="view source">heightfield.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/joint.go" title="view source">joint.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/mass.go" title="view source">mass.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/ode.go" title="view source">ode.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/space.go" title="view source">space.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/trimesh.go" title="view source">trimesh.go</a>
	
	<a href="https:/github.com/azul3d/native-ode/blob/dev/world.go" title="view source">world.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files"></span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div>Unless noted otherwise, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a BSD license.</div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



