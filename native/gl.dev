

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">
		<title>Azul3D</title>
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>




































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package gl</h1>
<span class="section pkg general">
	
		<p><em>In Development</em></p>
	
	<span class="pkg import">import "azul3d.org/native/gl.dev"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	
		<h2>WARNING!</h2>
		<span class="sub">
			
				<p>This version is the in-development -- <em><strong>unstable</strong></em> -- version of this package. Backwards incompatible changes will be made to this package in the future and as such <em>you should not use this version</em>! Please use the latest release <a href="/native/gl.v1">here</a>.</p>
			
		</span>
	

	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing an older version of this package (dev).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/gl.v1" title="azul3d.org/native/gl.v1">v1</a> (latest version)</span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/gl.dev" title="azul3d.org/native/gl.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package gl implements Go bindings to OpenGL.
</p>
<p>
Debugging OpenGL applications is made easy by using the build tag for this
package &#34;opengl_debug&#34;, that is:
</p>
<p>
go install -tags &#34;opengl_debug&#34; my/package/path
</p>
<p>
Debugging using this build tag has both advantages and disadvantages:
</p>
<p>
Advantage: glGetError() is ran directly after each OpenGL function call for
you, and in the event of an error a panic will occur in addition to a full
OpenGL stack trace being dumped to stdout before the panic occurs.
</p>
<p>
Advantage: Batching cannot be turned on, this can help identify batching
related bugs (due to incorrect memory management).
</p>
<p>
Disadvantage: Applications compiled with the opengl_debug build tag are slow
and will not run at full speed due to both disabled batching and the
additional glGetError call for each OpenGL call.
</p>
<p>
Package gl implements Go bindings to OpenGL.
</p>
<p>
Debugging OpenGL applications is made easy by using the build tag for this
package &#34;opengl_debug&#34;, that is:
</p>
<p>
go install -tags &#34;opengl_debug&#34; my/package/path
</p>
<p>
Debugging using this build tag has both advantages and disadvantages:
</p>
<p>
Advantage: glGetError() is ran directly after each OpenGL function call for
you, and in the event of an error a panic will occur in addition to a full
OpenGL stack trace being dumped to stdout before the panic occurs.
</p>
<p>
Advantage: Batching cannot be turned on, this can help identify batching
related bugs (due to incorrect memory management).
</p>
<p>
Disadvantage: Applications compiled with the opengl_debug build tag are slow
and will not run at full speed due to both disabled batching and the
additional glGetError call for each OpenGL call.
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Bool">func Bool(v uint8) bool</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ByteString">func ByteString(v *byte) string</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GLBool">func GLBool(v bool) uint8</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#String">func String(v *uint8) string</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context">type Context</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#New">func New() *Context</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Accum">func (c *Context) Accum(op int32, value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ActiveShaderProgram">func (c *Context) ActiveShaderProgram(pipeline uint32, program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ActiveTexture">func (c *Context) ActiveTexture(texture int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AlphaFunc">func (c *Context) AlphaFunc(pFunc int32, ref float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AreTexturesResident">func (c *Context) AreTexturesResident(n uint32, textures *uint32, residences *uint8) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ArrayElement">func (c *Context) ArrayElement(i int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastRelease">func (c *Context) AtLeastRelease(minRelease int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastShaderRelease">func (c *Context) AtLeastShaderRelease(minRelease int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastShaderVersion">func (c *Context) AtLeastShaderVersion(minMajor, minMinor int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AtLeastVersion">func (c *Context) AtLeastVersion(minMajor, minMinor int) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.AttachShader">func (c *Context) AttachShader(program uint32, shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Batching">func (c *Context) Batching() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Begin">func (c *Context) Begin(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BeginConditionalRender">func (c *Context) BeginConditionalRender(id uint32, mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BeginQuery">func (c *Context) BeginQuery(target int32, id uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BeginQueryIndexed">func (c *Context) BeginQueryIndexed(target int32, index uint32, id uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BeginTransformFeedback">func (c *Context) BeginTransformFeedback(primitiveMode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindAttribLocation">func (c *Context) BindAttribLocation(program uint32, index uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBuffer">func (c *Context) BindBuffer(target int32, buffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBufferBase">func (c *Context) BindBufferBase(target int32, index uint32, buffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBufferRange">func (c *Context) BindBufferRange(target int32, index uint32, buffer uint32, offset uintptr, size uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBuffersBase">func (c *Context) BindBuffersBase(target int32, first uint32, count uint32, buffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindBuffersRange">func (c *Context) BindBuffersRange(target int32, first uint32, count uint32, buffers *uint32, offsets *uintptr, sizes *uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindFragDataLocation">func (c *Context) BindFragDataLocation(program uint32, color uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindFragDataLocationIndexed">func (c *Context) BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindFramebuffer">func (c *Context) BindFramebuffer(target int32, framebuffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindImageTexture">func (c *Context) BindImageTexture(unit uint32, texture uint32, level int32, layered uint8, layer int32, access int32, format int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindImageTextures">func (c *Context) BindImageTextures(first uint32, count uint32, textures *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindProgramPipeline">func (c *Context) BindProgramPipeline(pipeline uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindRenderbuffer">func (c *Context) BindRenderbuffer(target int32, renderbuffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindSampler">func (c *Context) BindSampler(unit uint32, sampler uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindSamplers">func (c *Context) BindSamplers(first uint32, count uint32, samplers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindTexture">func (c *Context) BindTexture(target int32, texture uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindTextures">func (c *Context) BindTextures(first uint32, count uint32, textures *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindTransformFeedback">func (c *Context) BindTransformFeedback(target int32, id uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindVertexArray">func (c *Context) BindVertexArray(array uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindVertexBuffer">func (c *Context) BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BindVertexBuffers">func (c *Context) BindVertexBuffers(first uint32, count uint32, buffers *uint32, offsets *uintptr, strides *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Bitmap">func (c *Context) Bitmap(width uint32, height uint32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendColor">func (c *Context) BlendColor(red float32, green float32, blue float32, alpha float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendEquation">func (c *Context) BlendEquation(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendEquationSeparate">func (c *Context) BlendEquationSeparate(modeRGB int32, modeAlpha int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendEquationSeparatei">func (c *Context) BlendEquationSeparatei(buf uint32, modeRGB int32, modeAlpha int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendEquationi">func (c *Context) BlendEquationi(buf uint32, mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendFunc">func (c *Context) BlendFunc(sfactor int32, dfactor int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendFuncSeparate">func (c *Context) BlendFuncSeparate(sfactorRGB int32, dfactorRGB int32, sfactorAlpha int32, dfactorAlpha int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendFuncSeparatei">func (c *Context) BlendFuncSeparatei(buf uint32, srcRGB int32, dstRGB int32, srcAlpha int32, dstAlpha int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlendFunci">func (c *Context) BlendFunci(buf uint32, src int32, dst int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BlitFramebuffer">func (c *Context) BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BufferData">func (c *Context) BufferData(target int32, size uintptr, data unsafe.Pointer, usage int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BufferStorage">func (c *Context) BufferStorage(target int32, size uintptr, data unsafe.Pointer, flags uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.BufferSubData">func (c *Context) BufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CallList">func (c *Context) CallList(list uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CallLists">func (c *Context) CallLists(n uint32, pType int32, lists unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CheckFramebufferStatus">func (c *Context) CheckFramebufferStatus(target int32) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClampColor">func (c *Context) ClampColor(target int32, clamp int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Clear">func (c *Context) Clear(mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearAccum">func (c *Context) ClearAccum(red float32, green float32, blue float32, alpha float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferData">func (c *Context) ClearBufferData(target int32, internalformat int32, format int32, pType int32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferSubData">func (c *Context) ClearBufferSubData(target int32, internalformat int32, offset uintptr, size uintptr, format int32, pType int32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferfi">func (c *Context) ClearBufferfi(buffer int32, drawbuffer int32, depth float32, stencil int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferfv">func (c *Context) ClearBufferfv(buffer int32, drawbuffer int32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferiv">func (c *Context) ClearBufferiv(buffer int32, drawbuffer int32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearBufferuiv">func (c *Context) ClearBufferuiv(buffer int32, drawbuffer int32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearColor">func (c *Context) ClearColor(red float32, green float32, blue float32, alpha float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearDepth">func (c *Context) ClearDepth(depth float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearDepthf">func (c *Context) ClearDepthf(d float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearIndex">func (c *Context) ClearIndex(pC float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearStencil">func (c *Context) ClearStencil(s int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearTexImage">func (c *Context) ClearTexImage(texture uint32, level int32, format int32, pType int32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClearTexSubImage">func (c *Context) ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClientActiveTexture">func (c *Context) ClientActiveTexture(texture int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClientWaitSync">func (c *Context) ClientWaitSync(sync Sync, flags uint32, timeout uint64) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ClipPlane">func (c *Context) ClipPlane(plane int32, equation *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3b">func (c *Context) Color3b(red byte, green byte, blue byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3bv">func (c *Context) Color3bv(v *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3d">func (c *Context) Color3d(red float64, green float64, blue float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3dv">func (c *Context) Color3dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3f">func (c *Context) Color3f(red float32, green float32, blue float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3fv">func (c *Context) Color3fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3i">func (c *Context) Color3i(red int32, green int32, blue int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3iv">func (c *Context) Color3iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3s">func (c *Context) Color3s(red int16, green int16, blue int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3sv">func (c *Context) Color3sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3ub">func (c *Context) Color3ub(red uint8, green uint8, blue uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3ubv">func (c *Context) Color3ubv(v *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3ui">func (c *Context) Color3ui(red uint32, green uint32, blue uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3uiv">func (c *Context) Color3uiv(v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3us">func (c *Context) Color3us(red uint16, green uint16, blue uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color3usv">func (c *Context) Color3usv(v *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4b">func (c *Context) Color4b(red byte, green byte, blue byte, alpha byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4bv">func (c *Context) Color4bv(v *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4d">func (c *Context) Color4d(red float64, green float64, blue float64, alpha float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4dv">func (c *Context) Color4dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4f">func (c *Context) Color4f(red float32, green float32, blue float32, alpha float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4fv">func (c *Context) Color4fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4i">func (c *Context) Color4i(red int32, green int32, blue int32, alpha int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4iv">func (c *Context) Color4iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4s">func (c *Context) Color4s(red int16, green int16, blue int16, alpha int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4sv">func (c *Context) Color4sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4ub">func (c *Context) Color4ub(red uint8, green uint8, blue uint8, alpha uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4ubv">func (c *Context) Color4ubv(v *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4ui">func (c *Context) Color4ui(red uint32, green uint32, blue uint32, alpha uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4uiv">func (c *Context) Color4uiv(v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4us">func (c *Context) Color4us(red uint16, green uint16, blue uint16, alpha uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Color4usv">func (c *Context) Color4usv(v *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorMask">func (c *Context) ColorMask(red uint8, green uint8, blue uint8, alpha uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorMaski">func (c *Context) ColorMaski(index uint32, r uint8, g uint8, b uint8, a uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorMaterial">func (c *Context) ColorMaterial(face int32, mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorP3ui">func (c *Context) ColorP3ui(pType int32, color uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorP3uiv">func (c *Context) ColorP3uiv(pType int32, color *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorP4ui">func (c *Context) ColorP4ui(pType int32, color uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorP4uiv">func (c *Context) ColorP4uiv(pType int32, color *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ColorPointer">func (c *Context) ColorPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompileShader">func (c *Context) CompileShader(shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexImage1D">func (c *Context) CompressedTexImage1D(target int32, level int32, internalformat int32, width uint32, border int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexImage2D">func (c *Context) CompressedTexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexImage3D">func (c *Context) CompressedTexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexSubImage1D">func (c *Context) CompressedTexSubImage1D(target int32, level int32, xoffset int32, width uint32, format int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexSubImage2D">func (c *Context) CompressedTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CompressedTexSubImage3D">func (c *Context) CompressedTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, imageSize uint32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyBufferSubData">func (c *Context) CopyBufferSubData(readTarget int32, writeTarget int32, readOffset uintptr, writeOffset uintptr, size uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyImageSubData">func (c *Context) CopyImageSubData(srcName uint32, srcTarget int32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget int32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth uint32, srcHeight uint32, srcDepth uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyPixels">func (c *Context) CopyPixels(x int32, y int32, width uint32, height uint32, pType int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexImage1D">func (c *Context) CopyTexImage1D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, border int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexImage2D">func (c *Context) CopyTexImage2D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, height uint32, border int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexSubImage1D">func (c *Context) CopyTexSubImage1D(target int32, level int32, xoffset int32, x int32, y int32, width uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexSubImage2D">func (c *Context) CopyTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CopyTexSubImage3D">func (c *Context) CopyTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CreateProgram">func (c *Context) CreateProgram() uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CreateShader">func (c *Context) CreateShader(pType int32) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CreateShaderProgramv">func (c *Context) CreateShaderProgramv(pType int32, count uint32, strings **byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.CullFace">func (c *Context) CullFace(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DebugMessageCallback">func (c *Context) DebugMessageCallback(callback DEBUGPROC, userParam unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DebugMessageControl">func (c *Context) DebugMessageControl(source int32, pType int32, severity int32, count uint32, ids *uint32, enabled uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DebugMessageInsert">func (c *Context) DebugMessageInsert(source int32, pType int32, id uint32, severity int32, length uint32, buf *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteBuffers">func (c *Context) DeleteBuffers(n uint32, buffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteFramebuffers">func (c *Context) DeleteFramebuffers(n uint32, framebuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteLists">func (c *Context) DeleteLists(list uint32, pRange uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteProgram">func (c *Context) DeleteProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteProgramPipelines">func (c *Context) DeleteProgramPipelines(n uint32, pipelines *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteQueries">func (c *Context) DeleteQueries(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteRenderbuffers">func (c *Context) DeleteRenderbuffers(n uint32, renderbuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteSamplers">func (c *Context) DeleteSamplers(count uint32, samplers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteShader">func (c *Context) DeleteShader(shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteSync">func (c *Context) DeleteSync(sync Sync)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteTextures">func (c *Context) DeleteTextures(n uint32, textures *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteTransformFeedbacks">func (c *Context) DeleteTransformFeedbacks(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DeleteVertexArrays">func (c *Context) DeleteVertexArrays(n uint32, arrays *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthFunc">func (c *Context) DepthFunc(pFunc int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthMask">func (c *Context) DepthMask(flag uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthRange">func (c *Context) DepthRange(near float64, far float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthRangeArrayv">func (c *Context) DepthRangeArrayv(first uint32, count uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthRangeIndexed">func (c *Context) DepthRangeIndexed(index uint32, n float64, f float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DepthRangef">func (c *Context) DepthRangef(n float32, f float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DetachShader">func (c *Context) DetachShader(program uint32, shader uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Disable">func (c *Context) Disable(cap int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DisableClientState">func (c *Context) DisableClientState(array int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DisableVertexAttribArray">func (c *Context) DisableVertexAttribArray(index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Disablei">func (c *Context) Disablei(target int32, index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DispatchCompute">func (c *Context) DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DispatchComputeIndirect">func (c *Context) DispatchComputeIndirect(indirect uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawArrays">func (c *Context) DrawArrays(mode int32, first int32, count uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawArraysIndirect">func (c *Context) DrawArraysIndirect(mode int32, indirect unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawArraysInstanced">func (c *Context) DrawArraysInstanced(mode int32, first int32, count uint32, instancecount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawArraysInstancedBaseInstance">func (c *Context) DrawArraysInstancedBaseInstance(mode int32, first int32, count uint32, instancecount uint32, baseinstance uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawBuffer">func (c *Context) DrawBuffer(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawBuffers">func (c *Context) DrawBuffers(n uint32, bufs *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElements">func (c *Context) DrawElements(mode int32, count uint32, pType int32, indices unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsBaseVertex">func (c *Context) DrawElementsBaseVertex(mode int32, count uint32, pType int32, indices unsafe.Pointer, basevertex int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsIndirect">func (c *Context) DrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsInstanced">func (c *Context) DrawElementsInstanced(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsInstancedBaseInstance">func (c *Context) DrawElementsInstancedBaseInstance(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, baseinstance uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsInstancedBaseVertex">func (c *Context) DrawElementsInstancedBaseVertex(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, basevertex int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawElementsInstancedBaseVertexBaseInstance">func (c *Context) DrawElementsInstancedBaseVertexBaseInstance(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, basevertex int32, baseinstance uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawPixels">func (c *Context) DrawPixels(width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawRangeElements">func (c *Context) DrawRangeElements(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawRangeElementsBaseVertex">func (c *Context) DrawRangeElementsBaseVertex(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer, basevertex int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawTransformFeedback">func (c *Context) DrawTransformFeedback(mode int32, id uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawTransformFeedbackInstanced">func (c *Context) DrawTransformFeedbackInstanced(mode int32, id uint32, instancecount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawTransformFeedbackStream">func (c *Context) DrawTransformFeedbackStream(mode int32, id uint32, stream uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.DrawTransformFeedbackStreamInstanced">func (c *Context) DrawTransformFeedbackStreamInstanced(mode int32, id uint32, stream uint32, instancecount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EdgeFlag">func (c *Context) EdgeFlag(flag uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EdgeFlagPointer">func (c *Context) EdgeFlagPointer(stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EdgeFlagv">func (c *Context) EdgeFlagv(flag *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Enable">func (c *Context) Enable(cap int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EnableClientState">func (c *Context) EnableClientState(array int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EnableVertexAttribArray">func (c *Context) EnableVertexAttribArray(index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Enablei">func (c *Context) Enablei(target int32, index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.End">func (c *Context) End()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EndConditionalRender">func (c *Context) EndConditionalRender()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EndList">func (c *Context) EndList()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EndQuery">func (c *Context) EndQuery(target int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EndQueryIndexed">func (c *Context) EndQueryIndexed(target int32, index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EndTransformFeedback">func (c *Context) EndTransformFeedback()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord1d">func (c *Context) EvalCoord1d(u float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord1dv">func (c *Context) EvalCoord1dv(u *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord1f">func (c *Context) EvalCoord1f(u float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord1fv">func (c *Context) EvalCoord1fv(u *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord2d">func (c *Context) EvalCoord2d(u float64, v float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord2dv">func (c *Context) EvalCoord2dv(u *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord2f">func (c *Context) EvalCoord2f(u float32, v float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalCoord2fv">func (c *Context) EvalCoord2fv(u *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalMesh1">func (c *Context) EvalMesh1(mode int32, i1 int32, i2 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalMesh2">func (c *Context) EvalMesh2(mode int32, i1 int32, i2 int32, j1 int32, j2 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalPoint1">func (c *Context) EvalPoint1(i int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.EvalPoint2">func (c *Context) EvalPoint2(i int32, j int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Execute">func (c *Context) Execute()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Extension">func (c *Context) Extension(name string) (supported bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Extensions">func (c *Context) Extensions() []string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FeedbackBuffer">func (c *Context) FeedbackBuffer(size uint32, pType int32, buffer *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FenceSync">func (c *Context) FenceSync(condition int32, flags uint32) Sync</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Finish">func (c *Context) Finish()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Flush">func (c *Context) Flush()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FlushMappedBufferRange">func (c *Context) FlushMappedBufferRange(target int32, offset uintptr, length uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FogCoordPointer">func (c *Context) FogCoordPointer(pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FogCoordd">func (c *Context) FogCoordd(coord float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FogCoorddv">func (c *Context) FogCoorddv(coord *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FogCoordf">func (c *Context) FogCoordf(coord float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FogCoordfv">func (c *Context) FogCoordfv(coord *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Fogf">func (c *Context) Fogf(pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Fogfv">func (c *Context) Fogfv(pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Fogi">func (c *Context) Fogi(pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Fogiv">func (c *Context) Fogiv(pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferParameteri">func (c *Context) FramebufferParameteri(target int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferRenderbuffer">func (c *Context) FramebufferRenderbuffer(target int32, attachment int32, renderbuffertarget int32, renderbuffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferTexture">func (c *Context) FramebufferTexture(target int32, attachment int32, texture uint32, level int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferTexture1D">func (c *Context) FramebufferTexture1D(target int32, attachment int32, textarget int32, texture uint32, level int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferTexture2D">func (c *Context) FramebufferTexture2D(target int32, attachment int32, textarget int32, texture uint32, level int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferTexture3D">func (c *Context) FramebufferTexture3D(target int32, attachment int32, textarget int32, texture uint32, level int32, zoffset int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FramebufferTextureLayer">func (c *Context) FramebufferTextureLayer(target int32, attachment int32, texture uint32, level int32, layer int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.FrontFace">func (c *Context) FrontFace(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Frustum">func (c *Context) Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenBuffers">func (c *Context) GenBuffers(n uint32, buffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenFramebuffers">func (c *Context) GenFramebuffers(n uint32, framebuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenLists">func (c *Context) GenLists(pRange uint32) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenProgramPipelines">func (c *Context) GenProgramPipelines(n uint32, pipelines *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenQueries">func (c *Context) GenQueries(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenRenderbuffers">func (c *Context) GenRenderbuffers(n uint32, renderbuffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenSamplers">func (c *Context) GenSamplers(count uint32, samplers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenTextures">func (c *Context) GenTextures(n uint32, textures *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenTransformFeedbacks">func (c *Context) GenTransformFeedbacks(n uint32, ids *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenVertexArrays">func (c *Context) GenVertexArrays(n uint32, arrays *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GenerateMipmap">func (c *Context) GenerateMipmap(target int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveAtomicCounterBufferiv">func (c *Context) GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveAttrib">func (c *Context) GetActiveAttrib(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveSubroutineName">func (c *Context) GetActiveSubroutineName(program uint32, shadertype int32, index uint32, bufsize uint32, length *uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveSubroutineUniformName">func (c *Context) GetActiveSubroutineUniformName(program uint32, shadertype int32, index uint32, bufsize uint32, length *uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveSubroutineUniformiv">func (c *Context) GetActiveSubroutineUniformiv(program uint32, shadertype int32, index uint32, pname int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniform">func (c *Context) GetActiveUniform(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniformBlockName">func (c *Context) GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize uint32, length *uint32, uniformBlockName *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniformBlockiv">func (c *Context) GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniformName">func (c *Context) GetActiveUniformName(program uint32, uniformIndex uint32, bufSize uint32, length *uint32, uniformName *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetActiveUniformsiv">func (c *Context) GetActiveUniformsiv(program uint32, uniformCount uint32, uniformIndices *uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetAttachedShaders">func (c *Context) GetAttachedShaders(program uint32, maxCount uint32, count *uint32, shaders *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetAttribLocation">func (c *Context) GetAttribLocation(program uint32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBooleani_v">func (c *Context) GetBooleani_v(target int32, index uint32, data *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBooleanv">func (c *Context) GetBooleanv(pname int32, data *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBufferParameteri64v">func (c *Context) GetBufferParameteri64v(target int32, pname int32, params *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBufferParameteriv">func (c *Context) GetBufferParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBufferPointerv">func (c *Context) GetBufferPointerv(target int32, pname int32, params *unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetBufferSubData">func (c *Context) GetBufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetClipPlane">func (c *Context) GetClipPlane(plane int32, equation *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetCompressedTexImage">func (c *Context) GetCompressedTexImage(target int32, level int32, img unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetDebugMessageLog">func (c *Context) GetDebugMessageLog(count uint32, bufSize uint32, sources *int32, types *int32, ids *uint32, severities *int32, lengths *uint32, messageLog *byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetDoublei_v">func (c *Context) GetDoublei_v(target int32, index uint32, data *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetDoublev">func (c *Context) GetDoublev(pname int32, data *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetError">func (c *Context) GetError() int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFloati_v">func (c *Context) GetFloati_v(target int32, index uint32, data *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFloatv">func (c *Context) GetFloatv(pname int32, data *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFragDataIndex">func (c *Context) GetFragDataIndex(program uint32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFragDataLocation">func (c *Context) GetFragDataLocation(program uint32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFramebufferAttachmentParameteriv">func (c *Context) GetFramebufferAttachmentParameteriv(target int32, attachment int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetFramebufferParameteriv">func (c *Context) GetFramebufferParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetInteger64i_v">func (c *Context) GetInteger64i_v(target int32, index uint32, data *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetInteger64v">func (c *Context) GetInteger64v(pname int32, data *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetIntegeri_v">func (c *Context) GetIntegeri_v(target int32, index uint32, data *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetIntegerv">func (c *Context) GetIntegerv(pname int32, data *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetInternalformati64v">func (c *Context) GetInternalformati64v(target int32, internalformat int32, pname int32, bufSize uint32, params *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetInternalformativ">func (c *Context) GetInternalformativ(target int32, internalformat int32, pname int32, bufSize uint32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetLightfv">func (c *Context) GetLightfv(light int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetLightiv">func (c *Context) GetLightiv(light int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetMapdv">func (c *Context) GetMapdv(target int32, query int32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetMapfv">func (c *Context) GetMapfv(target int32, query int32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetMapiv">func (c *Context) GetMapiv(target int32, query int32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetMaterialfv">func (c *Context) GetMaterialfv(face int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetMaterialiv">func (c *Context) GetMaterialiv(face int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetMultisamplefv">func (c *Context) GetMultisamplefv(pname int32, index uint32, val *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetObjectLabel">func (c *Context) GetObjectLabel(identifier int32, name uint32, bufSize uint32, length *uint32, label *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetObjectPtrLabel">func (c *Context) GetObjectPtrLabel(ptr unsafe.Pointer, bufSize uint32, length *uint32, label *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetPixelMapfv">func (c *Context) GetPixelMapfv(pMap int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetPixelMapuiv">func (c *Context) GetPixelMapuiv(pMap int32, values *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetPixelMapusv">func (c *Context) GetPixelMapusv(pMap int32, values *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetPointerv">func (c *Context) GetPointerv(pname int32, params *unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetPolygonStipple">func (c *Context) GetPolygonStipple(mask *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramBinary">func (c *Context) GetProgramBinary(program uint32, bufSize uint32, length *uint32, binaryFormat *int32, binary unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramInfoLog">func (c *Context) GetProgramInfoLog(program uint32, bufSize uint32, length *uint32, infoLog *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramInterfaceiv">func (c *Context) GetProgramInterfaceiv(program uint32, programInterface int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramPipelineInfoLog">func (c *Context) GetProgramPipelineInfoLog(pipeline uint32, bufSize uint32, length *uint32, infoLog *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramPipelineiv">func (c *Context) GetProgramPipelineiv(pipeline uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceIndex">func (c *Context) GetProgramResourceIndex(program uint32, programInterface int32, name *byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceLocation">func (c *Context) GetProgramResourceLocation(program uint32, programInterface int32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceLocationIndex">func (c *Context) GetProgramResourceLocationIndex(program uint32, programInterface int32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceName">func (c *Context) GetProgramResourceName(program uint32, programInterface int32, index uint32, bufSize uint32, length *uint32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramResourceiv">func (c *Context) GetProgramResourceiv(program uint32, programInterface int32, index uint32, propCount uint32, props *int32, bufSize uint32, length *uint32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramStageiv">func (c *Context) GetProgramStageiv(program uint32, shadertype int32, pname int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetProgramiv">func (c *Context) GetProgramiv(program uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryIndexediv">func (c *Context) GetQueryIndexediv(target int32, index uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryObjecti64v">func (c *Context) GetQueryObjecti64v(id uint32, pname int32, params *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryObjectiv">func (c *Context) GetQueryObjectiv(id uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryObjectui64v">func (c *Context) GetQueryObjectui64v(id uint32, pname int32, params *uint64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryObjectuiv">func (c *Context) GetQueryObjectuiv(id uint32, pname int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetQueryiv">func (c *Context) GetQueryiv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetRenderbufferParameteriv">func (c *Context) GetRenderbufferParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSamplerParameterIiv">func (c *Context) GetSamplerParameterIiv(sampler uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSamplerParameterIuiv">func (c *Context) GetSamplerParameterIuiv(sampler uint32, pname int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSamplerParameterfv">func (c *Context) GetSamplerParameterfv(sampler uint32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSamplerParameteriv">func (c *Context) GetSamplerParameteriv(sampler uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderInfoLog">func (c *Context) GetShaderInfoLog(shader uint32, bufSize uint32, length *uint32, infoLog *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderPrecisionFormat">func (c *Context) GetShaderPrecisionFormat(shadertype int32, precisiontype int32, pRange *int32, precision *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderSource">func (c *Context) GetShaderSource(shader uint32, bufSize uint32, length *uint32, source *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetShaderiv">func (c *Context) GetShaderiv(shader uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetString">func (c *Context) GetString(name int32) *uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetStringi">func (c *Context) GetStringi(name int32, index uint32) *uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSubroutineIndex">func (c *Context) GetSubroutineIndex(program uint32, shadertype int32, name *byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSubroutineUniformLocation">func (c *Context) GetSubroutineUniformLocation(program uint32, shadertype int32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetSynciv">func (c *Context) GetSynciv(sync Sync, pname int32, bufSize uint32, length *uint32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexEnvfv">func (c *Context) GetTexEnvfv(target int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexEnviv">func (c *Context) GetTexEnviv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexGendv">func (c *Context) GetTexGendv(coord int32, pname int32, params *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexGenfv">func (c *Context) GetTexGenfv(coord int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexGeniv">func (c *Context) GetTexGeniv(coord int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexImage">func (c *Context) GetTexImage(target int32, level int32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexLevelParameterfv">func (c *Context) GetTexLevelParameterfv(target int32, level int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexLevelParameteriv">func (c *Context) GetTexLevelParameteriv(target int32, level int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexParameterIiv">func (c *Context) GetTexParameterIiv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexParameterIuiv">func (c *Context) GetTexParameterIuiv(target int32, pname int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexParameterfv">func (c *Context) GetTexParameterfv(target int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTexParameteriv">func (c *Context) GetTexParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetTransformFeedbackVarying">func (c *Context) GetTransformFeedbackVarying(program uint32, index uint32, bufSize uint32, length *uint32, size *uint32, pType *int32, name *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformBlockIndex">func (c *Context) GetUniformBlockIndex(program uint32, uniformBlockName *byte) uint32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformIndices">func (c *Context) GetUniformIndices(program uint32, uniformCount uint32, uniformNames **byte, uniformIndices *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformLocation">func (c *Context) GetUniformLocation(program uint32, name *byte) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformSubroutineuiv">func (c *Context) GetUniformSubroutineuiv(shadertype int32, location int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformdv">func (c *Context) GetUniformdv(program uint32, location int32, params *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformfv">func (c *Context) GetUniformfv(program uint32, location int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformiv">func (c *Context) GetUniformiv(program uint32, location int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetUniformuiv">func (c *Context) GetUniformuiv(program uint32, location int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribIiv">func (c *Context) GetVertexAttribIiv(index uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribIuiv">func (c *Context) GetVertexAttribIuiv(index uint32, pname int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribLdv">func (c *Context) GetVertexAttribLdv(index uint32, pname int32, params *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribPointerv">func (c *Context) GetVertexAttribPointerv(index uint32, pname int32, pointer *unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribdv">func (c *Context) GetVertexAttribdv(index uint32, pname int32, params *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribfv">func (c *Context) GetVertexAttribfv(index uint32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.GetVertexAttribiv">func (c *Context) GetVertexAttribiv(index uint32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Hint">func (c *Context) Hint(target int32, mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IndexMask">func (c *Context) IndexMask(mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IndexPointer">func (c *Context) IndexPointer(pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexd">func (c *Context) Indexd(pC float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexdv">func (c *Context) Indexdv(pC *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexf">func (c *Context) Indexf(pC float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexfv">func (c *Context) Indexfv(pC *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexi">func (c *Context) Indexi(pC int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexiv">func (c *Context) Indexiv(pC *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexs">func (c *Context) Indexs(pC int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexsv">func (c *Context) Indexsv(pC *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexub">func (c *Context) Indexub(pC uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Indexubv">func (c *Context) Indexubv(pC *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InitNames">func (c *Context) InitNames()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InterleavedArrays">func (c *Context) InterleavedArrays(format int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateBufferData">func (c *Context) InvalidateBufferData(buffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateBufferSubData">func (c *Context) InvalidateBufferSubData(buffer uint32, offset uintptr, length uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateFramebuffer">func (c *Context) InvalidateFramebuffer(target int32, numAttachments uint32, attachments *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateSubFramebuffer">func (c *Context) InvalidateSubFramebuffer(target int32, numAttachments uint32, attachments *int32, x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateTexImage">func (c *Context) InvalidateTexImage(texture uint32, level int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.InvalidateTexSubImage">func (c *Context) InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsBuffer">func (c *Context) IsBuffer(buffer uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsEnabled">func (c *Context) IsEnabled(cap int32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsEnabledi">func (c *Context) IsEnabledi(target int32, index uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsFramebuffer">func (c *Context) IsFramebuffer(framebuffer uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsList">func (c *Context) IsList(list uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsProgram">func (c *Context) IsProgram(program uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsProgramPipeline">func (c *Context) IsProgramPipeline(pipeline uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsQuery">func (c *Context) IsQuery(id uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsRenderbuffer">func (c *Context) IsRenderbuffer(renderbuffer uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsSampler">func (c *Context) IsSampler(sampler uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsShader">func (c *Context) IsShader(shader uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsSync">func (c *Context) IsSync(sync Sync) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsTexture">func (c *Context) IsTexture(texture uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsTransformFeedback">func (c *Context) IsTransformFeedback(id uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.IsVertexArray">func (c *Context) IsVertexArray(array uint32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LightModelf">func (c *Context) LightModelf(pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LightModelfv">func (c *Context) LightModelfv(pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LightModeli">func (c *Context) LightModeli(pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LightModeliv">func (c *Context) LightModeliv(pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Lightf">func (c *Context) Lightf(light int32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Lightfv">func (c *Context) Lightfv(light int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Lighti">func (c *Context) Lighti(light int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Lightiv">func (c *Context) Lightiv(light int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LineStipple">func (c *Context) LineStipple(factor int32, pattern uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LineWidth">func (c *Context) LineWidth(width float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LinkProgram">func (c *Context) LinkProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ListBase">func (c *Context) ListBase(base uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LoadIdentity">func (c *Context) LoadIdentity()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LoadMatrixd">func (c *Context) LoadMatrixd(m *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LoadMatrixf">func (c *Context) LoadMatrixf(m *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LoadName">func (c *Context) LoadName(name uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LoadTransposeMatrixd">func (c *Context) LoadTransposeMatrixd(m *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LoadTransposeMatrixf">func (c *Context) LoadTransposeMatrixf(m *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.LogicOp">func (c *Context) LogicOp(opcode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Map1d">func (c *Context) Map1d(target int32, u1 float64, u2 float64, stride int32, order int32, points *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Map1f">func (c *Context) Map1f(target int32, u1 float32, u2 float32, stride int32, order int32, points *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Map2d">func (c *Context) Map2d(target int32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Map2f">func (c *Context) Map2f(target int32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MapBuffer">func (c *Context) MapBuffer(target int32, access int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MapBufferRange">func (c *Context) MapBufferRange(target int32, offset uintptr, length uintptr, access uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MapGrid1d">func (c *Context) MapGrid1d(un int32, u1 float64, u2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MapGrid1f">func (c *Context) MapGrid1f(un int32, u1 float32, u2 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MapGrid2d">func (c *Context) MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MapGrid2f">func (c *Context) MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Materialf">func (c *Context) Materialf(face int32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Materialfv">func (c *Context) Materialfv(face int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Materiali">func (c *Context) Materiali(face int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Materialiv">func (c *Context) Materialiv(face int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MatrixMode">func (c *Context) MatrixMode(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MemoryBarrier">func (c *Context) MemoryBarrier(barriers uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MinSampleShading">func (c *Context) MinSampleShading(value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultMatrixd">func (c *Context) MultMatrixd(m *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultMatrixf">func (c *Context) MultMatrixf(m *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultTransposeMatrixd">func (c *Context) MultTransposeMatrixd(m *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultTransposeMatrixf">func (c *Context) MultTransposeMatrixf(m *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiDrawArrays">func (c *Context) MultiDrawArrays(mode int32, first *int32, count *uint32, drawcount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiDrawArraysIndirect">func (c *Context) MultiDrawArraysIndirect(mode int32, indirect unsafe.Pointer, drawcount uint32, stride uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiDrawElements">func (c *Context) MultiDrawElements(mode int32, count *uint32, pType int32, indices *unsafe.Pointer, drawcount uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiDrawElementsBaseVertex">func (c *Context) MultiDrawElementsBaseVertex(mode int32, count *uint32, pType int32, indices *unsafe.Pointer, drawcount uint32, basevertex *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiDrawElementsIndirect">func (c *Context) MultiDrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer, drawcount uint32, stride uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1d">func (c *Context) MultiTexCoord1d(target int32, s float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1dv">func (c *Context) MultiTexCoord1dv(target int32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1f">func (c *Context) MultiTexCoord1f(target int32, s float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1fv">func (c *Context) MultiTexCoord1fv(target int32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1i">func (c *Context) MultiTexCoord1i(target int32, s int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1iv">func (c *Context) MultiTexCoord1iv(target int32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1s">func (c *Context) MultiTexCoord1s(target int32, s int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord1sv">func (c *Context) MultiTexCoord1sv(target int32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2d">func (c *Context) MultiTexCoord2d(target int32, s float64, t float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2dv">func (c *Context) MultiTexCoord2dv(target int32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2f">func (c *Context) MultiTexCoord2f(target int32, s float32, t float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2fv">func (c *Context) MultiTexCoord2fv(target int32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2i">func (c *Context) MultiTexCoord2i(target int32, s int32, t int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2iv">func (c *Context) MultiTexCoord2iv(target int32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2s">func (c *Context) MultiTexCoord2s(target int32, s int16, t int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord2sv">func (c *Context) MultiTexCoord2sv(target int32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3d">func (c *Context) MultiTexCoord3d(target int32, s float64, t float64, r float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3dv">func (c *Context) MultiTexCoord3dv(target int32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3f">func (c *Context) MultiTexCoord3f(target int32, s float32, t float32, r float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3fv">func (c *Context) MultiTexCoord3fv(target int32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3i">func (c *Context) MultiTexCoord3i(target int32, s int32, t int32, r int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3iv">func (c *Context) MultiTexCoord3iv(target int32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3s">func (c *Context) MultiTexCoord3s(target int32, s int16, t int16, r int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord3sv">func (c *Context) MultiTexCoord3sv(target int32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4d">func (c *Context) MultiTexCoord4d(target int32, s float64, t float64, r float64, q float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4dv">func (c *Context) MultiTexCoord4dv(target int32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4f">func (c *Context) MultiTexCoord4f(target int32, s float32, t float32, r float32, q float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4fv">func (c *Context) MultiTexCoord4fv(target int32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4i">func (c *Context) MultiTexCoord4i(target int32, s int32, t int32, r int32, q int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4iv">func (c *Context) MultiTexCoord4iv(target int32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4s">func (c *Context) MultiTexCoord4s(target int32, s int16, t int16, r int16, q int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoord4sv">func (c *Context) MultiTexCoord4sv(target int32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP1ui">func (c *Context) MultiTexCoordP1ui(texture int32, pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP1uiv">func (c *Context) MultiTexCoordP1uiv(texture int32, pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP2ui">func (c *Context) MultiTexCoordP2ui(texture int32, pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP2uiv">func (c *Context) MultiTexCoordP2uiv(texture int32, pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP3ui">func (c *Context) MultiTexCoordP3ui(texture int32, pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP3uiv">func (c *Context) MultiTexCoordP3uiv(texture int32, pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP4ui">func (c *Context) MultiTexCoordP4ui(texture int32, pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.MultiTexCoordP4uiv">func (c *Context) MultiTexCoordP4uiv(texture int32, pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.NewList">func (c *Context) NewList(list uint32, mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3b">func (c *Context) Normal3b(nx byte, ny byte, nz byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3bv">func (c *Context) Normal3bv(v *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3d">func (c *Context) Normal3d(nx float64, ny float64, nz float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3dv">func (c *Context) Normal3dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3f">func (c *Context) Normal3f(nx float32, ny float32, nz float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3fv">func (c *Context) Normal3fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3i">func (c *Context) Normal3i(nx int32, ny int32, nz int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3iv">func (c *Context) Normal3iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3s">func (c *Context) Normal3s(nx int16, ny int16, nz int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Normal3sv">func (c *Context) Normal3sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.NormalP3ui">func (c *Context) NormalP3ui(pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.NormalP3uiv">func (c *Context) NormalP3uiv(pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.NormalPointer">func (c *Context) NormalPointer(pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ObjectLabel">func (c *Context) ObjectLabel(identifier int32, name uint32, length uint32, label *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ObjectPtrLabel">func (c *Context) ObjectPtrLabel(ptr unsafe.Pointer, length uint32, label *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Ortho">func (c *Context) Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Panic">func (c *Context) Panic(err string)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PassThrough">func (c *Context) PassThrough(token float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PatchParameterfv">func (c *Context) PatchParameterfv(pname int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PatchParameteri">func (c *Context) PatchParameteri(pname int32, value int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PauseTransformFeedback">func (c *Context) PauseTransformFeedback()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelMapfv">func (c *Context) PixelMapfv(pMap int32, mapsize uint32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelMapuiv">func (c *Context) PixelMapuiv(pMap int32, mapsize uint32, values *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelMapusv">func (c *Context) PixelMapusv(pMap int32, mapsize uint32, values *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelStoref">func (c *Context) PixelStoref(pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelStorei">func (c *Context) PixelStorei(pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelTransferf">func (c *Context) PixelTransferf(pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelTransferi">func (c *Context) PixelTransferi(pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PixelZoom">func (c *Context) PixelZoom(xfactor float32, yfactor float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PointParameterf">func (c *Context) PointParameterf(pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PointParameterfv">func (c *Context) PointParameterfv(pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PointParameteri">func (c *Context) PointParameteri(pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PointParameteriv">func (c *Context) PointParameteriv(pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PointSize">func (c *Context) PointSize(size float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PolygonMode">func (c *Context) PolygonMode(face int32, mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PolygonOffset">func (c *Context) PolygonOffset(factor float32, units float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PolygonStipple">func (c *Context) PolygonStipple(mask *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PopAttrib">func (c *Context) PopAttrib()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PopClientAttrib">func (c *Context) PopClientAttrib()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PopDebugGroup">func (c *Context) PopDebugGroup()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PopMatrix">func (c *Context) PopMatrix()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PopName">func (c *Context) PopName()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PrimitiveRestartIndex">func (c *Context) PrimitiveRestartIndex(index uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PrioritizeTextures">func (c *Context) PrioritizeTextures(n uint32, textures *uint32, priorities *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramBinary">func (c *Context) ProgramBinary(program uint32, binaryFormat int32, binary unsafe.Pointer, length uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramParameteri">func (c *Context) ProgramParameteri(program uint32, pname int32, value int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1d">func (c *Context) ProgramUniform1d(program uint32, location int32, v0 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1dv">func (c *Context) ProgramUniform1dv(program uint32, location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1f">func (c *Context) ProgramUniform1f(program uint32, location int32, v0 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1fv">func (c *Context) ProgramUniform1fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1i">func (c *Context) ProgramUniform1i(program uint32, location int32, v0 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1iv">func (c *Context) ProgramUniform1iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1ui">func (c *Context) ProgramUniform1ui(program uint32, location int32, v0 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform1uiv">func (c *Context) ProgramUniform1uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2d">func (c *Context) ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2dv">func (c *Context) ProgramUniform2dv(program uint32, location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2f">func (c *Context) ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2fv">func (c *Context) ProgramUniform2fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2i">func (c *Context) ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2iv">func (c *Context) ProgramUniform2iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2ui">func (c *Context) ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform2uiv">func (c *Context) ProgramUniform2uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3d">func (c *Context) ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3dv">func (c *Context) ProgramUniform3dv(program uint32, location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3f">func (c *Context) ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3fv">func (c *Context) ProgramUniform3fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3i">func (c *Context) ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3iv">func (c *Context) ProgramUniform3iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3ui">func (c *Context) ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform3uiv">func (c *Context) ProgramUniform3uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4d">func (c *Context) ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4dv">func (c *Context) ProgramUniform4dv(program uint32, location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4f">func (c *Context) ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4fv">func (c *Context) ProgramUniform4fv(program uint32, location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4i">func (c *Context) ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4iv">func (c *Context) ProgramUniform4iv(program uint32, location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4ui">func (c *Context) ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniform4uiv">func (c *Context) ProgramUniform4uiv(program uint32, location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2dv">func (c *Context) ProgramUniformMatrix2dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2fv">func (c *Context) ProgramUniformMatrix2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2x3dv">func (c *Context) ProgramUniformMatrix2x3dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2x3fv">func (c *Context) ProgramUniformMatrix2x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2x4dv">func (c *Context) ProgramUniformMatrix2x4dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix2x4fv">func (c *Context) ProgramUniformMatrix2x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3dv">func (c *Context) ProgramUniformMatrix3dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3fv">func (c *Context) ProgramUniformMatrix3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3x2dv">func (c *Context) ProgramUniformMatrix3x2dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3x2fv">func (c *Context) ProgramUniformMatrix3x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3x4dv">func (c *Context) ProgramUniformMatrix3x4dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix3x4fv">func (c *Context) ProgramUniformMatrix3x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4dv">func (c *Context) ProgramUniformMatrix4dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4fv">func (c *Context) ProgramUniformMatrix4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4x2dv">func (c *Context) ProgramUniformMatrix4x2dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4x2fv">func (c *Context) ProgramUniformMatrix4x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4x3dv">func (c *Context) ProgramUniformMatrix4x3dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProgramUniformMatrix4x3fv">func (c *Context) ProgramUniformMatrix4x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ProvokingVertex">func (c *Context) ProvokingVertex(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PushAttrib">func (c *Context) PushAttrib(mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PushClientAttrib">func (c *Context) PushClientAttrib(mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PushDebugGroup">func (c *Context) PushDebugGroup(source int32, id uint32, length uint32, message *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PushMatrix">func (c *Context) PushMatrix()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.PushName">func (c *Context) PushName(name uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.QueryCounter">func (c *Context) QueryCounter(id uint32, target int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2d">func (c *Context) RasterPos2d(x float64, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2dv">func (c *Context) RasterPos2dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2f">func (c *Context) RasterPos2f(x float32, y float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2fv">func (c *Context) RasterPos2fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2i">func (c *Context) RasterPos2i(x int32, y int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2iv">func (c *Context) RasterPos2iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2s">func (c *Context) RasterPos2s(x int16, y int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos2sv">func (c *Context) RasterPos2sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3d">func (c *Context) RasterPos3d(x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3dv">func (c *Context) RasterPos3dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3f">func (c *Context) RasterPos3f(x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3fv">func (c *Context) RasterPos3fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3i">func (c *Context) RasterPos3i(x int32, y int32, z int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3iv">func (c *Context) RasterPos3iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3s">func (c *Context) RasterPos3s(x int16, y int16, z int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos3sv">func (c *Context) RasterPos3sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4d">func (c *Context) RasterPos4d(x float64, y float64, z float64, w float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4dv">func (c *Context) RasterPos4dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4f">func (c *Context) RasterPos4f(x float32, y float32, z float32, w float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4fv">func (c *Context) RasterPos4fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4i">func (c *Context) RasterPos4i(x int32, y int32, z int32, w int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4iv">func (c *Context) RasterPos4iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4s">func (c *Context) RasterPos4s(x int16, y int16, z int16, w int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RasterPos4sv">func (c *Context) RasterPos4sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ReadBuffer">func (c *Context) ReadBuffer(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ReadPixels">func (c *Context) ReadPixels(x int32, y int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rectd">func (c *Context) Rectd(x1 float64, y1 float64, x2 float64, y2 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rectdv">func (c *Context) Rectdv(v1 *float64, v2 *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rectf">func (c *Context) Rectf(x1 float32, y1 float32, x2 float32, y2 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rectfv">func (c *Context) Rectfv(v1 *float32, v2 *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Recti">func (c *Context) Recti(x1 int32, y1 int32, x2 int32, y2 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rectiv">func (c *Context) Rectiv(v1 *int32, v2 *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rects">func (c *Context) Rects(x1 int16, y1 int16, x2 int16, y2 int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rectsv">func (c *Context) Rectsv(v1 *int16, v2 *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ReleaseShaderCompiler">func (c *Context) ReleaseShaderCompiler()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RenderMode">func (c *Context) RenderMode(mode int32) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RenderbufferStorage">func (c *Context) RenderbufferStorage(target int32, internalformat int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.RenderbufferStorageMultisample">func (c *Context) RenderbufferStorageMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ResumeTransformFeedback">func (c *Context) ResumeTransformFeedback()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rotated">func (c *Context) Rotated(angle float64, x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Rotatef">func (c *Context) Rotatef(angle float32, x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SampleCoverage">func (c *Context) SampleCoverage(value float32, invert uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SampleMaski">func (c *Context) SampleMaski(maskNumber uint32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameterIiv">func (c *Context) SamplerParameterIiv(sampler uint32, pname int32, param *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameterIuiv">func (c *Context) SamplerParameterIuiv(sampler uint32, pname int32, param *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameterf">func (c *Context) SamplerParameterf(sampler uint32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameterfv">func (c *Context) SamplerParameterfv(sampler uint32, pname int32, param *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameteri">func (c *Context) SamplerParameteri(sampler uint32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SamplerParameteriv">func (c *Context) SamplerParameteriv(sampler uint32, pname int32, param *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Scaled">func (c *Context) Scaled(x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Scalef">func (c *Context) Scalef(x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Scissor">func (c *Context) Scissor(x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ScissorArrayv">func (c *Context) ScissorArrayv(first uint32, count uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ScissorIndexed">func (c *Context) ScissorIndexed(index uint32, left int32, bottom int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ScissorIndexedv">func (c *Context) ScissorIndexedv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3b">func (c *Context) SecondaryColor3b(red byte, green byte, blue byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3bv">func (c *Context) SecondaryColor3bv(v *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3d">func (c *Context) SecondaryColor3d(red float64, green float64, blue float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3dv">func (c *Context) SecondaryColor3dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3f">func (c *Context) SecondaryColor3f(red float32, green float32, blue float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3fv">func (c *Context) SecondaryColor3fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3i">func (c *Context) SecondaryColor3i(red int32, green int32, blue int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3iv">func (c *Context) SecondaryColor3iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3s">func (c *Context) SecondaryColor3s(red int16, green int16, blue int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3sv">func (c *Context) SecondaryColor3sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3ub">func (c *Context) SecondaryColor3ub(red uint8, green uint8, blue uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3ubv">func (c *Context) SecondaryColor3ubv(v *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3ui">func (c *Context) SecondaryColor3ui(red uint32, green uint32, blue uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3uiv">func (c *Context) SecondaryColor3uiv(v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3us">func (c *Context) SecondaryColor3us(red uint16, green uint16, blue uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColor3usv">func (c *Context) SecondaryColor3usv(v *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColorP3ui">func (c *Context) SecondaryColorP3ui(pType int32, color uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColorP3uiv">func (c *Context) SecondaryColorP3uiv(pType int32, color *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SecondaryColorPointer">func (c *Context) SecondaryColorPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SelectBuffer">func (c *Context) SelectBuffer(size uint32, buffer *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.SetBatching">func (c *Context) SetBatching(batching bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShadeModel">func (c *Context) ShadeModel(mode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShaderBinary">func (c *Context) ShaderBinary(count uint32, shaders *uint32, binaryformat int32, binary unsafe.Pointer, length uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShaderSource">func (c *Context) ShaderSource(shader uint32, count uint32, string **byte, length *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShaderStorageBlockBinding">func (c *Context) ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ShaderVersion">func (c *Context) ShaderVersion() (major, minor, release int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilFunc">func (c *Context) StencilFunc(pFunc int32, ref int32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilFuncSeparate">func (c *Context) StencilFuncSeparate(face int32, pFunc int32, ref int32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilMask">func (c *Context) StencilMask(mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilMaskSeparate">func (c *Context) StencilMaskSeparate(face int32, mask uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilOp">func (c *Context) StencilOp(fail int32, zfail int32, zpass int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.StencilOpSeparate">func (c *Context) StencilOpSeparate(face int32, sfail int32, dpfail int32, dppass int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexBuffer">func (c *Context) TexBuffer(target int32, internalformat int32, buffer uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexBufferRange">func (c *Context) TexBufferRange(target int32, internalformat int32, buffer uint32, offset uintptr, size uintptr)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1d">func (c *Context) TexCoord1d(s float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1dv">func (c *Context) TexCoord1dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1f">func (c *Context) TexCoord1f(s float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1fv">func (c *Context) TexCoord1fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1i">func (c *Context) TexCoord1i(s int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1iv">func (c *Context) TexCoord1iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1s">func (c *Context) TexCoord1s(s int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord1sv">func (c *Context) TexCoord1sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2d">func (c *Context) TexCoord2d(s float64, t float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2dv">func (c *Context) TexCoord2dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2f">func (c *Context) TexCoord2f(s float32, t float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2fv">func (c *Context) TexCoord2fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2i">func (c *Context) TexCoord2i(s int32, t int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2iv">func (c *Context) TexCoord2iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2s">func (c *Context) TexCoord2s(s int16, t int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord2sv">func (c *Context) TexCoord2sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3d">func (c *Context) TexCoord3d(s float64, t float64, r float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3dv">func (c *Context) TexCoord3dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3f">func (c *Context) TexCoord3f(s float32, t float32, r float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3fv">func (c *Context) TexCoord3fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3i">func (c *Context) TexCoord3i(s int32, t int32, r int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3iv">func (c *Context) TexCoord3iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3s">func (c *Context) TexCoord3s(s int16, t int16, r int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord3sv">func (c *Context) TexCoord3sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4d">func (c *Context) TexCoord4d(s float64, t float64, r float64, q float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4dv">func (c *Context) TexCoord4dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4f">func (c *Context) TexCoord4f(s float32, t float32, r float32, q float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4fv">func (c *Context) TexCoord4fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4i">func (c *Context) TexCoord4i(s int32, t int32, r int32, q int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4iv">func (c *Context) TexCoord4iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4s">func (c *Context) TexCoord4s(s int16, t int16, r int16, q int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoord4sv">func (c *Context) TexCoord4sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP1ui">func (c *Context) TexCoordP1ui(pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP1uiv">func (c *Context) TexCoordP1uiv(pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP2ui">func (c *Context) TexCoordP2ui(pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP2uiv">func (c *Context) TexCoordP2uiv(pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP3ui">func (c *Context) TexCoordP3ui(pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP3uiv">func (c *Context) TexCoordP3uiv(pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP4ui">func (c *Context) TexCoordP4ui(pType int32, coords uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordP4uiv">func (c *Context) TexCoordP4uiv(pType int32, coords *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexCoordPointer">func (c *Context) TexCoordPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexEnvf">func (c *Context) TexEnvf(target int32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexEnvfv">func (c *Context) TexEnvfv(target int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexEnvi">func (c *Context) TexEnvi(target int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexEnviv">func (c *Context) TexEnviv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexGend">func (c *Context) TexGend(coord int32, pname int32, param float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexGendv">func (c *Context) TexGendv(coord int32, pname int32, params *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexGenf">func (c *Context) TexGenf(coord int32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexGenfv">func (c *Context) TexGenfv(coord int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexGeni">func (c *Context) TexGeni(coord int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexGeniv">func (c *Context) TexGeniv(coord int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexImage1D">func (c *Context) TexImage1D(target int32, level int32, internalformat int32, width uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexImage2D">func (c *Context) TexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexImage2DMultisample">func (c *Context) TexImage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexImage3D">func (c *Context) TexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexImage3DMultisample">func (c *Context) TexImage3DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, depth uint32, fixedsamplelocations uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameterIiv">func (c *Context) TexParameterIiv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameterIuiv">func (c *Context) TexParameterIuiv(target int32, pname int32, params *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameterf">func (c *Context) TexParameterf(target int32, pname int32, param float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameterfv">func (c *Context) TexParameterfv(target int32, pname int32, params *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameteri">func (c *Context) TexParameteri(target int32, pname int32, param int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexParameteriv">func (c *Context) TexParameteriv(target int32, pname int32, params *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage1D">func (c *Context) TexStorage1D(target int32, levels uint32, internalformat int32, width uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage2D">func (c *Context) TexStorage2D(target int32, levels uint32, internalformat int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage2DMultisample">func (c *Context) TexStorage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage3D">func (c *Context) TexStorage3D(target int32, levels uint32, internalformat int32, width uint32, height uint32, depth uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexStorage3DMultisample">func (c *Context) TexStorage3DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, depth uint32, fixedsamplelocations uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexSubImage1D">func (c *Context) TexSubImage1D(target int32, level int32, xoffset int32, width uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexSubImage2D">func (c *Context) TexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TexSubImage3D">func (c *Context) TexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, pixels unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TextureView">func (c *Context) TextureView(texture uint32, target int32, origtexture uint32, internalformat int32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.TransformFeedbackVaryings">func (c *Context) TransformFeedbackVaryings(program uint32, count uint32, varyings **byte, bufferMode int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Translated">func (c *Context) Translated(x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Translatef">func (c *Context) Translatef(x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1d">func (c *Context) Uniform1d(location int32, x float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1dv">func (c *Context) Uniform1dv(location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1f">func (c *Context) Uniform1f(location int32, v0 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1fv">func (c *Context) Uniform1fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1i">func (c *Context) Uniform1i(location int32, v0 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1iv">func (c *Context) Uniform1iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1ui">func (c *Context) Uniform1ui(location int32, v0 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform1uiv">func (c *Context) Uniform1uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2d">func (c *Context) Uniform2d(location int32, x float64, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2dv">func (c *Context) Uniform2dv(location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2f">func (c *Context) Uniform2f(location int32, v0 float32, v1 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2fv">func (c *Context) Uniform2fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2i">func (c *Context) Uniform2i(location int32, v0 int32, v1 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2iv">func (c *Context) Uniform2iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2ui">func (c *Context) Uniform2ui(location int32, v0 uint32, v1 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform2uiv">func (c *Context) Uniform2uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3d">func (c *Context) Uniform3d(location int32, x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3dv">func (c *Context) Uniform3dv(location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3f">func (c *Context) Uniform3f(location int32, v0 float32, v1 float32, v2 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3fv">func (c *Context) Uniform3fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3i">func (c *Context) Uniform3i(location int32, v0 int32, v1 int32, v2 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3iv">func (c *Context) Uniform3iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3ui">func (c *Context) Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform3uiv">func (c *Context) Uniform3uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4d">func (c *Context) Uniform4d(location int32, x float64, y float64, z float64, w float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4dv">func (c *Context) Uniform4dv(location int32, count uint32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4f">func (c *Context) Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4fv">func (c *Context) Uniform4fv(location int32, count uint32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4i">func (c *Context) Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4iv">func (c *Context) Uniform4iv(location int32, count uint32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4ui">func (c *Context) Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Uniform4uiv">func (c *Context) Uniform4uiv(location int32, count uint32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformBlockBinding">func (c *Context) UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2dv">func (c *Context) UniformMatrix2dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2fv">func (c *Context) UniformMatrix2fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2x3dv">func (c *Context) UniformMatrix2x3dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2x3fv">func (c *Context) UniformMatrix2x3fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2x4dv">func (c *Context) UniformMatrix2x4dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix2x4fv">func (c *Context) UniformMatrix2x4fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3dv">func (c *Context) UniformMatrix3dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3fv">func (c *Context) UniformMatrix3fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3x2dv">func (c *Context) UniformMatrix3x2dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3x2fv">func (c *Context) UniformMatrix3x2fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3x4dv">func (c *Context) UniformMatrix3x4dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix3x4fv">func (c *Context) UniformMatrix3x4fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4dv">func (c *Context) UniformMatrix4dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4fv">func (c *Context) UniformMatrix4fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4x2dv">func (c *Context) UniformMatrix4x2dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4x2fv">func (c *Context) UniformMatrix4x2fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4x3dv">func (c *Context) UniformMatrix4x3dv(location int32, count uint32, transpose uint8, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformMatrix4x3fv">func (c *Context) UniformMatrix4x3fv(location int32, count uint32, transpose uint8, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UniformSubroutinesuiv">func (c *Context) UniformSubroutinesuiv(shadertype int32, count uint32, indices *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UnmapBuffer">func (c *Context) UnmapBuffer(target int32) uint8</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UseProgram">func (c *Context) UseProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.UseProgramStages">func (c *Context) UseProgramStages(pipeline uint32, stages uint32, program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ValidateProgram">func (c *Context) ValidateProgram(program uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ValidateProgramPipeline">func (c *Context) ValidateProgramPipeline(pipeline uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VendorShaderVersion">func (c *Context) VendorShaderVersion() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VendorVersion">func (c *Context) VendorVersion() string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Version">func (c *Context) Version() (major, minor, release int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2d">func (c *Context) Vertex2d(x float64, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2dv">func (c *Context) Vertex2dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2f">func (c *Context) Vertex2f(x float32, y float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2fv">func (c *Context) Vertex2fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2i">func (c *Context) Vertex2i(x int32, y int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2iv">func (c *Context) Vertex2iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2s">func (c *Context) Vertex2s(x int16, y int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex2sv">func (c *Context) Vertex2sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3d">func (c *Context) Vertex3d(x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3dv">func (c *Context) Vertex3dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3f">func (c *Context) Vertex3f(x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3fv">func (c *Context) Vertex3fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3i">func (c *Context) Vertex3i(x int32, y int32, z int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3iv">func (c *Context) Vertex3iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3s">func (c *Context) Vertex3s(x int16, y int16, z int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex3sv">func (c *Context) Vertex3sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4d">func (c *Context) Vertex4d(x float64, y float64, z float64, w float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4dv">func (c *Context) Vertex4dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4f">func (c *Context) Vertex4f(x float32, y float32, z float32, w float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4fv">func (c *Context) Vertex4fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4i">func (c *Context) Vertex4i(x int32, y int32, z int32, w int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4iv">func (c *Context) Vertex4iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4s">func (c *Context) Vertex4s(x int16, y int16, z int16, w int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Vertex4sv">func (c *Context) Vertex4sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1d">func (c *Context) VertexAttrib1d(index uint32, x float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1dv">func (c *Context) VertexAttrib1dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1f">func (c *Context) VertexAttrib1f(index uint32, x float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1fv">func (c *Context) VertexAttrib1fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1s">func (c *Context) VertexAttrib1s(index uint32, x int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib1sv">func (c *Context) VertexAttrib1sv(index uint32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2d">func (c *Context) VertexAttrib2d(index uint32, x float64, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2dv">func (c *Context) VertexAttrib2dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2f">func (c *Context) VertexAttrib2f(index uint32, x float32, y float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2fv">func (c *Context) VertexAttrib2fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2s">func (c *Context) VertexAttrib2s(index uint32, x int16, y int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib2sv">func (c *Context) VertexAttrib2sv(index uint32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3d">func (c *Context) VertexAttrib3d(index uint32, x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3dv">func (c *Context) VertexAttrib3dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3f">func (c *Context) VertexAttrib3f(index uint32, x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3fv">func (c *Context) VertexAttrib3fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3s">func (c *Context) VertexAttrib3s(index uint32, x int16, y int16, z int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib3sv">func (c *Context) VertexAttrib3sv(index uint32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4Nbv">func (c *Context) VertexAttrib4Nbv(index uint32, v *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4Niv">func (c *Context) VertexAttrib4Niv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4Nsv">func (c *Context) VertexAttrib4Nsv(index uint32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4Nub">func (c *Context) VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4Nubv">func (c *Context) VertexAttrib4Nubv(index uint32, v *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4Nuiv">func (c *Context) VertexAttrib4Nuiv(index uint32, v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4Nusv">func (c *Context) VertexAttrib4Nusv(index uint32, v *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4bv">func (c *Context) VertexAttrib4bv(index uint32, v *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4d">func (c *Context) VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4dv">func (c *Context) VertexAttrib4dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4f">func (c *Context) VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4fv">func (c *Context) VertexAttrib4fv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4iv">func (c *Context) VertexAttrib4iv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4s">func (c *Context) VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4sv">func (c *Context) VertexAttrib4sv(index uint32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4ubv">func (c *Context) VertexAttrib4ubv(index uint32, v *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4uiv">func (c *Context) VertexAttrib4uiv(index uint32, v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttrib4usv">func (c *Context) VertexAttrib4usv(index uint32, v *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribBinding">func (c *Context) VertexAttribBinding(attribindex uint32, bindingindex uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribDivisor">func (c *Context) VertexAttribDivisor(index uint32, divisor uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribFormat">func (c *Context) VertexAttribFormat(attribindex uint32, size int32, pType int32, normalized uint8, relativeoffset uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI1i">func (c *Context) VertexAttribI1i(index uint32, x int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI1iv">func (c *Context) VertexAttribI1iv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI1ui">func (c *Context) VertexAttribI1ui(index uint32, x uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI1uiv">func (c *Context) VertexAttribI1uiv(index uint32, v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI2i">func (c *Context) VertexAttribI2i(index uint32, x int32, y int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI2iv">func (c *Context) VertexAttribI2iv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI2ui">func (c *Context) VertexAttribI2ui(index uint32, x uint32, y uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI2uiv">func (c *Context) VertexAttribI2uiv(index uint32, v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI3i">func (c *Context) VertexAttribI3i(index uint32, x int32, y int32, z int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI3iv">func (c *Context) VertexAttribI3iv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI3ui">func (c *Context) VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI3uiv">func (c *Context) VertexAttribI3uiv(index uint32, v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4bv">func (c *Context) VertexAttribI4bv(index uint32, v *byte)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4i">func (c *Context) VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4iv">func (c *Context) VertexAttribI4iv(index uint32, v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4sv">func (c *Context) VertexAttribI4sv(index uint32, v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4ubv">func (c *Context) VertexAttribI4ubv(index uint32, v *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4ui">func (c *Context) VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4uiv">func (c *Context) VertexAttribI4uiv(index uint32, v *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribI4usv">func (c *Context) VertexAttribI4usv(index uint32, v *uint16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribIFormat">func (c *Context) VertexAttribIFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribIPointer">func (c *Context) VertexAttribIPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL1d">func (c *Context) VertexAttribL1d(index uint32, x float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL1dv">func (c *Context) VertexAttribL1dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL2d">func (c *Context) VertexAttribL2d(index uint32, x float64, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL2dv">func (c *Context) VertexAttribL2dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL3d">func (c *Context) VertexAttribL3d(index uint32, x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL3dv">func (c *Context) VertexAttribL3dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL4d">func (c *Context) VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribL4dv">func (c *Context) VertexAttribL4dv(index uint32, v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribLFormat">func (c *Context) VertexAttribLFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribLPointer">func (c *Context) VertexAttribLPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP1ui">func (c *Context) VertexAttribP1ui(index uint32, pType int32, normalized uint8, value uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP1uiv">func (c *Context) VertexAttribP1uiv(index uint32, pType int32, normalized uint8, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP2ui">func (c *Context) VertexAttribP2ui(index uint32, pType int32, normalized uint8, value uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP2uiv">func (c *Context) VertexAttribP2uiv(index uint32, pType int32, normalized uint8, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP3ui">func (c *Context) VertexAttribP3ui(index uint32, pType int32, normalized uint8, value uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP3uiv">func (c *Context) VertexAttribP3uiv(index uint32, pType int32, normalized uint8, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP4ui">func (c *Context) VertexAttribP4ui(index uint32, pType int32, normalized uint8, value uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribP4uiv">func (c *Context) VertexAttribP4uiv(index uint32, pType int32, normalized uint8, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexAttribPointer">func (c *Context) VertexAttribPointer(index uint32, size int32, pType int32, normalized uint8, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexBindingDivisor">func (c *Context) VertexBindingDivisor(bindingindex uint32, divisor uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexP2ui">func (c *Context) VertexP2ui(pType int32, value uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexP2uiv">func (c *Context) VertexP2uiv(pType int32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexP3ui">func (c *Context) VertexP3ui(pType int32, value uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexP3uiv">func (c *Context) VertexP3uiv(pType int32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexP4ui">func (c *Context) VertexP4ui(pType int32, value uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexP4uiv">func (c *Context) VertexP4uiv(pType int32, value *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.VertexPointer">func (c *Context) VertexPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Viewport">func (c *Context) Viewport(x int32, y int32, width uint32, height uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ViewportArrayv">func (c *Context) ViewportArrayv(first uint32, count uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ViewportIndexedf">func (c *Context) ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.ViewportIndexedfv">func (c *Context) ViewportIndexedfv(index uint32, v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WaitSync">func (c *Context) WaitSync(sync Sync, flags uint32, timeout uint64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2d">func (c *Context) WindowPos2d(x float64, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2dv">func (c *Context) WindowPos2dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2f">func (c *Context) WindowPos2f(x float32, y float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2fv">func (c *Context) WindowPos2fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2i">func (c *Context) WindowPos2i(x int32, y int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2iv">func (c *Context) WindowPos2iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2s">func (c *Context) WindowPos2s(x int16, y int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos2sv">func (c *Context) WindowPos2sv(v *int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3d">func (c *Context) WindowPos3d(x float64, y float64, z float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3dv">func (c *Context) WindowPos3dv(v *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3f">func (c *Context) WindowPos3f(x float32, y float32, z float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3fv">func (c *Context) WindowPos3fv(v *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3i">func (c *Context) WindowPos3i(x int32, y int32, z int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3iv">func (c *Context) WindowPos3iv(v *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3s">func (c *Context) WindowPos3s(x int16, y int16, z int16)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.WindowPos3sv">func (c *Context) WindowPos3sv(v *int16)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROC">type DEBUGPROC</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROCAMD">type DEBUGPROCAMD</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROCARB">type DEBUGPROCARB</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DEBUGPROCKHR">type DEBUGPROCKHR</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Sync">type Sync</a></span></span>
			
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	DEPTH_BUFFER_BIT						int32	= 0x00000100
	STENCIL_BUFFER_BIT						int32	= 0x00000400
	COLOR_BUFFER_BIT						int32	= 0x00004000
	FALSE								int32	= 0
	TRUE								int32	= 1
	POINTS								int32	= 0x0000
	LINES								int32	= 0x0001
	LINE_LOOP							int32	= 0x0002
	LINE_STRIP							int32	= 0x0003
	TRIANGLES							int32	= 0x0004
	TRIANGLE_STRIP							int32	= 0x0005
	TRIANGLE_FAN							int32	= 0x0006
	QUADS								int32	= 0x0007
	NEVER								int32	= 0x0200
	LESS								int32	= 0x0201
	EQUAL								int32	= 0x0202
	LEQUAL								int32	= 0x0203
	GREATER								int32	= 0x0204
	NOTEQUAL							int32	= 0x0205
	GEQUAL								int32	= 0x0206
	ALWAYS								int32	= 0x0207
	ZERO								int32	= 0
	ONE								int32	= 1
	SRC_COLOR							int32	= 0x0300
	ONE_MINUS_SRC_COLOR						int32	= 0x0301
	SRC_ALPHA							int32	= 0x0302
	ONE_MINUS_SRC_ALPHA						int32	= 0x0303
	DST_ALPHA							int32	= 0x0304
	ONE_MINUS_DST_ALPHA						int32	= 0x0305
	DST_COLOR							int32	= 0x0306
	ONE_MINUS_DST_COLOR						int32	= 0x0307
	SRC_ALPHA_SATURATE						int32	= 0x0308
	NONE								int32	= 0
	FRONT_LEFT							int32	= 0x0400
	FRONT_RIGHT							int32	= 0x0401
	BACK_LEFT							int32	= 0x0402
	BACK_RIGHT							int32	= 0x0403
	FRONT								int32	= 0x0404
	BACK								int32	= 0x0405
	LEFT								int32	= 0x0406
	RIGHT								int32	= 0x0407
	FRONT_AND_BACK							int32	= 0x0408
	NO_ERROR							int32	= 0
	INVALID_ENUM							int32	= 0x0500
	INVALID_VALUE							int32	= 0x0501
	INVALID_OPERATION						int32	= 0x0502
	OUT_OF_MEMORY							int32	= 0x0505
	CW								int32	= 0x0900
	CCW								int32	= 0x0901
	POINT_SIZE							int32	= 0x0B11
	POINT_SIZE_RANGE						int32	= 0x0B12
	POINT_SIZE_GRANULARITY						int32	= 0x0B13
	LINE_SMOOTH							int32	= 0x0B20
	LINE_WIDTH							int32	= 0x0B21
	LINE_WIDTH_RANGE						int32	= 0x0B22
	LINE_WIDTH_GRANULARITY						int32	= 0x0B23
	POLYGON_MODE							int32	= 0x0B40
	POLYGON_SMOOTH							int32	= 0x0B41
	CULL_FACE							int32	= 0x0B44
	CULL_FACE_MODE							int32	= 0x0B45
	FRONT_FACE							int32	= 0x0B46
	DEPTH_RANGE							int32	= 0x0B70
	DEPTH_TEST							int32	= 0x0B71
	DEPTH_WRITEMASK							int32	= 0x0B72
	DEPTH_CLEAR_VALUE						int32	= 0x0B73
	DEPTH_FUNC							int32	= 0x0B74
	STENCIL_TEST							int32	= 0x0B90
	STENCIL_CLEAR_VALUE						int32	= 0x0B91
	STENCIL_FUNC							int32	= 0x0B92
	STENCIL_VALUE_MASK						int32	= 0x0B93
	STENCIL_FAIL							int32	= 0x0B94
	STENCIL_PASS_DEPTH_FAIL						int32	= 0x0B95
	STENCIL_PASS_DEPTH_PASS						int32	= 0x0B96
	STENCIL_REF							int32	= 0x0B97
	STENCIL_WRITEMASK						int32	= 0x0B98
	VIEWPORT							int32	= 0x0BA2
	DITHER								int32	= 0x0BD0
	BLEND_DST							int32	= 0x0BE0
	BLEND_SRC							int32	= 0x0BE1
	BLEND								int32	= 0x0BE2
	LOGIC_OP_MODE							int32	= 0x0BF0
	COLOR_LOGIC_OP							int32	= 0x0BF2
	DRAW_BUFFER							int32	= 0x0C01
	READ_BUFFER							int32	= 0x0C02
	SCISSOR_BOX							int32	= 0x0C10
	SCISSOR_TEST							int32	= 0x0C11
	COLOR_CLEAR_VALUE						int32	= 0x0C22
	COLOR_WRITEMASK							int32	= 0x0C23
	DOUBLEBUFFER							int32	= 0x0C32
	STEREO								int32	= 0x0C33
	LINE_SMOOTH_HINT						int32	= 0x0C52
	POLYGON_SMOOTH_HINT						int32	= 0x0C53
	UNPACK_SWAP_BYTES						int32	= 0x0CF0
	UNPACK_LSB_FIRST						int32	= 0x0CF1
	UNPACK_ROW_LENGTH						int32	= 0x0CF2
	UNPACK_SKIP_ROWS						int32	= 0x0CF3
	UNPACK_SKIP_PIXELS						int32	= 0x0CF4
	UNPACK_ALIGNMENT						int32	= 0x0CF5
	PACK_SWAP_BYTES							int32	= 0x0D00
	PACK_LSB_FIRST							int32	= 0x0D01
	PACK_ROW_LENGTH							int32	= 0x0D02
	PACK_SKIP_ROWS							int32	= 0x0D03
	PACK_SKIP_PIXELS						int32	= 0x0D04
	PACK_ALIGNMENT							int32	= 0x0D05
	MAX_TEXTURE_SIZE						int32	= 0x0D33
	MAX_VIEWPORT_DIMS						int32	= 0x0D3A
	SUBPIXEL_BITS							int32	= 0x0D50
	TEXTURE_1D							int32	= 0x0DE0
	TEXTURE_2D							int32	= 0x0DE1
	POLYGON_OFFSET_UNITS						int32	= 0x2A00
	POLYGON_OFFSET_POINT						int32	= 0x2A01
	POLYGON_OFFSET_LINE						int32	= 0x2A02
	POLYGON_OFFSET_FILL						int32	= 0x8037
	POLYGON_OFFSET_FACTOR						int32	= 0x8038
	TEXTURE_BINDING_1D						int32	= 0x8068
	TEXTURE_BINDING_2D						int32	= 0x8069
	TEXTURE_WIDTH							int32	= 0x1000
	TEXTURE_HEIGHT							int32	= 0x1001
	TEXTURE_INTERNAL_FORMAT						int32	= 0x1003
	TEXTURE_BORDER_COLOR						int32	= 0x1004
	TEXTURE_RED_SIZE						int32	= 0x805C
	TEXTURE_GREEN_SIZE						int32	= 0x805D
	TEXTURE_BLUE_SIZE						int32	= 0x805E
	TEXTURE_ALPHA_SIZE						int32	= 0x805F
	DONT_CARE							int32	= 0x1100
	FASTEST								int32	= 0x1101
	NICEST								int32	= 0x1102
	BYTE								int32	= 0x1400
	UNSIGNED_BYTE							int32	= 0x1401
	SHORT								int32	= 0x1402
	UNSIGNED_SHORT							int32	= 0x1403
	INT								int32	= 0x1404
	UNSIGNED_INT							int32	= 0x1405
	FLOAT								int32	= 0x1406
	DOUBLE								int32	= 0x140A
	STACK_OVERFLOW							int32	= 0x0503
	STACK_UNDERFLOW							int32	= 0x0504
	CLEAR								int32	= 0x1500
	AND								int32	= 0x1501
	AND_REVERSE							int32	= 0x1502
	COPY								int32	= 0x1503
	AND_INVERTED							int32	= 0x1504
	NOOP								int32	= 0x1505
	XOR								int32	= 0x1506
	OR								int32	= 0x1507
	NOR								int32	= 0x1508
	EQUIV								int32	= 0x1509
	INVERT								int32	= 0x150A
	OR_REVERSE							int32	= 0x150B
	COPY_INVERTED							int32	= 0x150C
	OR_INVERTED							int32	= 0x150D
	NAND								int32	= 0x150E
	SET								int32	= 0x150F
	TEXTURE								int32	= 0x1702
	COLOR								int32	= 0x1800
	DEPTH								int32	= 0x1801
	STENCIL								int32	= 0x1802
	STENCIL_INDEX							int32	= 0x1901
	DEPTH_COMPONENT							int32	= 0x1902
	RED								int32	= 0x1903
	GREEN								int32	= 0x1904
	BLUE								int32	= 0x1905
	ALPHA								int32	= 0x1906
	RGB								int32	= 0x1907
	RGBA								int32	= 0x1908
	POINT								int32	= 0x1B00
	LINE								int32	= 0x1B01
	FILL								int32	= 0x1B02
	KEEP								int32	= 0x1E00
	REPLACE								int32	= 0x1E01
	INCR								int32	= 0x1E02
	DECR								int32	= 0x1E03
	VENDOR								int32	= 0x1F00
	RENDERER							int32	= 0x1F01
	VERSION								int32	= 0x1F02
	EXTENSIONS							int32	= 0x1F03
	NEAREST								int32	= 0x2600
	LINEAR								int32	= 0x2601
	NEAREST_MIPMAP_NEAREST						int32	= 0x2700
	LINEAR_MIPMAP_NEAREST						int32	= 0x2701
	NEAREST_MIPMAP_LINEAR						int32	= 0x2702
	LINEAR_MIPMAP_LINEAR						int32	= 0x2703
	TEXTURE_MAG_FILTER						int32	= 0x2800
	TEXTURE_MIN_FILTER						int32	= 0x2801
	TEXTURE_WRAP_S							int32	= 0x2802
	TEXTURE_WRAP_T							int32	= 0x2803
	PROXY_TEXTURE_1D						int32	= 0x8063
	PROXY_TEXTURE_2D						int32	= 0x8064
	REPEAT								int32	= 0x2901
	R3_G3_B2							int32	= 0x2A10
	RGB4								int32	= 0x804F
	RGB5								int32	= 0x8050
	RGB8								int32	= 0x8051
	RGB10								int32	= 0x8052
	RGB12								int32	= 0x8053
	RGB16								int32	= 0x8054
	RGBA2								int32	= 0x8055
	RGBA4								int32	= 0x8056
	RGB5_A1								int32	= 0x8057
	RGBA8								int32	= 0x8058
	RGB10_A2							int32	= 0x8059
	RGBA12								int32	= 0x805A
	RGBA16								int32	= 0x805B
	CURRENT_BIT							int32	= 0x00000001
	POINT_BIT							int32	= 0x00000002
	LINE_BIT							int32	= 0x00000004
	POLYGON_BIT							int32	= 0x00000008
	POLYGON_STIPPLE_BIT						int32	= 0x00000010
	PIXEL_MODE_BIT							int32	= 0x00000020
	LIGHTING_BIT							int32	= 0x00000040
	FOG_BIT								int32	= 0x00000080
	ACCUM_BUFFER_BIT						int32	= 0x00000200
	VIEWPORT_BIT							int32	= 0x00000800
	TRANSFORM_BIT							int32	= 0x00001000
	ENABLE_BIT							int32	= 0x00002000
	HINT_BIT							int32	= 0x00008000
	EVAL_BIT							int32	= 0x00010000
	LIST_BIT							int32	= 0x00020000
	TEXTURE_BIT							int32	= 0x00040000
	SCISSOR_BIT							int32	= 0x00080000
	ALL_ATTRIB_BITS							uint64	= 0xFFFFFFFF
	CLIENT_PIXEL_STORE_BIT						int32	= 0x00000001
	CLIENT_VERTEX_ARRAY_BIT						int32	= 0x00000002
	CLIENT_ALL_ATTRIB_BITS						uint64	= 0xFFFFFFFF
	QUAD_STRIP							int32	= 0x0008
	POLYGON								int32	= 0x0009
	ACCUM								int32	= 0x0100
	LOAD								int32	= 0x0101
	RETURN								int32	= 0x0102
	MULT								int32	= 0x0103
	ADD								int32	= 0x0104
	AUX0								int32	= 0x0409
	AUX1								int32	= 0x040A
	AUX2								int32	= 0x040B
	AUX3								int32	= 0x040C
	GL_2D								int32	= 0x0600
	GL_3D								int32	= 0x0601
	GL_3D_COLOR							int32	= 0x0602
	GL_3D_COLOR_TEXTURE						int32	= 0x0603
	GL_4D_COLOR_TEXTURE						int32	= 0x0604
	PASS_THROUGH_TOKEN						int32	= 0x0700
	POINT_TOKEN							int32	= 0x0701
	LINE_TOKEN							int32	= 0x0702
	POLYGON_TOKEN							int32	= 0x0703
	BITMAP_TOKEN							int32	= 0x0704
	DRAW_PIXEL_TOKEN						int32	= 0x0705
	COPY_PIXEL_TOKEN						int32	= 0x0706
	LINE_RESET_TOKEN						int32	= 0x0707
	EXP								int32	= 0x0800
	EXP2								int32	= 0x0801
	COEFF								int32	= 0x0A00
	ORDER								int32	= 0x0A01
	DOMAIN								int32	= 0x0A02
	PIXEL_MAP_I_TO_I						int32	= 0x0C70
	PIXEL_MAP_S_TO_S						int32	= 0x0C71
	PIXEL_MAP_I_TO_R						int32	= 0x0C72
	PIXEL_MAP_I_TO_G						int32	= 0x0C73
	PIXEL_MAP_I_TO_B						int32	= 0x0C74
	PIXEL_MAP_I_TO_A						int32	= 0x0C75
	PIXEL_MAP_R_TO_R						int32	= 0x0C76
	PIXEL_MAP_G_TO_G						int32	= 0x0C77
	PIXEL_MAP_B_TO_B						int32	= 0x0C78
	PIXEL_MAP_A_TO_A						int32	= 0x0C79
	VERTEX_ARRAY_POINTER						int32	= 0x808E
	NORMAL_ARRAY_POINTER						int32	= 0x808F
	COLOR_ARRAY_POINTER						int32	= 0x8090
	INDEX_ARRAY_POINTER						int32	= 0x8091
	TEXTURE_COORD_ARRAY_POINTER					int32	= 0x8092
	EDGE_FLAG_ARRAY_POINTER						int32	= 0x8093
	FEEDBACK_BUFFER_POINTER						int32	= 0x0DF0
	SELECTION_BUFFER_POINTER					int32	= 0x0DF3
	CURRENT_COLOR							int32	= 0x0B00
	CURRENT_INDEX							int32	= 0x0B01
	CURRENT_NORMAL							int32	= 0x0B02
	CURRENT_TEXTURE_COORDS						int32	= 0x0B03
	CURRENT_RASTER_COLOR						int32	= 0x0B04
	CURRENT_RASTER_INDEX						int32	= 0x0B05
	CURRENT_RASTER_TEXTURE_COORDS					int32	= 0x0B06
	CURRENT_RASTER_POSITION						int32	= 0x0B07
	CURRENT_RASTER_POSITION_VALID					int32	= 0x0B08
	CURRENT_RASTER_DISTANCE						int32	= 0x0B09
	POINT_SMOOTH							int32	= 0x0B10
	LINE_STIPPLE							int32	= 0x0B24
	LINE_STIPPLE_PATTERN						int32	= 0x0B25
	LINE_STIPPLE_REPEAT						int32	= 0x0B26
	LIST_MODE							int32	= 0x0B30
	MAX_LIST_NESTING						int32	= 0x0B31
	LIST_BASE							int32	= 0x0B32
	LIST_INDEX							int32	= 0x0B33
	POLYGON_STIPPLE							int32	= 0x0B42
	EDGE_FLAG							int32	= 0x0B43
	LIGHTING							int32	= 0x0B50
	LIGHT_MODEL_LOCAL_VIEWER					int32	= 0x0B51
	LIGHT_MODEL_TWO_SIDE						int32	= 0x0B52
	LIGHT_MODEL_AMBIENT						int32	= 0x0B53
	SHADE_MODEL							int32	= 0x0B54
	COLOR_MATERIAL_FACE						int32	= 0x0B55
	COLOR_MATERIAL_PARAMETER					int32	= 0x0B56
	COLOR_MATERIAL							int32	= 0x0B57
	FOG								int32	= 0x0B60
	FOG_INDEX							int32	= 0x0B61
	FOG_DENSITY							int32	= 0x0B62
	FOG_START							int32	= 0x0B63
	FOG_END								int32	= 0x0B64
	FOG_MODE							int32	= 0x0B65
	FOG_COLOR							int32	= 0x0B66
	ACCUM_CLEAR_VALUE						int32	= 0x0B80
	MATRIX_MODE							int32	= 0x0BA0
	NORMALIZE							int32	= 0x0BA1
	MODELVIEW_STACK_DEPTH						int32	= 0x0BA3
	PROJECTION_STACK_DEPTH						int32	= 0x0BA4
	TEXTURE_STACK_DEPTH						int32	= 0x0BA5
	MODELVIEW_MATRIX						int32	= 0x0BA6
	PROJECTION_MATRIX						int32	= 0x0BA7
	TEXTURE_MATRIX							int32	= 0x0BA8
	ATTRIB_STACK_DEPTH						int32	= 0x0BB0
	CLIENT_ATTRIB_STACK_DEPTH					int32	= 0x0BB1
	ALPHA_TEST							int32	= 0x0BC0
	ALPHA_TEST_FUNC							int32	= 0x0BC1
	ALPHA_TEST_REF							int32	= 0x0BC2
	INDEX_LOGIC_OP							int32	= 0x0BF1
	LOGIC_OP							int32	= 0x0BF1
	AUX_BUFFERS							int32	= 0x0C00
	INDEX_CLEAR_VALUE						int32	= 0x0C20
	INDEX_WRITEMASK							int32	= 0x0C21
	INDEX_MODE							int32	= 0x0C30
	RGBA_MODE							int32	= 0x0C31
	RENDER_MODE							int32	= 0x0C40
	PERSPECTIVE_CORRECTION_HINT					int32	= 0x0C50
	POINT_SMOOTH_HINT						int32	= 0x0C51
	FOG_HINT							int32	= 0x0C54
	TEXTURE_GEN_S							int32	= 0x0C60
	TEXTURE_GEN_T							int32	= 0x0C61
	TEXTURE_GEN_R							int32	= 0x0C62
	TEXTURE_GEN_Q							int32	= 0x0C63
	PIXEL_MAP_I_TO_I_SIZE						int32	= 0x0CB0
	PIXEL_MAP_S_TO_S_SIZE						int32	= 0x0CB1
	PIXEL_MAP_I_TO_R_SIZE						int32	= 0x0CB2
	PIXEL_MAP_I_TO_G_SIZE						int32	= 0x0CB3
	PIXEL_MAP_I_TO_B_SIZE						int32	= 0x0CB4
	PIXEL_MAP_I_TO_A_SIZE						int32	= 0x0CB5
	PIXEL_MAP_R_TO_R_SIZE						int32	= 0x0CB6
	PIXEL_MAP_G_TO_G_SIZE						int32	= 0x0CB7
	PIXEL_MAP_B_TO_B_SIZE						int32	= 0x0CB8
	PIXEL_MAP_A_TO_A_SIZE						int32	= 0x0CB9
	MAP_COLOR							int32	= 0x0D10
	MAP_STENCIL							int32	= 0x0D11
	INDEX_SHIFT							int32	= 0x0D12
	INDEX_OFFSET							int32	= 0x0D13
	RED_SCALE							int32	= 0x0D14
	RED_BIAS							int32	= 0x0D15
	ZOOM_X								int32	= 0x0D16
	ZOOM_Y								int32	= 0x0D17
	GREEN_SCALE							int32	= 0x0D18
	GREEN_BIAS							int32	= 0x0D19
	BLUE_SCALE							int32	= 0x0D1A
	BLUE_BIAS							int32	= 0x0D1B
	ALPHA_SCALE							int32	= 0x0D1C
	ALPHA_BIAS							int32	= 0x0D1D
	DEPTH_SCALE							int32	= 0x0D1E
	DEPTH_BIAS							int32	= 0x0D1F
	MAX_EVAL_ORDER							int32	= 0x0D30
	MAX_LIGHTS							int32	= 0x0D31
	MAX_CLIP_PLANES							int32	= 0x0D32
	MAX_PIXEL_MAP_TABLE						int32	= 0x0D34
	MAX_ATTRIB_STACK_DEPTH						int32	= 0x0D35
	MAX_MODELVIEW_STACK_DEPTH					int32	= 0x0D36
	MAX_NAME_STACK_DEPTH						int32	= 0x0D37
	MAX_PROJECTION_STACK_DEPTH					int32	= 0x0D38
	MAX_TEXTURE_STACK_DEPTH						int32	= 0x0D39
	MAX_CLIENT_ATTRIB_STACK_DEPTH					int32	= 0x0D3B
	INDEX_BITS							int32	= 0x0D51
	RED_BITS							int32	= 0x0D52
	GREEN_BITS							int32	= 0x0D53
	BLUE_BITS							int32	= 0x0D54
	ALPHA_BITS							int32	= 0x0D55
	DEPTH_BITS							int32	= 0x0D56
	STENCIL_BITS							int32	= 0x0D57
	ACCUM_RED_BITS							int32	= 0x0D58
	ACCUM_GREEN_BITS						int32	= 0x0D59
	ACCUM_BLUE_BITS							int32	= 0x0D5A
	ACCUM_ALPHA_BITS						int32	= 0x0D5B
	NAME_STACK_DEPTH						int32	= 0x0D70
	AUTO_NORMAL							int32	= 0x0D80
	MAP1_COLOR_4							int32	= 0x0D90
	MAP1_INDEX							int32	= 0x0D91
	MAP1_NORMAL							int32	= 0x0D92
	MAP1_TEXTURE_COORD_1						int32	= 0x0D93
	MAP1_TEXTURE_COORD_2						int32	= 0x0D94
	MAP1_TEXTURE_COORD_3						int32	= 0x0D95
	MAP1_TEXTURE_COORD_4						int32	= 0x0D96
	MAP1_VERTEX_3							int32	= 0x0D97
	MAP1_VERTEX_4							int32	= 0x0D98
	MAP2_COLOR_4							int32	= 0x0DB0
	MAP2_INDEX							int32	= 0x0DB1
	MAP2_NORMAL							int32	= 0x0DB2
	MAP2_TEXTURE_COORD_1						int32	= 0x0DB3
	MAP2_TEXTURE_COORD_2						int32	= 0x0DB4
	MAP2_TEXTURE_COORD_3						int32	= 0x0DB5
	MAP2_TEXTURE_COORD_4						int32	= 0x0DB6
	MAP2_VERTEX_3							int32	= 0x0DB7
	MAP2_VERTEX_4							int32	= 0x0DB8
	MAP1_GRID_DOMAIN						int32	= 0x0DD0
	MAP1_GRID_SEGMENTS						int32	= 0x0DD1
	MAP2_GRID_DOMAIN						int32	= 0x0DD2
	MAP2_GRID_SEGMENTS						int32	= 0x0DD3
	FEEDBACK_BUFFER_SIZE						int32	= 0x0DF1
	FEEDBACK_BUFFER_TYPE						int32	= 0x0DF2
	SELECTION_BUFFER_SIZE						int32	= 0x0DF4
	VERTEX_ARRAY							int32	= 0x8074
	NORMAL_ARRAY							int32	= 0x8075
	COLOR_ARRAY							int32	= 0x8076
	INDEX_ARRAY							int32	= 0x8077
	TEXTURE_COORD_ARRAY						int32	= 0x8078
	EDGE_FLAG_ARRAY							int32	= 0x8079
	VERTEX_ARRAY_SIZE						int32	= 0x807A
	VERTEX_ARRAY_TYPE						int32	= 0x807B
	VERTEX_ARRAY_STRIDE						int32	= 0x807C
	NORMAL_ARRAY_TYPE						int32	= 0x807E
	NORMAL_ARRAY_STRIDE						int32	= 0x807F
	COLOR_ARRAY_SIZE						int32	= 0x8081
	COLOR_ARRAY_TYPE						int32	= 0x8082
	COLOR_ARRAY_STRIDE						int32	= 0x8083
	INDEX_ARRAY_TYPE						int32	= 0x8085
	INDEX_ARRAY_STRIDE						int32	= 0x8086
	TEXTURE_COORD_ARRAY_SIZE					int32	= 0x8088
	TEXTURE_COORD_ARRAY_TYPE					int32	= 0x8089
	TEXTURE_COORD_ARRAY_STRIDE					int32	= 0x808A
	EDGE_FLAG_ARRAY_STRIDE						int32	= 0x808C
	TEXTURE_COMPONENTS						int32	= 0x1003
	TEXTURE_BORDER							int32	= 0x1005
	TEXTURE_LUMINANCE_SIZE						int32	= 0x8060
	TEXTURE_INTENSITY_SIZE						int32	= 0x8061
	TEXTURE_PRIORITY						int32	= 0x8066
	TEXTURE_RESIDENT						int32	= 0x8067
	AMBIENT								int32	= 0x1200
	DIFFUSE								int32	= 0x1201
	SPECULAR							int32	= 0x1202
	POSITION							int32	= 0x1203
	SPOT_DIRECTION							int32	= 0x1204
	SPOT_EXPONENT							int32	= 0x1205
	SPOT_CUTOFF							int32	= 0x1206
	CONSTANT_ATTENUATION						int32	= 0x1207
	LINEAR_ATTENUATION						int32	= 0x1208
	QUADRATIC_ATTENUATION						int32	= 0x1209
	COMPILE								int32	= 0x1300
	COMPILE_AND_EXECUTE						int32	= 0x1301
	GL_2_BYTES							int32	= 0x1407
	GL_3_BYTES							int32	= 0x1408
	GL_4_BYTES							int32	= 0x1409
	EMISSION							int32	= 0x1600
	SHININESS							int32	= 0x1601
	AMBIENT_AND_DIFFUSE						int32	= 0x1602
	COLOR_INDEXES							int32	= 0x1603
	MODELVIEW							int32	= 0x1700
	PROJECTION							int32	= 0x1701
	COLOR_INDEX							int32	= 0x1900
	LUMINANCE							int32	= 0x1909
	LUMINANCE_ALPHA							int32	= 0x190A
	BITMAP								int32	= 0x1A00
	RENDER								int32	= 0x1C00
	FEEDBACK							int32	= 0x1C01
	SELECT								int32	= 0x1C02
	FLAT								int32	= 0x1D00
	SMOOTH								int32	= 0x1D01
	S								int32	= 0x2000
	T								int32	= 0x2001
	R								int32	= 0x2002
	Q								int32	= 0x2003
	MODULATE							int32	= 0x2100
	DECAL								int32	= 0x2101
	TEXTURE_ENV_MODE						int32	= 0x2200
	TEXTURE_ENV_COLOR						int32	= 0x2201
	TEXTURE_ENV							int32	= 0x2300
	EYE_LINEAR							int32	= 0x2400
	OBJECT_LINEAR							int32	= 0x2401
	SPHERE_MAP							int32	= 0x2402
	TEXTURE_GEN_MODE						int32	= 0x2500
	OBJECT_PLANE							int32	= 0x2501
	EYE_PLANE							int32	= 0x2502
	CLAMP								int32	= 0x2900
	ALPHA4								int32	= 0x803B
	ALPHA8								int32	= 0x803C
	ALPHA12								int32	= 0x803D
	ALPHA16								int32	= 0x803E
	LUMINANCE4							int32	= 0x803F
	LUMINANCE8							int32	= 0x8040
	LUMINANCE12							int32	= 0x8041
	LUMINANCE16							int32	= 0x8042
	LUMINANCE4_ALPHA4						int32	= 0x8043
	LUMINANCE6_ALPHA2						int32	= 0x8044
	LUMINANCE8_ALPHA8						int32	= 0x8045
	LUMINANCE12_ALPHA4						int32	= 0x8046
	LUMINANCE12_ALPHA12						int32	= 0x8047
	LUMINANCE16_ALPHA16						int32	= 0x8048
	INTENSITY							int32	= 0x8049
	INTENSITY4							int32	= 0x804A
	INTENSITY8							int32	= 0x804B
	INTENSITY12							int32	= 0x804C
	INTENSITY16							int32	= 0x804D
	V2F								int32	= 0x2A20
	V3F								int32	= 0x2A21
	C4UB_V2F							int32	= 0x2A22
	C4UB_V3F							int32	= 0x2A23
	C3F_V3F								int32	= 0x2A24
	N3F_V3F								int32	= 0x2A25
	C4F_N3F_V3F							int32	= 0x2A26
	T2F_V3F								int32	= 0x2A27
	T4F_V4F								int32	= 0x2A28
	T2F_C4UB_V3F							int32	= 0x2A29
	T2F_C3F_V3F							int32	= 0x2A2A
	T2F_N3F_V3F							int32	= 0x2A2B
	T2F_C4F_N3F_V3F							int32	= 0x2A2C
	T4F_C4F_N3F_V4F							int32	= 0x2A2D
	CLIP_PLANE0							int32	= 0x3000
	CLIP_PLANE1							int32	= 0x3001
	CLIP_PLANE2							int32	= 0x3002
	CLIP_PLANE3							int32	= 0x3003
	CLIP_PLANE4							int32	= 0x3004
	CLIP_PLANE5							int32	= 0x3005
	LIGHT0								int32	= 0x4000
	LIGHT1								int32	= 0x4001
	LIGHT2								int32	= 0x4002
	LIGHT3								int32	= 0x4003
	LIGHT4								int32	= 0x4004
	LIGHT5								int32	= 0x4005
	LIGHT6								int32	= 0x4006
	LIGHT7								int32	= 0x4007
	UNSIGNED_BYTE_3_3_2						int32	= 0x8032
	UNSIGNED_SHORT_4_4_4_4						int32	= 0x8033
	UNSIGNED_SHORT_5_5_5_1						int32	= 0x8034
	UNSIGNED_INT_8_8_8_8						int32	= 0x8035
	UNSIGNED_INT_10_10_10_2						int32	= 0x8036
	TEXTURE_BINDING_3D						int32	= 0x806A
	PACK_SKIP_IMAGES						int32	= 0x806B
	PACK_IMAGE_HEIGHT						int32	= 0x806C
	UNPACK_SKIP_IMAGES						int32	= 0x806D
	UNPACK_IMAGE_HEIGHT						int32	= 0x806E
	TEXTURE_3D							int32	= 0x806F
	PROXY_TEXTURE_3D						int32	= 0x8070
	TEXTURE_DEPTH							int32	= 0x8071
	TEXTURE_WRAP_R							int32	= 0x8072
	MAX_3D_TEXTURE_SIZE						int32	= 0x8073
	UNSIGNED_BYTE_2_3_3_REV						int32	= 0x8362
	UNSIGNED_SHORT_5_6_5						int32	= 0x8363
	UNSIGNED_SHORT_5_6_5_REV					int32	= 0x8364
	UNSIGNED_SHORT_4_4_4_4_REV					int32	= 0x8365
	UNSIGNED_SHORT_1_5_5_5_REV					int32	= 0x8366
	UNSIGNED_INT_8_8_8_8_REV					int32	= 0x8367
	UNSIGNED_INT_2_10_10_10_REV					int32	= 0x8368
	BGR								int32	= 0x80E0
	BGRA								int32	= 0x80E1
	MAX_ELEMENTS_VERTICES						int32	= 0x80E8
	MAX_ELEMENTS_INDICES						int32	= 0x80E9
	CLAMP_TO_EDGE							int32	= 0x812F
	TEXTURE_MIN_LOD							int32	= 0x813A
	TEXTURE_MAX_LOD							int32	= 0x813B
	TEXTURE_BASE_LEVEL						int32	= 0x813C
	TEXTURE_MAX_LEVEL						int32	= 0x813D
	SMOOTH_POINT_SIZE_RANGE						int32	= 0x0B12
	SMOOTH_POINT_SIZE_GRANULARITY					int32	= 0x0B13
	SMOOTH_LINE_WIDTH_RANGE						int32	= 0x0B22
	SMOOTH_LINE_WIDTH_GRANULARITY					int32	= 0x0B23
	ALIASED_LINE_WIDTH_RANGE					int32	= 0x846E
	RESCALE_NORMAL							int32	= 0x803A
	LIGHT_MODEL_COLOR_CONTROL					int32	= 0x81F8
	SINGLE_COLOR							int32	= 0x81F9
	SEPARATE_SPECULAR_COLOR						int32	= 0x81FA
	ALIASED_POINT_SIZE_RANGE					int32	= 0x846D
	TEXTURE0							int32	= 0x84C0
	TEXTURE1							int32	= 0x84C1
	TEXTURE2							int32	= 0x84C2
	TEXTURE3							int32	= 0x84C3
	TEXTURE4							int32	= 0x84C4
	TEXTURE5							int32	= 0x84C5
	TEXTURE6							int32	= 0x84C6
	TEXTURE7							int32	= 0x84C7
	TEXTURE8							int32	= 0x84C8
	TEXTURE9							int32	= 0x84C9
	TEXTURE10							int32	= 0x84CA
	TEXTURE11							int32	= 0x84CB
	TEXTURE12							int32	= 0x84CC
	TEXTURE13							int32	= 0x84CD
	TEXTURE14							int32	= 0x84CE
	TEXTURE15							int32	= 0x84CF
	TEXTURE16							int32	= 0x84D0
	TEXTURE17							int32	= 0x84D1
	TEXTURE18							int32	= 0x84D2
	TEXTURE19							int32	= 0x84D3
	TEXTURE20							int32	= 0x84D4
	TEXTURE21							int32	= 0x84D5
	TEXTURE22							int32	= 0x84D6
	TEXTURE23							int32	= 0x84D7
	TEXTURE24							int32	= 0x84D8
	TEXTURE25							int32	= 0x84D9
	TEXTURE26							int32	= 0x84DA
	TEXTURE27							int32	= 0x84DB
	TEXTURE28							int32	= 0x84DC
	TEXTURE29							int32	= 0x84DD
	TEXTURE30							int32	= 0x84DE
	TEXTURE31							int32	= 0x84DF
	ACTIVE_TEXTURE							int32	= 0x84E0
	MULTISAMPLE							int32	= 0x809D
	SAMPLE_ALPHA_TO_COVERAGE					int32	= 0x809E
	SAMPLE_ALPHA_TO_ONE						int32	= 0x809F
	SAMPLE_COVERAGE							int32	= 0x80A0
	SAMPLE_BUFFERS							int32	= 0x80A8
	SAMPLES								int32	= 0x80A9
	SAMPLE_COVERAGE_VALUE						int32	= 0x80AA
	SAMPLE_COVERAGE_INVERT						int32	= 0x80AB
	TEXTURE_CUBE_MAP						int32	= 0x8513
	TEXTURE_BINDING_CUBE_MAP					int32	= 0x8514
	TEXTURE_CUBE_MAP_POSITIVE_X					int32	= 0x8515
	TEXTURE_CUBE_MAP_NEGATIVE_X					int32	= 0x8516
	TEXTURE_CUBE_MAP_POSITIVE_Y					int32	= 0x8517
	TEXTURE_CUBE_MAP_NEGATIVE_Y					int32	= 0x8518
	TEXTURE_CUBE_MAP_POSITIVE_Z					int32	= 0x8519
	TEXTURE_CUBE_MAP_NEGATIVE_Z					int32	= 0x851A
	PROXY_TEXTURE_CUBE_MAP						int32	= 0x851B
	MAX_CUBE_MAP_TEXTURE_SIZE					int32	= 0x851C
	COMPRESSED_RGB							int32	= 0x84ED
	COMPRESSED_RGBA							int32	= 0x84EE
	TEXTURE_COMPRESSION_HINT					int32	= 0x84EF
	TEXTURE_COMPRESSED_IMAGE_SIZE					int32	= 0x86A0
	TEXTURE_COMPRESSED						int32	= 0x86A1
	NUM_COMPRESSED_TEXTURE_FORMATS					int32	= 0x86A2
	COMPRESSED_TEXTURE_FORMATS					int32	= 0x86A3
	CLAMP_TO_BORDER							int32	= 0x812D
	CLIENT_ACTIVE_TEXTURE						int32	= 0x84E1
	MAX_TEXTURE_UNITS						int32	= 0x84E2
	TRANSPOSE_MODELVIEW_MATRIX					int32	= 0x84E3
	TRANSPOSE_PROJECTION_MATRIX					int32	= 0x84E4
	TRANSPOSE_TEXTURE_MATRIX					int32	= 0x84E5
	TRANSPOSE_COLOR_MATRIX						int32	= 0x84E6
	MULTISAMPLE_BIT							int32	= 0x20000000
	NORMAL_MAP							int32	= 0x8511
	REFLECTION_MAP							int32	= 0x8512
	COMPRESSED_ALPHA						int32	= 0x84E9
	COMPRESSED_LUMINANCE						int32	= 0x84EA
	COMPRESSED_LUMINANCE_ALPHA					int32	= 0x84EB
	COMPRESSED_INTENSITY						int32	= 0x84EC
	COMBINE								int32	= 0x8570
	COMBINE_RGB							int32	= 0x8571
	COMBINE_ALPHA							int32	= 0x8572
	SOURCE0_RGB							int32	= 0x8580
	SOURCE1_RGB							int32	= 0x8581
	SOURCE2_RGB							int32	= 0x8582
	SOURCE0_ALPHA							int32	= 0x8588
	SOURCE1_ALPHA							int32	= 0x8589
	SOURCE2_ALPHA							int32	= 0x858A
	OPERAND0_RGB							int32	= 0x8590
	OPERAND1_RGB							int32	= 0x8591
	OPERAND2_RGB							int32	= 0x8592
	OPERAND0_ALPHA							int32	= 0x8598
	OPERAND1_ALPHA							int32	= 0x8599
	OPERAND2_ALPHA							int32	= 0x859A
	RGB_SCALE							int32	= 0x8573
	ADD_SIGNED							int32	= 0x8574
	INTERPOLATE							int32	= 0x8575
	SUBTRACT							int32	= 0x84E7
	CONSTANT							int32	= 0x8576
	PRIMARY_COLOR							int32	= 0x8577
	PREVIOUS							int32	= 0x8578
	DOT3_RGB							int32	= 0x86AE
	DOT3_RGBA							int32	= 0x86AF
	BLEND_DST_RGB							int32	= 0x80C8
	BLEND_SRC_RGB							int32	= 0x80C9
	BLEND_DST_ALPHA							int32	= 0x80CA
	BLEND_SRC_ALPHA							int32	= 0x80CB
	POINT_FADE_THRESHOLD_SIZE					int32	= 0x8128
	DEPTH_COMPONENT16						int32	= 0x81A5
	DEPTH_COMPONENT24						int32	= 0x81A6
	DEPTH_COMPONENT32						int32	= 0x81A7
	MIRRORED_REPEAT							int32	= 0x8370
	MAX_TEXTURE_LOD_BIAS						int32	= 0x84FD
	TEXTURE_LOD_BIAS						int32	= 0x8501
	INCR_WRAP							int32	= 0x8507
	DECR_WRAP							int32	= 0x8508
	TEXTURE_DEPTH_SIZE						int32	= 0x884A
	TEXTURE_COMPARE_MODE						int32	= 0x884C
	TEXTURE_COMPARE_FUNC						int32	= 0x884D
	POINT_SIZE_MIN							int32	= 0x8126
	POINT_SIZE_MAX							int32	= 0x8127
	POINT_DISTANCE_ATTENUATION					int32	= 0x8129
	GENERATE_MIPMAP							int32	= 0x8191
	GENERATE_MIPMAP_HINT						int32	= 0x8192
	FOG_COORDINATE_SOURCE						int32	= 0x8450
	FOG_COORDINATE							int32	= 0x8451
	FRAGMENT_DEPTH							int32	= 0x8452
	CURRENT_FOG_COORDINATE						int32	= 0x8453
	FOG_COORDINATE_ARRAY_TYPE					int32	= 0x8454
	FOG_COORDINATE_ARRAY_STRIDE					int32	= 0x8455
	FOG_COORDINATE_ARRAY_POINTER					int32	= 0x8456
	FOG_COORDINATE_ARRAY						int32	= 0x8457
	COLOR_SUM							int32	= 0x8458
	CURRENT_SECONDARY_COLOR						int32	= 0x8459
	SECONDARY_COLOR_ARRAY_SIZE					int32	= 0x845A
	SECONDARY_COLOR_ARRAY_TYPE					int32	= 0x845B
	SECONDARY_COLOR_ARRAY_STRIDE					int32	= 0x845C
	SECONDARY_COLOR_ARRAY_POINTER					int32	= 0x845D
	SECONDARY_COLOR_ARRAY						int32	= 0x845E
	TEXTURE_FILTER_CONTROL						int32	= 0x8500
	DEPTH_TEXTURE_MODE						int32	= 0x884B
	COMPARE_R_TO_TEXTURE						int32	= 0x884E
	FUNC_ADD							int32	= 0x8006
	FUNC_SUBTRACT							int32	= 0x800A
	FUNC_REVERSE_SUBTRACT						int32	= 0x800B
	MIN								int32	= 0x8007
	MAX								int32	= 0x8008
	CONSTANT_COLOR							int32	= 0x8001
	ONE_MINUS_CONSTANT_COLOR					int32	= 0x8002
	CONSTANT_ALPHA							int32	= 0x8003
	ONE_MINUS_CONSTANT_ALPHA					int32	= 0x8004
	BUFFER_SIZE							int32	= 0x8764
	BUFFER_USAGE							int32	= 0x8765
	QUERY_COUNTER_BITS						int32	= 0x8864
	CURRENT_QUERY							int32	= 0x8865
	QUERY_RESULT							int32	= 0x8866
	QUERY_RESULT_AVAILABLE						int32	= 0x8867
	ARRAY_BUFFER							int32	= 0x8892
	ELEMENT_ARRAY_BUFFER						int32	= 0x8893
	ARRAY_BUFFER_BINDING						int32	= 0x8894
	ELEMENT_ARRAY_BUFFER_BINDING					int32	= 0x8895
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING				int32	= 0x889F
	READ_ONLY							int32	= 0x88B8
	WRITE_ONLY							int32	= 0x88B9
	READ_WRITE							int32	= 0x88BA
	BUFFER_ACCESS							int32	= 0x88BB
	BUFFER_MAPPED							int32	= 0x88BC
	BUFFER_MAP_POINTER						int32	= 0x88BD
	STREAM_DRAW							int32	= 0x88E0
	STREAM_READ							int32	= 0x88E1
	STREAM_COPY							int32	= 0x88E2
	STATIC_DRAW							int32	= 0x88E4
	STATIC_READ							int32	= 0x88E5
	STATIC_COPY							int32	= 0x88E6
	DYNAMIC_DRAW							int32	= 0x88E8
	DYNAMIC_READ							int32	= 0x88E9
	DYNAMIC_COPY							int32	= 0x88EA
	SAMPLES_PASSED							int32	= 0x8914
	SRC1_ALPHA							int32	= 0x8589
	VERTEX_ARRAY_BUFFER_BINDING					int32	= 0x8896
	NORMAL_ARRAY_BUFFER_BINDING					int32	= 0x8897
	COLOR_ARRAY_BUFFER_BINDING					int32	= 0x8898
	INDEX_ARRAY_BUFFER_BINDING					int32	= 0x8899
	TEXTURE_COORD_ARRAY_BUFFER_BINDING				int32	= 0x889A
	EDGE_FLAG_ARRAY_BUFFER_BINDING					int32	= 0x889B
	SECONDARY_COLOR_ARRAY_BUFFER_BINDING				int32	= 0x889C
	FOG_COORDINATE_ARRAY_BUFFER_BINDING				int32	= 0x889D
	WEIGHT_ARRAY_BUFFER_BINDING					int32	= 0x889E
	FOG_COORD_SRC							int32	= 0x8450
	FOG_COORD							int32	= 0x8451
	CURRENT_FOG_COORD						int32	= 0x8453
	FOG_COORD_ARRAY_TYPE						int32	= 0x8454
	FOG_COORD_ARRAY_STRIDE						int32	= 0x8455
	FOG_COORD_ARRAY_POINTER						int32	= 0x8456
	FOG_COORD_ARRAY							int32	= 0x8457
	FOG_COORD_ARRAY_BUFFER_BINDING					int32	= 0x889D
	SRC0_RGB							int32	= 0x8580
	SRC1_RGB							int32	= 0x8581
	SRC2_RGB							int32	= 0x8582
	SRC0_ALPHA							int32	= 0x8588
	SRC2_ALPHA							int32	= 0x858A
	BLEND_EQUATION_RGB						int32	= 0x8009
	VERTEX_ATTRIB_ARRAY_ENABLED					int32	= 0x8622
	VERTEX_ATTRIB_ARRAY_SIZE					int32	= 0x8623
	VERTEX_ATTRIB_ARRAY_STRIDE					int32	= 0x8624
	VERTEX_ATTRIB_ARRAY_TYPE					int32	= 0x8625
	CURRENT_VERTEX_ATTRIB						int32	= 0x8626
	VERTEX_PROGRAM_POINT_SIZE					int32	= 0x8642
	VERTEX_ATTRIB_ARRAY_POINTER					int32	= 0x8645
	STENCIL_BACK_FUNC						int32	= 0x8800
	STENCIL_BACK_FAIL						int32	= 0x8801
	STENCIL_BACK_PASS_DEPTH_FAIL					int32	= 0x8802
	STENCIL_BACK_PASS_DEPTH_PASS					int32	= 0x8803
	MAX_DRAW_BUFFERS						int32	= 0x8824
	DRAW_BUFFER0							int32	= 0x8825
	DRAW_BUFFER1							int32	= 0x8826
	DRAW_BUFFER2							int32	= 0x8827
	DRAW_BUFFER3							int32	= 0x8828
	DRAW_BUFFER4							int32	= 0x8829
	DRAW_BUFFER5							int32	= 0x882A
	DRAW_BUFFER6							int32	= 0x882B
	DRAW_BUFFER7							int32	= 0x882C
	DRAW_BUFFER8							int32	= 0x882D
	DRAW_BUFFER9							int32	= 0x882E
	DRAW_BUFFER10							int32	= 0x882F
	DRAW_BUFFER11							int32	= 0x8830
	DRAW_BUFFER12							int32	= 0x8831
	DRAW_BUFFER13							int32	= 0x8832
	DRAW_BUFFER14							int32	= 0x8833
	DRAW_BUFFER15							int32	= 0x8834
	BLEND_EQUATION_ALPHA						int32	= 0x883D
	MAX_VERTEX_ATTRIBS						int32	= 0x8869
	VERTEX_ATTRIB_ARRAY_NORMALIZED					int32	= 0x886A
	MAX_TEXTURE_IMAGE_UNITS						int32	= 0x8872
	FRAGMENT_SHADER							int32	= 0x8B30
	VERTEX_SHADER							int32	= 0x8B31
	MAX_FRAGMENT_UNIFORM_COMPONENTS					int32	= 0x8B49
	MAX_VERTEX_UNIFORM_COMPONENTS					int32	= 0x8B4A
	MAX_VARYING_FLOATS						int32	= 0x8B4B
	MAX_VERTEX_TEXTURE_IMAGE_UNITS					int32	= 0x8B4C
	MAX_COMBINED_TEXTURE_IMAGE_UNITS				int32	= 0x8B4D
	SHADER_TYPE							int32	= 0x8B4F
	FLOAT_VEC2							int32	= 0x8B50
	FLOAT_VEC3							int32	= 0x8B51
	FLOAT_VEC4							int32	= 0x8B52
	INT_VEC2							int32	= 0x8B53
	INT_VEC3							int32	= 0x8B54
	INT_VEC4							int32	= 0x8B55
	BOOL								int32	= 0x8B56
	BOOL_VEC2							int32	= 0x8B57
	BOOL_VEC3							int32	= 0x8B58
	BOOL_VEC4							int32	= 0x8B59
	FLOAT_MAT2							int32	= 0x8B5A
	FLOAT_MAT3							int32	= 0x8B5B
	FLOAT_MAT4							int32	= 0x8B5C
	SAMPLER_1D							int32	= 0x8B5D
	SAMPLER_2D							int32	= 0x8B5E
	SAMPLER_3D							int32	= 0x8B5F
	SAMPLER_CUBE							int32	= 0x8B60
	SAMPLER_1D_SHADOW						int32	= 0x8B61
	SAMPLER_2D_SHADOW						int32	= 0x8B62
	DELETE_STATUS							int32	= 0x8B80
	COMPILE_STATUS							int32	= 0x8B81
	LINK_STATUS							int32	= 0x8B82
	VALIDATE_STATUS							int32	= 0x8B83
	INFO_LOG_LENGTH							int32	= 0x8B84
	ATTACHED_SHADERS						int32	= 0x8B85
	ACTIVE_UNIFORMS							int32	= 0x8B86
	ACTIVE_UNIFORM_MAX_LENGTH					int32	= 0x8B87
	SHADER_SOURCE_LENGTH						int32	= 0x8B88
	ACTIVE_ATTRIBUTES						int32	= 0x8B89
	ACTIVE_ATTRIBUTE_MAX_LENGTH					int32	= 0x8B8A
	FRAGMENT_SHADER_DERIVATIVE_HINT					int32	= 0x8B8B
	SHADING_LANGUAGE_VERSION					int32	= 0x8B8C
	CURRENT_PROGRAM							int32	= 0x8B8D
	POINT_SPRITE_COORD_ORIGIN					int32	= 0x8CA0
	LOWER_LEFT							int32	= 0x8CA1
	UPPER_LEFT							int32	= 0x8CA2
	STENCIL_BACK_REF						int32	= 0x8CA3
	STENCIL_BACK_VALUE_MASK						int32	= 0x8CA4
	STENCIL_BACK_WRITEMASK						int32	= 0x8CA5
	VERTEX_PROGRAM_TWO_SIDE						int32	= 0x8643
	POINT_SPRITE							int32	= 0x8861
	COORD_REPLACE							int32	= 0x8862
	MAX_TEXTURE_COORDS						int32	= 0x8871
	PIXEL_PACK_BUFFER						int32	= 0x88EB
	PIXEL_UNPACK_BUFFER						int32	= 0x88EC
	PIXEL_PACK_BUFFER_BINDING					int32	= 0x88ED
	PIXEL_UNPACK_BUFFER_BINDING					int32	= 0x88EF
	FLOAT_MAT2x3							int32	= 0x8B65
	FLOAT_MAT2x4							int32	= 0x8B66
	FLOAT_MAT3x2							int32	= 0x8B67
	FLOAT_MAT3x4							int32	= 0x8B68
	FLOAT_MAT4x2							int32	= 0x8B69
	FLOAT_MAT4x3							int32	= 0x8B6A
	SRGB								int32	= 0x8C40
	SRGB8								int32	= 0x8C41
	SRGB_ALPHA							int32	= 0x8C42
	SRGB8_ALPHA8							int32	= 0x8C43
	COMPRESSED_SRGB							int32	= 0x8C48
	COMPRESSED_SRGB_ALPHA						int32	= 0x8C49
	CURRENT_RASTER_SECONDARY_COLOR					int32	= 0x845F
	SLUMINANCE_ALPHA						int32	= 0x8C44
	SLUMINANCE8_ALPHA8						int32	= 0x8C45
	SLUMINANCE							int32	= 0x8C46
	SLUMINANCE8							int32	= 0x8C47
	COMPRESSED_SLUMINANCE						int32	= 0x8C4A
	COMPRESSED_SLUMINANCE_ALPHA					int32	= 0x8C4B
	COMPARE_REF_TO_TEXTURE						int32	= 0x884E
	CLIP_DISTANCE0							int32	= 0x3000
	CLIP_DISTANCE1							int32	= 0x3001
	CLIP_DISTANCE2							int32	= 0x3002
	CLIP_DISTANCE3							int32	= 0x3003
	CLIP_DISTANCE4							int32	= 0x3004
	CLIP_DISTANCE5							int32	= 0x3005
	CLIP_DISTANCE6							int32	= 0x3006
	CLIP_DISTANCE7							int32	= 0x3007
	MAX_CLIP_DISTANCES						int32	= 0x0D32
	MAJOR_VERSION							int32	= 0x821B
	MINOR_VERSION							int32	= 0x821C
	NUM_EXTENSIONS							int32	= 0x821D
	CONTEXT_FLAGS							int32	= 0x821E
	COMPRESSED_RED							int32	= 0x8225
	COMPRESSED_RG							int32	= 0x8226
	CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT				int32	= 0x00000001
	RGBA32F								int32	= 0x8814
	RGB32F								int32	= 0x8815
	RGBA16F								int32	= 0x881A
	RGB16F								int32	= 0x881B
	VERTEX_ATTRIB_ARRAY_INTEGER					int32	= 0x88FD
	MAX_ARRAY_TEXTURE_LAYERS					int32	= 0x88FF
	MIN_PROGRAM_TEXEL_OFFSET					int32	= 0x8904
	MAX_PROGRAM_TEXEL_OFFSET					int32	= 0x8905
	CLAMP_READ_COLOR						int32	= 0x891C
	FIXED_ONLY							int32	= 0x891D
	MAX_VARYING_COMPONENTS						int32	= 0x8B4B
	TEXTURE_1D_ARRAY						int32	= 0x8C18
	PROXY_TEXTURE_1D_ARRAY						int32	= 0x8C19
	TEXTURE_2D_ARRAY						int32	= 0x8C1A
	PROXY_TEXTURE_2D_ARRAY						int32	= 0x8C1B
	TEXTURE_BINDING_1D_ARRAY					int32	= 0x8C1C
	TEXTURE_BINDING_2D_ARRAY					int32	= 0x8C1D
	R11F_G11F_B10F							int32	= 0x8C3A
	UNSIGNED_INT_10F_11F_11F_REV					int32	= 0x8C3B
	RGB9_E5								int32	= 0x8C3D
	UNSIGNED_INT_5_9_9_9_REV					int32	= 0x8C3E
	TEXTURE_SHARED_SIZE						int32	= 0x8C3F
	TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH				int32	= 0x8C76
	TRANSFORM_FEEDBACK_BUFFER_MODE					int32	= 0x8C7F
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS			int32	= 0x8C80
	TRANSFORM_FEEDBACK_VARYINGS					int32	= 0x8C83
	TRANSFORM_FEEDBACK_BUFFER_START					int32	= 0x8C84
	TRANSFORM_FEEDBACK_BUFFER_SIZE					int32	= 0x8C85
	PRIMITIVES_GENERATED						int32	= 0x8C87
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN				int32	= 0x8C88
	RASTERIZER_DISCARD						int32	= 0x8C89
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS			int32	= 0x8C8A
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS				int32	= 0x8C8B
	INTERLEAVED_ATTRIBS						int32	= 0x8C8C
	SEPARATE_ATTRIBS						int32	= 0x8C8D
	TRANSFORM_FEEDBACK_BUFFER					int32	= 0x8C8E
	TRANSFORM_FEEDBACK_BUFFER_BINDING				int32	= 0x8C8F
	RGBA32UI							int32	= 0x8D70
	RGB32UI								int32	= 0x8D71
	RGBA16UI							int32	= 0x8D76
	RGB16UI								int32	= 0x8D77
	RGBA8UI								int32	= 0x8D7C
	RGB8UI								int32	= 0x8D7D
	RGBA32I								int32	= 0x8D82
	RGB32I								int32	= 0x8D83
	RGBA16I								int32	= 0x8D88
	RGB16I								int32	= 0x8D89
	RGBA8I								int32	= 0x8D8E
	RGB8I								int32	= 0x8D8F
	RED_INTEGER							int32	= 0x8D94
	GREEN_INTEGER							int32	= 0x8D95
	BLUE_INTEGER							int32	= 0x8D96
	RGB_INTEGER							int32	= 0x8D98
	RGBA_INTEGER							int32	= 0x8D99
	BGR_INTEGER							int32	= 0x8D9A
	BGRA_INTEGER							int32	= 0x8D9B
	SAMPLER_1D_ARRAY						int32	= 0x8DC0
	SAMPLER_2D_ARRAY						int32	= 0x8DC1
	SAMPLER_1D_ARRAY_SHADOW						int32	= 0x8DC3
	SAMPLER_2D_ARRAY_SHADOW						int32	= 0x8DC4
	SAMPLER_CUBE_SHADOW						int32	= 0x8DC5
	UNSIGNED_INT_VEC2						int32	= 0x8DC6
	UNSIGNED_INT_VEC3						int32	= 0x8DC7
	UNSIGNED_INT_VEC4						int32	= 0x8DC8
	INT_SAMPLER_1D							int32	= 0x8DC9
	INT_SAMPLER_2D							int32	= 0x8DCA
	INT_SAMPLER_3D							int32	= 0x8DCB
	INT_SAMPLER_CUBE						int32	= 0x8DCC
	INT_SAMPLER_1D_ARRAY						int32	= 0x8DCE
	INT_SAMPLER_2D_ARRAY						int32	= 0x8DCF
	UNSIGNED_INT_SAMPLER_1D						int32	= 0x8DD1
	UNSIGNED_INT_SAMPLER_2D						int32	= 0x8DD2
	UNSIGNED_INT_SAMPLER_3D						int32	= 0x8DD3
	UNSIGNED_INT_SAMPLER_CUBE					int32	= 0x8DD4
	UNSIGNED_INT_SAMPLER_1D_ARRAY					int32	= 0x8DD6
	UNSIGNED_INT_SAMPLER_2D_ARRAY					int32	= 0x8DD7
	QUERY_WAIT							int32	= 0x8E13
	QUERY_NO_WAIT							int32	= 0x8E14
	QUERY_BY_REGION_WAIT						int32	= 0x8E15
	QUERY_BY_REGION_NO_WAIT						int32	= 0x8E16
	BUFFER_ACCESS_FLAGS						int32	= 0x911F
	BUFFER_MAP_LENGTH						int32	= 0x9120
	BUFFER_MAP_OFFSET						int32	= 0x9121
	DEPTH_COMPONENT32F						int32	= 0x8CAC
	DEPTH32F_STENCIL8						int32	= 0x8CAD
	FLOAT_32_UNSIGNED_INT_24_8_REV					int32	= 0x8DAD
	INVALID_FRAMEBUFFER_OPERATION					int32	= 0x0506
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING				int32	= 0x8210
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE				int32	= 0x8211
	FRAMEBUFFER_ATTACHMENT_RED_SIZE					int32	= 0x8212
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE				int32	= 0x8213
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE				int32	= 0x8214
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE				int32	= 0x8215
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE				int32	= 0x8216
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE				int32	= 0x8217
	FRAMEBUFFER_DEFAULT						int32	= 0x8218
	FRAMEBUFFER_UNDEFINED						int32	= 0x8219
	DEPTH_STENCIL_ATTACHMENT					int32	= 0x821A
	MAX_RENDERBUFFER_SIZE						int32	= 0x84E8
	DEPTH_STENCIL							int32	= 0x84F9
	UNSIGNED_INT_24_8						int32	= 0x84FA
	DEPTH24_STENCIL8						int32	= 0x88F0
	TEXTURE_STENCIL_SIZE						int32	= 0x88F1
	TEXTURE_RED_TYPE						int32	= 0x8C10
	TEXTURE_GREEN_TYPE						int32	= 0x8C11
	TEXTURE_BLUE_TYPE						int32	= 0x8C12
	TEXTURE_ALPHA_TYPE						int32	= 0x8C13
	TEXTURE_DEPTH_TYPE						int32	= 0x8C16
	UNSIGNED_NORMALIZED						int32	= 0x8C17
	FRAMEBUFFER_BINDING						int32	= 0x8CA6
	DRAW_FRAMEBUFFER_BINDING					int32	= 0x8CA6
	RENDERBUFFER_BINDING						int32	= 0x8CA7
	READ_FRAMEBUFFER						int32	= 0x8CA8
	DRAW_FRAMEBUFFER						int32	= 0x8CA9
	READ_FRAMEBUFFER_BINDING					int32	= 0x8CAA
	RENDERBUFFER_SAMPLES						int32	= 0x8CAB
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE				int32	= 0x8CD0
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME				int32	= 0x8CD1
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL				int32	= 0x8CD2
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE			int32	= 0x8CD3
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER				int32	= 0x8CD4
	FRAMEBUFFER_COMPLETE						int32	= 0x8CD5
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT				int32	= 0x8CD6
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT			int32	= 0x8CD7
	FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER				int32	= 0x8CDB
	FRAMEBUFFER_INCOMPLETE_READ_BUFFER				int32	= 0x8CDC
	FRAMEBUFFER_UNSUPPORTED						int32	= 0x8CDD
	MAX_COLOR_ATTACHMENTS						int32	= 0x8CDF
	COLOR_ATTACHMENT0						int32	= 0x8CE0
	COLOR_ATTACHMENT1						int32	= 0x8CE1
	COLOR_ATTACHMENT2						int32	= 0x8CE2
	COLOR_ATTACHMENT3						int32	= 0x8CE3
	COLOR_ATTACHMENT4						int32	= 0x8CE4
	COLOR_ATTACHMENT5						int32	= 0x8CE5
	COLOR_ATTACHMENT6						int32	= 0x8CE6
	COLOR_ATTACHMENT7						int32	= 0x8CE7
	COLOR_ATTACHMENT8						int32	= 0x8CE8
	COLOR_ATTACHMENT9						int32	= 0x8CE9
	COLOR_ATTACHMENT10						int32	= 0x8CEA
	COLOR_ATTACHMENT11						int32	= 0x8CEB
	COLOR_ATTACHMENT12						int32	= 0x8CEC
	COLOR_ATTACHMENT13						int32	= 0x8CED
	COLOR_ATTACHMENT14						int32	= 0x8CEE
	COLOR_ATTACHMENT15						int32	= 0x8CEF
	DEPTH_ATTACHMENT						int32	= 0x8D00
	STENCIL_ATTACHMENT						int32	= 0x8D20
	FRAMEBUFFER							int32	= 0x8D40
	RENDERBUFFER							int32	= 0x8D41
	RENDERBUFFER_WIDTH						int32	= 0x8D42
	RENDERBUFFER_HEIGHT						int32	= 0x8D43
	RENDERBUFFER_INTERNAL_FORMAT					int32	= 0x8D44
	STENCIL_INDEX1							int32	= 0x8D46
	STENCIL_INDEX4							int32	= 0x8D47
	STENCIL_INDEX8							int32	= 0x8D48
	STENCIL_INDEX16							int32	= 0x8D49
	RENDERBUFFER_RED_SIZE						int32	= 0x8D50
	RENDERBUFFER_GREEN_SIZE						int32	= 0x8D51
	RENDERBUFFER_BLUE_SIZE						int32	= 0x8D52
	RENDERBUFFER_ALPHA_SIZE						int32	= 0x8D53
	RENDERBUFFER_DEPTH_SIZE						int32	= 0x8D54
	RENDERBUFFER_STENCIL_SIZE					int32	= 0x8D55
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE				int32	= 0x8D56
	MAX_SAMPLES							int32	= 0x8D57
	INDEX								int32	= 0x8222
	TEXTURE_LUMINANCE_TYPE						int32	= 0x8C14
	TEXTURE_INTENSITY_TYPE						int32	= 0x8C15
	FRAMEBUFFER_SRGB						int32	= 0x8DB9
	HALF_FLOAT							int32	= 0x140B
	MAP_READ_BIT							int32	= 0x0001
	MAP_WRITE_BIT							int32	= 0x0002
	MAP_INVALIDATE_RANGE_BIT					int32	= 0x0004
	MAP_INVALIDATE_BUFFER_BIT					int32	= 0x0008
	MAP_FLUSH_EXPLICIT_BIT						int32	= 0x0010
	MAP_UNSYNCHRONIZED_BIT						int32	= 0x0020
	COMPRESSED_RED_RGTC1						int32	= 0x8DBB
	COMPRESSED_SIGNED_RED_RGTC1					int32	= 0x8DBC
	COMPRESSED_RG_RGTC2						int32	= 0x8DBD
	COMPRESSED_SIGNED_RG_RGTC2					int32	= 0x8DBE
	RG								int32	= 0x8227
	RG_INTEGER							int32	= 0x8228
	R8								int32	= 0x8229
	R16								int32	= 0x822A
	RG8								int32	= 0x822B
	RG16								int32	= 0x822C
	R16F								int32	= 0x822D
	R32F								int32	= 0x822E
	RG16F								int32	= 0x822F
	RG32F								int32	= 0x8230
	R8I								int32	= 0x8231
	R8UI								int32	= 0x8232
	R16I								int32	= 0x8233
	R16UI								int32	= 0x8234
	R32I								int32	= 0x8235
	R32UI								int32	= 0x8236
	RG8I								int32	= 0x8237
	RG8UI								int32	= 0x8238
	RG16I								int32	= 0x8239
	RG16UI								int32	= 0x823A
	RG32I								int32	= 0x823B
	RG32UI								int32	= 0x823C
	VERTEX_ARRAY_BINDING						int32	= 0x85B5
	CLAMP_VERTEX_COLOR						int32	= 0x891A
	CLAMP_FRAGMENT_COLOR						int32	= 0x891B
	ALPHA_INTEGER							int32	= 0x8D97
	SAMPLER_2D_RECT							int32	= 0x8B63
	SAMPLER_2D_RECT_SHADOW						int32	= 0x8B64
	SAMPLER_BUFFER							int32	= 0x8DC2
	INT_SAMPLER_2D_RECT						int32	= 0x8DCD
	INT_SAMPLER_BUFFER						int32	= 0x8DD0
	UNSIGNED_INT_SAMPLER_2D_RECT					int32	= 0x8DD5
	UNSIGNED_INT_SAMPLER_BUFFER					int32	= 0x8DD8
	TEXTURE_BUFFER							int32	= 0x8C2A
	MAX_TEXTURE_BUFFER_SIZE						int32	= 0x8C2B
	TEXTURE_BINDING_BUFFER						int32	= 0x8C2C
	TEXTURE_BUFFER_DATA_STORE_BINDING				int32	= 0x8C2D
	TEXTURE_RECTANGLE						int32	= 0x84F5
	TEXTURE_BINDING_RECTANGLE					int32	= 0x84F6
	PROXY_TEXTURE_RECTANGLE						int32	= 0x84F7
	MAX_RECTANGLE_TEXTURE_SIZE					int32	= 0x84F8
	R8_SNORM							int32	= 0x8F94
	RG8_SNORM							int32	= 0x8F95
	RGB8_SNORM							int32	= 0x8F96
	RGBA8_SNORM							int32	= 0x8F97
	R16_SNORM							int32	= 0x8F98
	RG16_SNORM							int32	= 0x8F99
	RGB16_SNORM							int32	= 0x8F9A
	RGBA16_SNORM							int32	= 0x8F9B
	SIGNED_NORMALIZED						int32	= 0x8F9C
	PRIMITIVE_RESTART						int32	= 0x8F9D
	PRIMITIVE_RESTART_INDEX						int32	= 0x8F9E
	COPY_READ_BUFFER						int32	= 0x8F36
	COPY_WRITE_BUFFER						int32	= 0x8F37
	UNIFORM_BUFFER							int32	= 0x8A11
	UNIFORM_BUFFER_BINDING						int32	= 0x8A28
	UNIFORM_BUFFER_START						int32	= 0x8A29
	UNIFORM_BUFFER_SIZE						int32	= 0x8A2A
	MAX_VERTEX_UNIFORM_BLOCKS					int32	= 0x8A2B
	MAX_FRAGMENT_UNIFORM_BLOCKS					int32	= 0x8A2D
	MAX_COMBINED_UNIFORM_BLOCKS					int32	= 0x8A2E
	MAX_UNIFORM_BUFFER_BINDINGS					int32	= 0x8A2F
	MAX_UNIFORM_BLOCK_SIZE						int32	= 0x8A30
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS				int32	= 0x8A31
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS			int32	= 0x8A33
	UNIFORM_BUFFER_OFFSET_ALIGNMENT					int32	= 0x8A34
	ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH				int32	= 0x8A35
	ACTIVE_UNIFORM_BLOCKS						int32	= 0x8A36
	UNIFORM_TYPE							int32	= 0x8A37
	UNIFORM_SIZE							int32	= 0x8A38
	UNIFORM_NAME_LENGTH						int32	= 0x8A39
	UNIFORM_BLOCK_INDEX						int32	= 0x8A3A
	UNIFORM_OFFSET							int32	= 0x8A3B
	UNIFORM_ARRAY_STRIDE						int32	= 0x8A3C
	UNIFORM_MATRIX_STRIDE						int32	= 0x8A3D
	UNIFORM_IS_ROW_MAJOR						int32	= 0x8A3E
	UNIFORM_BLOCK_BINDING						int32	= 0x8A3F
	UNIFORM_BLOCK_DATA_SIZE						int32	= 0x8A40
	UNIFORM_BLOCK_NAME_LENGTH					int32	= 0x8A41
	UNIFORM_BLOCK_ACTIVE_UNIFORMS					int32	= 0x8A42
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES				int32	= 0x8A43
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER			int32	= 0x8A44
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER			int32	= 0x8A46
	INVALID_INDEX							uint64	= 0xFFFFFFFF
	CONTEXT_CORE_PROFILE_BIT					int32	= 0x00000001
	CONTEXT_COMPATIBILITY_PROFILE_BIT				int32	= 0x00000002
	LINES_ADJACENCY							int32	= 0x000A
	LINE_STRIP_ADJACENCY						int32	= 0x000B
	TRIANGLES_ADJACENCY						int32	= 0x000C
	TRIANGLE_STRIP_ADJACENCY					int32	= 0x000D
	PROGRAM_POINT_SIZE						int32	= 0x8642
	MAX_GEOMETRY_TEXTURE_IMAGE_UNITS				int32	= 0x8C29
	FRAMEBUFFER_ATTACHMENT_LAYERED					int32	= 0x8DA7
	FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS				int32	= 0x8DA8
	GEOMETRY_SHADER							int32	= 0x8DD9
	GEOMETRY_VERTICES_OUT						int32	= 0x8916
	GEOMETRY_INPUT_TYPE						int32	= 0x8917
	GEOMETRY_OUTPUT_TYPE						int32	= 0x8918
	MAX_GEOMETRY_UNIFORM_COMPONENTS					int32	= 0x8DDF
	MAX_GEOMETRY_OUTPUT_VERTICES					int32	= 0x8DE0
	MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS				int32	= 0x8DE1
	MAX_VERTEX_OUTPUT_COMPONENTS					int32	= 0x9122
	MAX_GEOMETRY_INPUT_COMPONENTS					int32	= 0x9123
	MAX_GEOMETRY_OUTPUT_COMPONENTS					int32	= 0x9124
	MAX_FRAGMENT_INPUT_COMPONENTS					int32	= 0x9125
	CONTEXT_PROFILE_MASK						int32	= 0x9126
	DEPTH_CLAMP							int32	= 0x864F
	QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION			int32	= 0x8E4C
	FIRST_VERTEX_CONVENTION						int32	= 0x8E4D
	LAST_VERTEX_CONVENTION						int32	= 0x8E4E
	PROVOKING_VERTEX						int32	= 0x8E4F
	TEXTURE_CUBE_MAP_SEAMLESS					int32	= 0x884F
	MAX_SERVER_WAIT_TIMEOUT						int32	= 0x9111
	OBJECT_TYPE							int32	= 0x9112
	SYNC_CONDITION							int32	= 0x9113
	SYNC_STATUS							int32	= 0x9114
	SYNC_FLAGS							int32	= 0x9115
	SYNC_FENCE							int32	= 0x9116
	SYNC_GPU_COMMANDS_COMPLETE					int32	= 0x9117
	UNSIGNALED							int32	= 0x9118
	SIGNALED							int32	= 0x9119
	ALREADY_SIGNALED						int32	= 0x911A
	TIMEOUT_EXPIRED							int32	= 0x911B
	CONDITION_SATISFIED						int32	= 0x911C
	WAIT_FAILED							int32	= 0x911D
	TIMEOUT_IGNORED							uint64	= 0xFFFFFFFFFFFFFFFF
	SYNC_FLUSH_COMMANDS_BIT						int32	= 0x00000001
	SAMPLE_POSITION							int32	= 0x8E50
	SAMPLE_MASK							int32	= 0x8E51
	SAMPLE_MASK_VALUE						int32	= 0x8E52
	MAX_SAMPLE_MASK_WORDS						int32	= 0x8E59
	TEXTURE_2D_MULTISAMPLE						int32	= 0x9100
	PROXY_TEXTURE_2D_MULTISAMPLE					int32	= 0x9101
	TEXTURE_2D_MULTISAMPLE_ARRAY					int32	= 0x9102
	PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY				int32	= 0x9103
	TEXTURE_BINDING_2D_MULTISAMPLE					int32	= 0x9104
	TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY				int32	= 0x9105
	TEXTURE_SAMPLES							int32	= 0x9106
	TEXTURE_FIXED_SAMPLE_LOCATIONS					int32	= 0x9107
	SAMPLER_2D_MULTISAMPLE						int32	= 0x9108
	INT_SAMPLER_2D_MULTISAMPLE					int32	= 0x9109
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE				int32	= 0x910A
	SAMPLER_2D_MULTISAMPLE_ARRAY					int32	= 0x910B
	INT_SAMPLER_2D_MULTISAMPLE_ARRAY				int32	= 0x910C
	UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY			int32	= 0x910D
	MAX_COLOR_TEXTURE_SAMPLES					int32	= 0x910E
	MAX_DEPTH_TEXTURE_SAMPLES					int32	= 0x910F
	MAX_INTEGER_SAMPLES						int32	= 0x9110
	VERTEX_ATTRIB_ARRAY_DIVISOR					int32	= 0x88FE
	SRC1_COLOR							int32	= 0x88F9
	ONE_MINUS_SRC1_COLOR						int32	= 0x88FA
	ONE_MINUS_SRC1_ALPHA						int32	= 0x88FB
	MAX_DUAL_SOURCE_DRAW_BUFFERS					int32	= 0x88FC
	ANY_SAMPLES_PASSED						int32	= 0x8C2F
	SAMPLER_BINDING							int32	= 0x8919
	RGB10_A2UI							int32	= 0x906F
	TEXTURE_SWIZZLE_R						int32	= 0x8E42
	TEXTURE_SWIZZLE_G						int32	= 0x8E43
	TEXTURE_SWIZZLE_B						int32	= 0x8E44
	TEXTURE_SWIZZLE_A						int32	= 0x8E45
	TEXTURE_SWIZZLE_RGBA						int32	= 0x8E46
	TIME_ELAPSED							int32	= 0x88BF
	TIMESTAMP							int32	= 0x8E28
	INT_2_10_10_10_REV						int32	= 0x8D9F
	SAMPLE_SHADING							int32	= 0x8C36
	MIN_SAMPLE_SHADING_VALUE					int32	= 0x8C37
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET				int32	= 0x8E5E
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET				int32	= 0x8E5F
	TEXTURE_CUBE_MAP_ARRAY						int32	= 0x9009
	TEXTURE_BINDING_CUBE_MAP_ARRAY					int32	= 0x900A
	PROXY_TEXTURE_CUBE_MAP_ARRAY					int32	= 0x900B
	SAMPLER_CUBE_MAP_ARRAY						int32	= 0x900C
	SAMPLER_CUBE_MAP_ARRAY_SHADOW					int32	= 0x900D
	INT_SAMPLER_CUBE_MAP_ARRAY					int32	= 0x900E
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY				int32	= 0x900F
	DRAW_INDIRECT_BUFFER						int32	= 0x8F3F
	DRAW_INDIRECT_BUFFER_BINDING					int32	= 0x8F43
	GEOMETRY_SHADER_INVOCATIONS					int32	= 0x887F
	MAX_GEOMETRY_SHADER_INVOCATIONS					int32	= 0x8E5A
	MIN_FRAGMENT_INTERPOLATION_OFFSET				int32	= 0x8E5B
	MAX_FRAGMENT_INTERPOLATION_OFFSET				int32	= 0x8E5C
	FRAGMENT_INTERPOLATION_OFFSET_BITS				int32	= 0x8E5D
	MAX_VERTEX_STREAMS						int32	= 0x8E71
	DOUBLE_VEC2							int32	= 0x8FFC
	DOUBLE_VEC3							int32	= 0x8FFD
	DOUBLE_VEC4							int32	= 0x8FFE
	DOUBLE_MAT2							int32	= 0x8F46
	DOUBLE_MAT3							int32	= 0x8F47
	DOUBLE_MAT4							int32	= 0x8F48
	DOUBLE_MAT2x3							int32	= 0x8F49
	DOUBLE_MAT2x4							int32	= 0x8F4A
	DOUBLE_MAT3x2							int32	= 0x8F4B
	DOUBLE_MAT3x4							int32	= 0x8F4C
	DOUBLE_MAT4x2							int32	= 0x8F4D
	DOUBLE_MAT4x3							int32	= 0x8F4E
	ACTIVE_SUBROUTINES						int32	= 0x8DE5
	ACTIVE_SUBROUTINE_UNIFORMS					int32	= 0x8DE6
	ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS				int32	= 0x8E47
	ACTIVE_SUBROUTINE_MAX_LENGTH					int32	= 0x8E48
	ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH				int32	= 0x8E49
	MAX_SUBROUTINES							int32	= 0x8DE7
	MAX_SUBROUTINE_UNIFORM_LOCATIONS				int32	= 0x8DE8
	NUM_COMPATIBLE_SUBROUTINES					int32	= 0x8E4A
	COMPATIBLE_SUBROUTINES						int32	= 0x8E4B
	PATCHES								int32	= 0x000E
	PATCH_VERTICES							int32	= 0x8E72
	PATCH_DEFAULT_INNER_LEVEL					int32	= 0x8E73
	PATCH_DEFAULT_OUTER_LEVEL					int32	= 0x8E74
	TESS_CONTROL_OUTPUT_VERTICES					int32	= 0x8E75
	TESS_GEN_MODE							int32	= 0x8E76
	TESS_GEN_SPACING						int32	= 0x8E77
	TESS_GEN_VERTEX_ORDER						int32	= 0x8E78
	TESS_GEN_POINT_MODE						int32	= 0x8E79
	ISOLINES							int32	= 0x8E7A
	FRACTIONAL_ODD							int32	= 0x8E7B
	FRACTIONAL_EVEN							int32	= 0x8E7C
	MAX_PATCH_VERTICES						int32	= 0x8E7D
	MAX_TESS_GEN_LEVEL						int32	= 0x8E7E
	MAX_TESS_CONTROL_UNIFORM_COMPONENTS				int32	= 0x8E7F
	MAX_TESS_EVALUATION_UNIFORM_COMPONENTS				int32	= 0x8E80
	MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS				int32	= 0x8E81
	MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS				int32	= 0x8E82
	MAX_TESS_CONTROL_OUTPUT_COMPONENTS				int32	= 0x8E83
	MAX_TESS_PATCH_COMPONENTS					int32	= 0x8E84
	MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS			int32	= 0x8E85
	MAX_TESS_EVALUATION_OUTPUT_COMPONENTS				int32	= 0x8E86
	MAX_TESS_CONTROL_UNIFORM_BLOCKS					int32	= 0x8E89
	MAX_TESS_EVALUATION_UNIFORM_BLOCKS				int32	= 0x8E8A
	MAX_TESS_CONTROL_INPUT_COMPONENTS				int32	= 0x886C
	MAX_TESS_EVALUATION_INPUT_COMPONENTS				int32	= 0x886D
	MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS			int32	= 0x8E1E
	MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS			int32	= 0x8E1F
	UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER			int32	= 0x84F0
	UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER		int32	= 0x84F1
	TESS_EVALUATION_SHADER						int32	= 0x8E87
	TESS_CONTROL_SHADER						int32	= 0x8E88
	TRANSFORM_FEEDBACK						int32	= 0x8E22
	TRANSFORM_FEEDBACK_BUFFER_PAUSED				int32	= 0x8E23
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE				int32	= 0x8E24
	TRANSFORM_FEEDBACK_BINDING					int32	= 0x8E25
	MAX_TRANSFORM_FEEDBACK_BUFFERS					int32	= 0x8E70
	FIXED								int32	= 0x140C
	IMPLEMENTATION_COLOR_READ_TYPE					int32	= 0x8B9A
	IMPLEMENTATION_COLOR_READ_FORMAT				int32	= 0x8B9B
	LOW_FLOAT							int32	= 0x8DF0
	MEDIUM_FLOAT							int32	= 0x8DF1
	HIGH_FLOAT							int32	= 0x8DF2
	LOW_INT								int32	= 0x8DF3
	MEDIUM_INT							int32	= 0x8DF4
	HIGH_INT							int32	= 0x8DF5
	SHADER_COMPILER							int32	= 0x8DFA
	SHADER_BINARY_FORMATS						int32	= 0x8DF8
	NUM_SHADER_BINARY_FORMATS					int32	= 0x8DF9
	MAX_VERTEX_UNIFORM_VECTORS					int32	= 0x8DFB
	MAX_VARYING_VECTORS						int32	= 0x8DFC
	MAX_FRAGMENT_UNIFORM_VECTORS					int32	= 0x8DFD
	RGB565								int32	= 0x8D62
	PROGRAM_BINARY_RETRIEVABLE_HINT					int32	= 0x8257
	PROGRAM_BINARY_LENGTH						int32	= 0x8741
	NUM_PROGRAM_BINARY_FORMATS					int32	= 0x87FE
	PROGRAM_BINARY_FORMATS						int32	= 0x87FF
	VERTEX_SHADER_BIT						int32	= 0x00000001
	FRAGMENT_SHADER_BIT						int32	= 0x00000002
	GEOMETRY_SHADER_BIT						int32	= 0x00000004
	TESS_CONTROL_SHADER_BIT						int32	= 0x00000008
	TESS_EVALUATION_SHADER_BIT					int32	= 0x00000010
	ALL_SHADER_BITS							uint64	= 0xFFFFFFFF
	PROGRAM_SEPARABLE						int32	= 0x8258
	ACTIVE_PROGRAM							int32	= 0x8259
	PROGRAM_PIPELINE_BINDING					int32	= 0x825A
	MAX_VIEWPORTS							int32	= 0x825B
	VIEWPORT_SUBPIXEL_BITS						int32	= 0x825C
	VIEWPORT_BOUNDS_RANGE						int32	= 0x825D
	LAYER_PROVOKING_VERTEX						int32	= 0x825E
	VIEWPORT_INDEX_PROVOKING_VERTEX					int32	= 0x825F
	UNDEFINED_VERTEX						int32	= 0x8260
	UNPACK_COMPRESSED_BLOCK_WIDTH					int32	= 0x9127
	UNPACK_COMPRESSED_BLOCK_HEIGHT					int32	= 0x9128
	UNPACK_COMPRESSED_BLOCK_DEPTH					int32	= 0x9129
	UNPACK_COMPRESSED_BLOCK_SIZE					int32	= 0x912A
	PACK_COMPRESSED_BLOCK_WIDTH					int32	= 0x912B
	PACK_COMPRESSED_BLOCK_HEIGHT					int32	= 0x912C
	PACK_COMPRESSED_BLOCK_DEPTH					int32	= 0x912D
	PACK_COMPRESSED_BLOCK_SIZE					int32	= 0x912E
	NUM_SAMPLE_COUNTS						int32	= 0x9380
	MIN_MAP_BUFFER_ALIGNMENT					int32	= 0x90BC
	ATOMIC_COUNTER_BUFFER						int32	= 0x92C0
	ATOMIC_COUNTER_BUFFER_BINDING					int32	= 0x92C1
	ATOMIC_COUNTER_BUFFER_START					int32	= 0x92C2
	ATOMIC_COUNTER_BUFFER_SIZE					int32	= 0x92C3
	ATOMIC_COUNTER_BUFFER_DATA_SIZE					int32	= 0x92C4
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS			int32	= 0x92C5
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES		int32	= 0x92C6
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER		int32	= 0x92C7
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER		int32	= 0x92C8
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER	int32	= 0x92C9
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER		int32	= 0x92CA
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER		int32	= 0x92CB
	MAX_VERTEX_ATOMIC_COUNTER_BUFFERS				int32	= 0x92CC
	MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS				int32	= 0x92CD
	MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS			int32	= 0x92CE
	MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS				int32	= 0x92CF
	MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS				int32	= 0x92D0
	MAX_COMBINED_ATOMIC_COUNTER_BUFFERS				int32	= 0x92D1
	MAX_VERTEX_ATOMIC_COUNTERS					int32	= 0x92D2
	MAX_TESS_CONTROL_ATOMIC_COUNTERS				int32	= 0x92D3
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS				int32	= 0x92D4
	MAX_GEOMETRY_ATOMIC_COUNTERS					int32	= 0x92D5
	MAX_FRAGMENT_ATOMIC_COUNTERS					int32	= 0x92D6
	MAX_COMBINED_ATOMIC_COUNTERS					int32	= 0x92D7
	MAX_ATOMIC_COUNTER_BUFFER_SIZE					int32	= 0x92D8
	MAX_ATOMIC_COUNTER_BUFFER_BINDINGS				int32	= 0x92DC
	ACTIVE_ATOMIC_COUNTER_BUFFERS					int32	= 0x92D9
	UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX				int32	= 0x92DA
	UNSIGNED_INT_ATOMIC_COUNTER					int32	= 0x92DB
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT					int32	= 0x00000001
	ELEMENT_ARRAY_BARRIER_BIT					int32	= 0x00000002
	UNIFORM_BARRIER_BIT						int32	= 0x00000004
	TEXTURE_FETCH_BARRIER_BIT					int32	= 0x00000008
	SHADER_IMAGE_ACCESS_BARRIER_BIT					int32	= 0x00000020
	COMMAND_BARRIER_BIT						int32	= 0x00000040
	PIXEL_BUFFER_BARRIER_BIT					int32	= 0x00000080
	TEXTURE_UPDATE_BARRIER_BIT					int32	= 0x00000100
	BUFFER_UPDATE_BARRIER_BIT					int32	= 0x00000200
	FRAMEBUFFER_BARRIER_BIT						int32	= 0x00000400
	TRANSFORM_FEEDBACK_BARRIER_BIT					int32	= 0x00000800
	ATOMIC_COUNTER_BARRIER_BIT					int32	= 0x00001000
	ALL_BARRIER_BITS						uint64	= 0xFFFFFFFF
	MAX_IMAGE_UNITS							int32	= 0x8F38
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS			int32	= 0x8F39
	IMAGE_BINDING_NAME						int32	= 0x8F3A
	IMAGE_BINDING_LEVEL						int32	= 0x8F3B
	IMAGE_BINDING_LAYERED						int32	= 0x8F3C
	IMAGE_BINDING_LAYER						int32	= 0x8F3D
	IMAGE_BINDING_ACCESS						int32	= 0x8F3E
	IMAGE_1D							int32	= 0x904C
	IMAGE_2D							int32	= 0x904D
	IMAGE_3D							int32	= 0x904E
	IMAGE_2D_RECT							int32	= 0x904F
	IMAGE_CUBE							int32	= 0x9050
	IMAGE_BUFFER							int32	= 0x9051
	IMAGE_1D_ARRAY							int32	= 0x9052
	IMAGE_2D_ARRAY							int32	= 0x9053
	IMAGE_CUBE_MAP_ARRAY						int32	= 0x9054
	IMAGE_2D_MULTISAMPLE						int32	= 0x9055
	IMAGE_2D_MULTISAMPLE_ARRAY					int32	= 0x9056
	INT_IMAGE_1D							int32	= 0x9057
	INT_IMAGE_2D							int32	= 0x9058
	INT_IMAGE_3D							int32	= 0x9059
	INT_IMAGE_2D_RECT						int32	= 0x905A
	INT_IMAGE_CUBE							int32	= 0x905B
	INT_IMAGE_BUFFER						int32	= 0x905C
	INT_IMAGE_1D_ARRAY						int32	= 0x905D
	INT_IMAGE_2D_ARRAY						int32	= 0x905E
	INT_IMAGE_CUBE_MAP_ARRAY					int32	= 0x905F
	INT_IMAGE_2D_MULTISAMPLE					int32	= 0x9060
	INT_IMAGE_2D_MULTISAMPLE_ARRAY					int32	= 0x9061
	UNSIGNED_INT_IMAGE_1D						int32	= 0x9062
	UNSIGNED_INT_IMAGE_2D						int32	= 0x9063
	UNSIGNED_INT_IMAGE_3D						int32	= 0x9064
	UNSIGNED_INT_IMAGE_2D_RECT					int32	= 0x9065
	UNSIGNED_INT_IMAGE_CUBE						int32	= 0x9066
	UNSIGNED_INT_IMAGE_BUFFER					int32	= 0x9067
	UNSIGNED_INT_IMAGE_1D_ARRAY					int32	= 0x9068
	UNSIGNED_INT_IMAGE_2D_ARRAY					int32	= 0x9069
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY				int32	= 0x906A
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE				int32	= 0x906B
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY				int32	= 0x906C
	MAX_IMAGE_SAMPLES						int32	= 0x906D
	IMAGE_BINDING_FORMAT						int32	= 0x906E
	IMAGE_FORMAT_COMPATIBILITY_TYPE					int32	= 0x90C7
	IMAGE_FORMAT_COMPATIBILITY_BY_SIZE				int32	= 0x90C8
	IMAGE_FORMAT_COMPATIBILITY_BY_CLASS				int32	= 0x90C9
	MAX_VERTEX_IMAGE_UNIFORMS					int32	= 0x90CA
	MAX_TESS_CONTROL_IMAGE_UNIFORMS					int32	= 0x90CB
	MAX_TESS_EVALUATION_IMAGE_UNIFORMS				int32	= 0x90CC
	MAX_GEOMETRY_IMAGE_UNIFORMS					int32	= 0x90CD
	MAX_FRAGMENT_IMAGE_UNIFORMS					int32	= 0x90CE
	MAX_COMBINED_IMAGE_UNIFORMS					int32	= 0x90CF
	COMPRESSED_RGBA_BPTC_UNORM					int32	= 0x8E8C
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM				int32	= 0x8E8D
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT				int32	= 0x8E8E
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT				int32	= 0x8E8F
	TEXTURE_IMMUTABLE_FORMAT					int32	= 0x912F
	NUM_SHADING_LANGUAGE_VERSIONS					int32	= 0x82E9
	VERTEX_ATTRIB_ARRAY_LONG					int32	= 0x874E
	COMPRESSED_RGB8_ETC2						int32	= 0x9274
	COMPRESSED_SRGB8_ETC2						int32	= 0x9275
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2			int32	= 0x9276
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2			int32	= 0x9277
	COMPRESSED_RGBA8_ETC2_EAC					int32	= 0x9278
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC				int32	= 0x9279
	COMPRESSED_R11_EAC						int32	= 0x9270
	COMPRESSED_SIGNED_R11_EAC					int32	= 0x9271
	COMPRESSED_RG11_EAC						int32	= 0x9272
	COMPRESSED_SIGNED_RG11_EAC					int32	= 0x9273
	PRIMITIVE_RESTART_FIXED_INDEX					int32	= 0x8D69
	ANY_SAMPLES_PASSED_CONSERVATIVE					int32	= 0x8D6A
	MAX_ELEMENT_INDEX						int32	= 0x8D6B
	COMPUTE_SHADER							int32	= 0x91B9
	MAX_COMPUTE_UNIFORM_BLOCKS					int32	= 0x91BB
	MAX_COMPUTE_TEXTURE_IMAGE_UNITS					int32	= 0x91BC
	MAX_COMPUTE_IMAGE_UNIFORMS					int32	= 0x91BD
	MAX_COMPUTE_SHARED_MEMORY_SIZE					int32	= 0x8262
	MAX_COMPUTE_UNIFORM_COMPONENTS					int32	= 0x8263
	MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS				int32	= 0x8264
	MAX_COMPUTE_ATOMIC_COUNTERS					int32	= 0x8265
	MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS				int32	= 0x8266
	MAX_COMPUTE_WORK_GROUP_INVOCATIONS				int32	= 0x90EB
	MAX_COMPUTE_WORK_GROUP_COUNT					int32	= 0x91BE
	MAX_COMPUTE_WORK_GROUP_SIZE					int32	= 0x91BF
	COMPUTE_WORK_GROUP_SIZE						int32	= 0x8267
	UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER			int32	= 0x90EC
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER		int32	= 0x90ED
	DISPATCH_INDIRECT_BUFFER					int32	= 0x90EE
	DISPATCH_INDIRECT_BUFFER_BINDING				int32	= 0x90EF
	DEBUG_OUTPUT_SYNCHRONOUS					int32	= 0x8242
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH				int32	= 0x8243
	DEBUG_CALLBACK_FUNCTION						int32	= 0x8244
	DEBUG_CALLBACK_USER_PARAM					int32	= 0x8245
	DEBUG_SOURCE_API						int32	= 0x8246
	DEBUG_SOURCE_WINDOW_SYSTEM					int32	= 0x8247
	DEBUG_SOURCE_SHADER_COMPILER					int32	= 0x8248
	DEBUG_SOURCE_THIRD_PARTY					int32	= 0x8249
	DEBUG_SOURCE_APPLICATION					int32	= 0x824A
	DEBUG_SOURCE_OTHER						int32	= 0x824B
	DEBUG_TYPE_ERROR						int32	= 0x824C
	DEBUG_TYPE_DEPRECATED_BEHAVIOR					int32	= 0x824D
	DEBUG_TYPE_UNDEFINED_BEHAVIOR					int32	= 0x824E
	DEBUG_TYPE_PORTABILITY						int32	= 0x824F
	DEBUG_TYPE_PERFORMANCE						int32	= 0x8250
	DEBUG_TYPE_OTHER						int32	= 0x8251
	MAX_DEBUG_MESSAGE_LENGTH					int32	= 0x9143
	MAX_DEBUG_LOGGED_MESSAGES					int32	= 0x9144
	DEBUG_LOGGED_MESSAGES						int32	= 0x9145
	DEBUG_SEVERITY_HIGH						int32	= 0x9146
	DEBUG_SEVERITY_MEDIUM						int32	= 0x9147
	DEBUG_SEVERITY_LOW						int32	= 0x9148
	DEBUG_TYPE_MARKER						int32	= 0x8268
	DEBUG_TYPE_PUSH_GROUP						int32	= 0x8269
	DEBUG_TYPE_POP_GROUP						int32	= 0x826A
	DEBUG_SEVERITY_NOTIFICATION					int32	= 0x826B
	MAX_DEBUG_GROUP_STACK_DEPTH					int32	= 0x826C
	DEBUG_GROUP_STACK_DEPTH						int32	= 0x826D
	BUFFER								int32	= 0x82E0
	SHADER								int32	= 0x82E1
	PROGRAM								int32	= 0x82E2
	QUERY								int32	= 0x82E3
	PROGRAM_PIPELINE						int32	= 0x82E4
	SAMPLER								int32	= 0x82E6
	MAX_LABEL_LENGTH						int32	= 0x82E8
	DEBUG_OUTPUT							int32	= 0x92E0
	CONTEXT_FLAG_DEBUG_BIT						int32	= 0x00000002
	MAX_UNIFORM_LOCATIONS						int32	= 0x826E
	FRAMEBUFFER_DEFAULT_WIDTH					int32	= 0x9310
	FRAMEBUFFER_DEFAULT_HEIGHT					int32	= 0x9311
	FRAMEBUFFER_DEFAULT_LAYERS					int32	= 0x9312
	FRAMEBUFFER_DEFAULT_SAMPLES					int32	= 0x9313
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS			int32	= 0x9314
	MAX_FRAMEBUFFER_WIDTH						int32	= 0x9315
	MAX_FRAMEBUFFER_HEIGHT						int32	= 0x9316
	MAX_FRAMEBUFFER_LAYERS						int32	= 0x9317
	MAX_FRAMEBUFFER_SAMPLES						int32	= 0x9318
	INTERNALFORMAT_SUPPORTED					int32	= 0x826F
	INTERNALFORMAT_PREFERRED					int32	= 0x8270
	INTERNALFORMAT_RED_SIZE						int32	= 0x8271
	INTERNALFORMAT_GREEN_SIZE					int32	= 0x8272
	INTERNALFORMAT_BLUE_SIZE					int32	= 0x8273
	INTERNALFORMAT_ALPHA_SIZE					int32	= 0x8274
	INTERNALFORMAT_DEPTH_SIZE					int32	= 0x8275
	INTERNALFORMAT_STENCIL_SIZE					int32	= 0x8276
	INTERNALFORMAT_SHARED_SIZE					int32	= 0x8277
	INTERNALFORMAT_RED_TYPE						int32	= 0x8278
	INTERNALFORMAT_GREEN_TYPE					int32	= 0x8279
	INTERNALFORMAT_BLUE_TYPE					int32	= 0x827A
	INTERNALFORMAT_ALPHA_TYPE					int32	= 0x827B
	INTERNALFORMAT_DEPTH_TYPE					int32	= 0x827C
	INTERNALFORMAT_STENCIL_TYPE					int32	= 0x827D
	MAX_WIDTH							int32	= 0x827E
	MAX_HEIGHT							int32	= 0x827F
	MAX_DEPTH							int32	= 0x8280
	MAX_LAYERS							int32	= 0x8281
	MAX_COMBINED_DIMENSIONS						int32	= 0x8282
	COLOR_COMPONENTS						int32	= 0x8283
	DEPTH_COMPONENTS						int32	= 0x8284
	STENCIL_COMPONENTS						int32	= 0x8285
	COLOR_RENDERABLE						int32	= 0x8286
	DEPTH_RENDERABLE						int32	= 0x8287
	STENCIL_RENDERABLE						int32	= 0x8288
	FRAMEBUFFER_RENDERABLE						int32	= 0x8289
	FRAMEBUFFER_RENDERABLE_LAYERED					int32	= 0x828A
	FRAMEBUFFER_BLEND						int32	= 0x828B
	READ_PIXELS							int32	= 0x828C
	READ_PIXELS_FORMAT						int32	= 0x828D
	READ_PIXELS_TYPE						int32	= 0x828E
	TEXTURE_IMAGE_FORMAT						int32	= 0x828F
	TEXTURE_IMAGE_TYPE						int32	= 0x8290
	GET_TEXTURE_IMAGE_FORMAT					int32	= 0x8291
	GET_TEXTURE_IMAGE_TYPE						int32	= 0x8292
	MIPMAP								int32	= 0x8293
	MANUAL_GENERATE_MIPMAP						int32	= 0x8294
	AUTO_GENERATE_MIPMAP						int32	= 0x8295
	COLOR_ENCODING							int32	= 0x8296
	SRGB_READ							int32	= 0x8297
	SRGB_WRITE							int32	= 0x8298
	FILTER								int32	= 0x829A
	VERTEX_TEXTURE							int32	= 0x829B
	TESS_CONTROL_TEXTURE						int32	= 0x829C
	TESS_EVALUATION_TEXTURE						int32	= 0x829D
	GEOMETRY_TEXTURE						int32	= 0x829E
	FRAGMENT_TEXTURE						int32	= 0x829F
	COMPUTE_TEXTURE							int32	= 0x82A0
	TEXTURE_SHADOW							int32	= 0x82A1
	TEXTURE_GATHER							int32	= 0x82A2
	TEXTURE_GATHER_SHADOW						int32	= 0x82A3
	SHADER_IMAGE_LOAD						int32	= 0x82A4
	SHADER_IMAGE_STORE						int32	= 0x82A5
	SHADER_IMAGE_ATOMIC						int32	= 0x82A6
	IMAGE_TEXEL_SIZE						int32	= 0x82A7
	IMAGE_COMPATIBILITY_CLASS					int32	= 0x82A8
	IMAGE_PIXEL_FORMAT						int32	= 0x82A9
	IMAGE_PIXEL_TYPE						int32	= 0x82AA
	SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST				int32	= 0x82AC
	SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST				int32	= 0x82AD
	SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE				int32	= 0x82AE
	SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE				int32	= 0x82AF
	TEXTURE_COMPRESSED_BLOCK_WIDTH					int32	= 0x82B1
	TEXTURE_COMPRESSED_BLOCK_HEIGHT					int32	= 0x82B2
	TEXTURE_COMPRESSED_BLOCK_SIZE					int32	= 0x82B3
	CLEAR_BUFFER							int32	= 0x82B4
	TEXTURE_VIEW							int32	= 0x82B5
	VIEW_COMPATIBILITY_CLASS					int32	= 0x82B6
	FULL_SUPPORT							int32	= 0x82B7
	CAVEAT_SUPPORT							int32	= 0x82B8
	IMAGE_CLASS_4_X_32						int32	= 0x82B9
	IMAGE_CLASS_2_X_32						int32	= 0x82BA
	IMAGE_CLASS_1_X_32						int32	= 0x82BB
	IMAGE_CLASS_4_X_16						int32	= 0x82BC
	IMAGE_CLASS_2_X_16						int32	= 0x82BD
	IMAGE_CLASS_1_X_16						int32	= 0x82BE
	IMAGE_CLASS_4_X_8						int32	= 0x82BF
	IMAGE_CLASS_2_X_8						int32	= 0x82C0
	IMAGE_CLASS_1_X_8						int32	= 0x82C1
	IMAGE_CLASS_11_11_10						int32	= 0x82C2
	IMAGE_CLASS_10_10_10_2						int32	= 0x82C3
	VIEW_CLASS_128_BITS						int32	= 0x82C4
	VIEW_CLASS_96_BITS						int32	= 0x82C5
	VIEW_CLASS_64_BITS						int32	= 0x82C6
	VIEW_CLASS_48_BITS						int32	= 0x82C7
	VIEW_CLASS_32_BITS						int32	= 0x82C8
	VIEW_CLASS_24_BITS						int32	= 0x82C9
	VIEW_CLASS_16_BITS						int32	= 0x82CA
	VIEW_CLASS_8_BITS						int32	= 0x82CB
	VIEW_CLASS_S3TC_DXT1_RGB					int32	= 0x82CC
	VIEW_CLASS_S3TC_DXT1_RGBA					int32	= 0x82CD
	VIEW_CLASS_S3TC_DXT3_RGBA					int32	= 0x82CE
	VIEW_CLASS_S3TC_DXT5_RGBA					int32	= 0x82CF
	VIEW_CLASS_RGTC1_RED						int32	= 0x82D0
	VIEW_CLASS_RGTC2_RG						int32	= 0x82D1
	VIEW_CLASS_BPTC_UNORM						int32	= 0x82D2
	VIEW_CLASS_BPTC_FLOAT						int32	= 0x82D3
	UNIFORM								int32	= 0x92E1
	UNIFORM_BLOCK							int32	= 0x92E2
	PROGRAM_INPUT							int32	= 0x92E3
	PROGRAM_OUTPUT							int32	= 0x92E4
	BUFFER_VARIABLE							int32	= 0x92E5
	SHADER_STORAGE_BLOCK						int32	= 0x92E6
	VERTEX_SUBROUTINE						int32	= 0x92E8
	TESS_CONTROL_SUBROUTINE						int32	= 0x92E9
	TESS_EVALUATION_SUBROUTINE					int32	= 0x92EA
	GEOMETRY_SUBROUTINE						int32	= 0x92EB
	FRAGMENT_SUBROUTINE						int32	= 0x92EC
	COMPUTE_SUBROUTINE						int32	= 0x92ED
	VERTEX_SUBROUTINE_UNIFORM					int32	= 0x92EE
	TESS_CONTROL_SUBROUTINE_UNIFORM					int32	= 0x92EF
	TESS_EVALUATION_SUBROUTINE_UNIFORM				int32	= 0x92F0
	GEOMETRY_SUBROUTINE_UNIFORM					int32	= 0x92F1
	FRAGMENT_SUBROUTINE_UNIFORM					int32	= 0x92F2
	COMPUTE_SUBROUTINE_UNIFORM					int32	= 0x92F3
	TRANSFORM_FEEDBACK_VARYING					int32	= 0x92F4
	ACTIVE_RESOURCES						int32	= 0x92F5
	MAX_NAME_LENGTH							int32	= 0x92F6
	MAX_NUM_ACTIVE_VARIABLES					int32	= 0x92F7
	MAX_NUM_COMPATIBLE_SUBROUTINES					int32	= 0x92F8
	NAME_LENGTH							int32	= 0x92F9
	TYPE								int32	= 0x92FA
	ARRAY_SIZE							int32	= 0x92FB
	OFFSET								int32	= 0x92FC
	BLOCK_INDEX							int32	= 0x92FD
	ARRAY_STRIDE							int32	= 0x92FE
	MATRIX_STRIDE							int32	= 0x92FF
	IS_ROW_MAJOR							int32	= 0x9300
	ATOMIC_COUNTER_BUFFER_INDEX					int32	= 0x9301
	BUFFER_BINDING							int32	= 0x9302
	BUFFER_DATA_SIZE						int32	= 0x9303
	NUM_ACTIVE_VARIABLES						int32	= 0x9304
	ACTIVE_VARIABLES						int32	= 0x9305
	REFERENCED_BY_VERTEX_SHADER					int32	= 0x9306
	REFERENCED_BY_TESS_CONTROL_SHADER				int32	= 0x9307
	REFERENCED_BY_TESS_EVALUATION_SHADER				int32	= 0x9308
	REFERENCED_BY_GEOMETRY_SHADER					int32	= 0x9309
	REFERENCED_BY_FRAGMENT_SHADER					int32	= 0x930A
	REFERENCED_BY_COMPUTE_SHADER					int32	= 0x930B
	TOP_LEVEL_ARRAY_SIZE						int32	= 0x930C
	TOP_LEVEL_ARRAY_STRIDE						int32	= 0x930D
	LOCATION							int32	= 0x930E
	LOCATION_INDEX							int32	= 0x930F
	IS_PER_PATCH							int32	= 0x92E7
	SHADER_STORAGE_BUFFER						int32	= 0x90D2
	SHADER_STORAGE_BUFFER_BINDING					int32	= 0x90D3
	SHADER_STORAGE_BUFFER_START					int32	= 0x90D4
	SHADER_STORAGE_BUFFER_SIZE					int32	= 0x90D5
	MAX_VERTEX_SHADER_STORAGE_BLOCKS				int32	= 0x90D6
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS				int32	= 0x90D7
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS				int32	= 0x90D8
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS			int32	= 0x90D9
	MAX_FRAGMENT_SHADER_STORAGE_BLOCKS				int32	= 0x90DA
	MAX_COMPUTE_SHADER_STORAGE_BLOCKS				int32	= 0x90DB
	MAX_COMBINED_SHADER_STORAGE_BLOCKS				int32	= 0x90DC
	MAX_SHADER_STORAGE_BUFFER_BINDINGS				int32	= 0x90DD
	MAX_SHADER_STORAGE_BLOCK_SIZE					int32	= 0x90DE
	SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT				int32	= 0x90DF
	SHADER_STORAGE_BARRIER_BIT					int32	= 0x00002000
	MAX_COMBINED_SHADER_OUTPUT_RESOURCES				int32	= 0x8F39
	DEPTH_STENCIL_TEXTURE_MODE					int32	= 0x90EA
	TEXTURE_BUFFER_OFFSET						int32	= 0x919D
	TEXTURE_BUFFER_SIZE						int32	= 0x919E
	TEXTURE_BUFFER_OFFSET_ALIGNMENT					int32	= 0x919F
	TEXTURE_VIEW_MIN_LEVEL						int32	= 0x82DB
	TEXTURE_VIEW_NUM_LEVELS						int32	= 0x82DC
	TEXTURE_VIEW_MIN_LAYER						int32	= 0x82DD
	TEXTURE_VIEW_NUM_LAYERS						int32	= 0x82DE
	TEXTURE_IMMUTABLE_LEVELS					int32	= 0x82DF
	VERTEX_ATTRIB_BINDING						int32	= 0x82D4
	VERTEX_ATTRIB_RELATIVE_OFFSET					int32	= 0x82D5
	VERTEX_BINDING_DIVISOR						int32	= 0x82D6
	VERTEX_BINDING_OFFSET						int32	= 0x82D7
	VERTEX_BINDING_STRIDE						int32	= 0x82D8
	MAX_VERTEX_ATTRIB_RELATIVE_OFFSET				int32	= 0x82D9
	MAX_VERTEX_ATTRIB_BINDINGS					int32	= 0x82DA
	VERTEX_BINDING_BUFFER						int32	= 0x8F4F
	DISPLAY_LIST							int32	= 0x82E7
	MAX_VERTEX_ATTRIB_STRIDE					int32	= 0x82E5
	PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED				int32	= 0x8221
	TEXTURE_BUFFER_BINDING						int32	= 0x8C2A
	MAP_PERSISTENT_BIT						int32	= 0x0040
	MAP_COHERENT_BIT						int32	= 0x0080
	DYNAMIC_STORAGE_BIT						int32	= 0x0100
	CLIENT_STORAGE_BIT						int32	= 0x0200
	CLIENT_MAPPED_BUFFER_BARRIER_BIT				int32	= 0x00004000
	BUFFER_IMMUTABLE_STORAGE					int32	= 0x821F
	BUFFER_STORAGE_FLAGS						int32	= 0x8220
	CLEAR_TEXTURE							int32	= 0x9365
	LOCATION_COMPONENT						int32	= 0x934A
	TRANSFORM_FEEDBACK_BUFFER_INDEX					int32	= 0x934B
	TRANSFORM_FEEDBACK_BUFFER_STRIDE				int32	= 0x934C
	QUERY_BUFFER							int32	= 0x9192
	QUERY_BUFFER_BARRIER_BIT					int32	= 0x00008000
	QUERY_BUFFER_BINDING						int32	= 0x9193
	QUERY_RESULT_NO_WAIT						int32	= 0x9194
	MIRROR_CLAMP_TO_EDGE						int32	= 0x8743
)</pre>
		<p></p>
	
</span>









	<h1 id="Bool" class="hdr pkg hdr-function"><a href="#Bool" title="permalink">»</a>&nbsp;func Bool(v uint8) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Bool(v uint8) bool</pre>
		<p>
Bool converts from a OpenGL uint8 boolean to a Go bool.
</p>

	</span>

	<h1 id="ByteString" class="hdr pkg hdr-function"><a href="#ByteString" title="permalink">»</a>&nbsp;func ByteString(v *byte) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func ByteString(v *byte) string</pre>
		<p>
ByteString converts from a OpenGL *byte string to a Go string.
</p>

	</span>

	<h1 id="GLBool" class="hdr pkg hdr-function"><a href="#GLBool" title="permalink">»</a>&nbsp;func GLBool(v bool) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GLBool(v bool) uint8</pre>
		<p>
GLBool converts from a Go bool to a OpenGL uint8 boolean.
</p>

	</span>

	<h1 id="String" class="hdr pkg hdr-function"><a href="#String" title="permalink">»</a>&nbsp;func String(v *uint8) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func String(v *uint8) string</pre>
		<p>
String converts from a OpenGL *uint8 string to a Go string.
</p>

	</span>





	
	<h1 id="Context" class="hdr pkg hdr-type"><a href="#Context" title="permalink">»</a>&nbsp;type Context <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Context struct {
	// contains filtered or unexported fields
}</pre>
		<p>
Context represents a single OpenGL context&#39;s API access.
</p>
<p>
Since CGO (Go to C) calls are expensive in large quantities as they require
a context switch due to Go&#39;s and C&#39;s incompatibile ABI, and since even
modern OpenGL applications can make several hundred thousands of calls per
frame, it can become a large bottleneck.
</p>
<p>
To help remedy this specific bottleneck, batching can be used. When OpenGL
calls are made and batching is turned on, instead of calls being executed
immedietly they are stored in a queue and executed later upon a single call
to the Execute() method.
</p>
<p>
When batching is turned off and OpenGL calls are made, they are executed
immedietly, the Execute() method is no-op, and large amounts of OpenGL calls
will suffer from the performance degration described above.
</p>
<p>
Additionally, batching may be turned on or off at runtime (even in-between
OpenGL calls) using the SetBatching() method at runtime.
</p>
<p>
Note that since batched OpenGL calls are only truly made upon invocation of
the Execute() method, the memory for pointer arguments to OpenGL function
calls must remain valid at least untill Execute() is called or else memory
corruption is possible.
</p>
<p>
Also note that OpenGL functions which return anything, such as the GetString
function, cannot be queued for batching because they require that the value
be immedietly returned. Also, if the function in question relies on previous
OpenGL commands being executed first, you are responsible for calling the
Execute() method.
</p>
<p>
Since batching requires some extra effort on the programmer&#39;s side, and
since debugging applications with batching turned on is more difficult, it
is by default turned off.
</p>

	</span>

	
	
		<h1 id="New" class="hdr pkg hdr-function"><a href="#New" title="permalink">»</a>&nbsp;func New() *Context <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func New() *Context</pre>
			<p>
New returns a new initialized Context with batching turned on.
</p>

		</span>
	

	
	
		
		<h1 id="Context.Accum" class="hdr pkg hdr-method"><a href="#Context.Accum" title="permalink">»</a>&nbsp;func (c *Context) Accum(op int32, value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Accum(op int32, value float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ActiveShaderProgram" class="hdr pkg hdr-method"><a href="#Context.ActiveShaderProgram" title="permalink">»</a>&nbsp;func (c *Context) ActiveShaderProgram(pipeline uint32, program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ActiveShaderProgram(pipeline uint32, program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ActiveTexture" class="hdr pkg hdr-method"><a href="#Context.ActiveTexture" title="permalink">»</a>&nbsp;func (c *Context) ActiveTexture(texture int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ActiveTexture(texture int32)</pre>
			
		</span>
	
		
		<h1 id="Context.AlphaFunc" class="hdr pkg hdr-method"><a href="#Context.AlphaFunc" title="permalink">»</a>&nbsp;func (c *Context) AlphaFunc(pFunc int32, ref float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AlphaFunc(pFunc int32, ref float32)</pre>
			
		</span>
	
		
		<h1 id="Context.AreTexturesResident" class="hdr pkg hdr-method"><a href="#Context.AreTexturesResident" title="permalink">»</a>&nbsp;func (c *Context) AreTexturesResident(n uint32, textures *uint32, residences *uint8) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AreTexturesResident(n uint32, textures *uint32, residences *uint8) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.ArrayElement" class="hdr pkg hdr-method"><a href="#Context.ArrayElement" title="permalink">»</a>&nbsp;func (c *Context) ArrayElement(i int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ArrayElement(i int32)</pre>
			
		</span>
	
		
		<h1 id="Context.AtLeastRelease" class="hdr pkg hdr-method"><a href="#Context.AtLeastRelease" title="permalink">»</a>&nbsp;func (c *Context) AtLeastRelease(minRelease int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastRelease(minRelease int) bool</pre>
			<p>
AtLeastRelease tells if the release OpenGL version reported by c.Version()
is at least minRelease.
</p>
<p>
It is implemented as:
</p>
<pre>if release == 0 {
    return true
} else if release &gt;= minRelease {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AtLeastShaderRelease" class="hdr pkg hdr-method"><a href="#Context.AtLeastShaderRelease" title="permalink">»</a>&nbsp;func (c *Context) AtLeastShaderRelease(minRelease int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastShaderRelease(minRelease int) bool</pre>
			<p>
AtLeastShaderRelease tells if the release GLSL version reported by
c.ShaderVersion() is at least minRelease.
</p>
<p>
It is implemented as:
</p>
<pre>if release == 0 {
    return true
} else if release &gt;= minRelease {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AtLeastShaderVersion" class="hdr pkg hdr-method"><a href="#Context.AtLeastShaderVersion" title="permalink">»</a>&nbsp;func (c *Context) AtLeastShaderVersion(minMajor, minMinor int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastShaderVersion(minMajor, minMinor int) bool</pre>
			<p>
AtLeastShaderVersion tells if the major and minor GLSL version reported by
c.ShaderVersion() is at least minMajor, minMinor.
</p>
<p>
It is implemented as:
</p>
<pre>if major &gt; minMajor {
    return true
} else if major == minMajor &amp;&amp; minor &gt;= minMinor {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AtLeastVersion" class="hdr pkg hdr-method"><a href="#Context.AtLeastVersion" title="permalink">»</a>&nbsp;func (c *Context) AtLeastVersion(minMajor, minMinor int) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AtLeastVersion(minMajor, minMinor int) bool</pre>
			<p>
AtLeastVersion tells if the major and minor OpenGL version reported by
c.Version() is at least minMajor, minMinor.
</p>
<p>
It is implemented as:
</p>
<pre>if major &gt; minMajor {
    return true
} else if major == minMajor &amp;&amp; minor &gt;= minMinor {
    return true
}
return false
</pre>

		</span>
	
		
		<h1 id="Context.AttachShader" class="hdr pkg hdr-method"><a href="#Context.AttachShader" title="permalink">»</a>&nbsp;func (c *Context) AttachShader(program uint32, shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) AttachShader(program uint32, shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Batching" class="hdr pkg hdr-method"><a href="#Context.Batching" title="permalink">»</a>&nbsp;func (c *Context) Batching() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Batching() bool</pre>
			<p>
Batching tells whether or not batching is on or off for this Context.
</p>

		</span>
	
		
		<h1 id="Context.Begin" class="hdr pkg hdr-method"><a href="#Context.Begin" title="permalink">»</a>&nbsp;func (c *Context) Begin(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Begin(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BeginConditionalRender" class="hdr pkg hdr-method"><a href="#Context.BeginConditionalRender" title="permalink">»</a>&nbsp;func (c *Context) BeginConditionalRender(id uint32, mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BeginConditionalRender(id uint32, mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BeginQuery" class="hdr pkg hdr-method"><a href="#Context.BeginQuery" title="permalink">»</a>&nbsp;func (c *Context) BeginQuery(target int32, id uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BeginQuery(target int32, id uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BeginQueryIndexed" class="hdr pkg hdr-method"><a href="#Context.BeginQueryIndexed" title="permalink">»</a>&nbsp;func (c *Context) BeginQueryIndexed(target int32, index uint32, id uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BeginQueryIndexed(target int32, index uint32, id uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BeginTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.BeginTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) BeginTransformFeedback(primitiveMode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BeginTransformFeedback(primitiveMode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindAttribLocation" class="hdr pkg hdr-method"><a href="#Context.BindAttribLocation" title="permalink">»</a>&nbsp;func (c *Context) BindAttribLocation(program uint32, index uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindAttribLocation(program uint32, index uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBuffer" class="hdr pkg hdr-method"><a href="#Context.BindBuffer" title="permalink">»</a>&nbsp;func (c *Context) BindBuffer(target int32, buffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBuffer(target int32, buffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBufferBase" class="hdr pkg hdr-method"><a href="#Context.BindBufferBase" title="permalink">»</a>&nbsp;func (c *Context) BindBufferBase(target int32, index uint32, buffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBufferBase(target int32, index uint32, buffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBufferRange" class="hdr pkg hdr-method"><a href="#Context.BindBufferRange" title="permalink">»</a>&nbsp;func (c *Context) BindBufferRange(target int32, index uint32, buffer uint32, offset uintptr, size uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBufferRange(target int32, index uint32, buffer uint32, offset uintptr, size uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBuffersBase" class="hdr pkg hdr-method"><a href="#Context.BindBuffersBase" title="permalink">»</a>&nbsp;func (c *Context) BindBuffersBase(target int32, first uint32, count uint32, buffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBuffersBase(target int32, first uint32, count uint32, buffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindBuffersRange" class="hdr pkg hdr-method"><a href="#Context.BindBuffersRange" title="permalink">»</a>&nbsp;func (c *Context) BindBuffersRange(target int32, first uint32, count uint32, buffers *uint32, offsets *uintptr, sizes *uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindBuffersRange(target int32, first uint32, count uint32, buffers *uint32, offsets *uintptr, sizes *uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.BindFragDataLocation" class="hdr pkg hdr-method"><a href="#Context.BindFragDataLocation" title="permalink">»</a>&nbsp;func (c *Context) BindFragDataLocation(program uint32, color uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindFragDataLocation(program uint32, color uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.BindFragDataLocationIndexed" class="hdr pkg hdr-method"><a href="#Context.BindFragDataLocationIndexed" title="permalink">»</a>&nbsp;func (c *Context) BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.BindFramebuffer" class="hdr pkg hdr-method"><a href="#Context.BindFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) BindFramebuffer(target int32, framebuffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindFramebuffer(target int32, framebuffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindImageTexture" class="hdr pkg hdr-method"><a href="#Context.BindImageTexture" title="permalink">»</a>&nbsp;func (c *Context) BindImageTexture(unit uint32, texture uint32, level int32, layered uint8, layer int32, access int32, format int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindImageTexture(unit uint32, texture uint32, level int32, layered uint8, layer int32, access int32, format int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindImageTextures" class="hdr pkg hdr-method"><a href="#Context.BindImageTextures" title="permalink">»</a>&nbsp;func (c *Context) BindImageTextures(first uint32, count uint32, textures *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindImageTextures(first uint32, count uint32, textures *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindProgramPipeline" class="hdr pkg hdr-method"><a href="#Context.BindProgramPipeline" title="permalink">»</a>&nbsp;func (c *Context) BindProgramPipeline(pipeline uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindProgramPipeline(pipeline uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindRenderbuffer" class="hdr pkg hdr-method"><a href="#Context.BindRenderbuffer" title="permalink">»</a>&nbsp;func (c *Context) BindRenderbuffer(target int32, renderbuffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindRenderbuffer(target int32, renderbuffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindSampler" class="hdr pkg hdr-method"><a href="#Context.BindSampler" title="permalink">»</a>&nbsp;func (c *Context) BindSampler(unit uint32, sampler uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindSampler(unit uint32, sampler uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindSamplers" class="hdr pkg hdr-method"><a href="#Context.BindSamplers" title="permalink">»</a>&nbsp;func (c *Context) BindSamplers(first uint32, count uint32, samplers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindSamplers(first uint32, count uint32, samplers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindTexture" class="hdr pkg hdr-method"><a href="#Context.BindTexture" title="permalink">»</a>&nbsp;func (c *Context) BindTexture(target int32, texture uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindTexture(target int32, texture uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindTextures" class="hdr pkg hdr-method"><a href="#Context.BindTextures" title="permalink">»</a>&nbsp;func (c *Context) BindTextures(first uint32, count uint32, textures *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindTextures(first uint32, count uint32, textures *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.BindTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) BindTransformFeedback(target int32, id uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindTransformFeedback(target int32, id uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindVertexArray" class="hdr pkg hdr-method"><a href="#Context.BindVertexArray" title="permalink">»</a>&nbsp;func (c *Context) BindVertexArray(array uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindVertexArray(array uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindVertexBuffer" class="hdr pkg hdr-method"><a href="#Context.BindVertexBuffer" title="permalink">»</a>&nbsp;func (c *Context) BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindVertexBuffer(bindingindex uint32, buffer uint32, offset uintptr, stride uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BindVertexBuffers" class="hdr pkg hdr-method"><a href="#Context.BindVertexBuffers" title="permalink">»</a>&nbsp;func (c *Context) BindVertexBuffers(first uint32, count uint32, buffers *uint32, offsets *uintptr, strides *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BindVertexBuffers(first uint32, count uint32, buffers *uint32, offsets *uintptr, strides *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Bitmap" class="hdr pkg hdr-method"><a href="#Context.Bitmap" title="permalink">»</a>&nbsp;func (c *Context) Bitmap(width uint32, height uint32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Bitmap(width uint32, height uint32, xorig float32, yorig float32, xmove float32, ymove float32, bitmap *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendColor" class="hdr pkg hdr-method"><a href="#Context.BlendColor" title="permalink">»</a>&nbsp;func (c *Context) BlendColor(red float32, green float32, blue float32, alpha float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendColor(red float32, green float32, blue float32, alpha float32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendEquation" class="hdr pkg hdr-method"><a href="#Context.BlendEquation" title="permalink">»</a>&nbsp;func (c *Context) BlendEquation(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendEquation(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendEquationSeparate" class="hdr pkg hdr-method"><a href="#Context.BlendEquationSeparate" title="permalink">»</a>&nbsp;func (c *Context) BlendEquationSeparate(modeRGB int32, modeAlpha int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendEquationSeparate(modeRGB int32, modeAlpha int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendEquationSeparatei" class="hdr pkg hdr-method"><a href="#Context.BlendEquationSeparatei" title="permalink">»</a>&nbsp;func (c *Context) BlendEquationSeparatei(buf uint32, modeRGB int32, modeAlpha int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendEquationSeparatei(buf uint32, modeRGB int32, modeAlpha int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendEquationi" class="hdr pkg hdr-method"><a href="#Context.BlendEquationi" title="permalink">»</a>&nbsp;func (c *Context) BlendEquationi(buf uint32, mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendEquationi(buf uint32, mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendFunc" class="hdr pkg hdr-method"><a href="#Context.BlendFunc" title="permalink">»</a>&nbsp;func (c *Context) BlendFunc(sfactor int32, dfactor int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendFunc(sfactor int32, dfactor int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendFuncSeparate" class="hdr pkg hdr-method"><a href="#Context.BlendFuncSeparate" title="permalink">»</a>&nbsp;func (c *Context) BlendFuncSeparate(sfactorRGB int32, dfactorRGB int32, sfactorAlpha int32, dfactorAlpha int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendFuncSeparate(sfactorRGB int32, dfactorRGB int32, sfactorAlpha int32, dfactorAlpha int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendFuncSeparatei" class="hdr pkg hdr-method"><a href="#Context.BlendFuncSeparatei" title="permalink">»</a>&nbsp;func (c *Context) BlendFuncSeparatei(buf uint32, srcRGB int32, dstRGB int32, srcAlpha int32, dstAlpha int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendFuncSeparatei(buf uint32, srcRGB int32, dstRGB int32, srcAlpha int32, dstAlpha int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlendFunci" class="hdr pkg hdr-method"><a href="#Context.BlendFunci" title="permalink">»</a>&nbsp;func (c *Context) BlendFunci(buf uint32, src int32, dst int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlendFunci(buf uint32, src int32, dst int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BlitFramebuffer" class="hdr pkg hdr-method"><a href="#Context.BlitFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BufferData" class="hdr pkg hdr-method"><a href="#Context.BufferData" title="permalink">»</a>&nbsp;func (c *Context) BufferData(target int32, size uintptr, data unsafe.Pointer, usage int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BufferData(target int32, size uintptr, data unsafe.Pointer, usage int32)</pre>
			
		</span>
	
		
		<h1 id="Context.BufferStorage" class="hdr pkg hdr-method"><a href="#Context.BufferStorage" title="permalink">»</a>&nbsp;func (c *Context) BufferStorage(target int32, size uintptr, data unsafe.Pointer, flags uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BufferStorage(target int32, size uintptr, data unsafe.Pointer, flags uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.BufferSubData" class="hdr pkg hdr-method"><a href="#Context.BufferSubData" title="permalink">»</a>&nbsp;func (c *Context) BufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) BufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CallList" class="hdr pkg hdr-method"><a href="#Context.CallList" title="permalink">»</a>&nbsp;func (c *Context) CallList(list uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CallList(list uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CallLists" class="hdr pkg hdr-method"><a href="#Context.CallLists" title="permalink">»</a>&nbsp;func (c *Context) CallLists(n uint32, pType int32, lists unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CallLists(n uint32, pType int32, lists unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CheckFramebufferStatus" class="hdr pkg hdr-method"><a href="#Context.CheckFramebufferStatus" title="permalink">»</a>&nbsp;func (c *Context) CheckFramebufferStatus(target int32) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CheckFramebufferStatus(target int32) int32</pre>
			
		</span>
	
		
		<h1 id="Context.ClampColor" class="hdr pkg hdr-method"><a href="#Context.ClampColor" title="permalink">»</a>&nbsp;func (c *Context) ClampColor(target int32, clamp int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClampColor(target int32, clamp int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Clear" class="hdr pkg hdr-method"><a href="#Context.Clear" title="permalink">»</a>&nbsp;func (c *Context) Clear(mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Clear(mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearAccum" class="hdr pkg hdr-method"><a href="#Context.ClearAccum" title="permalink">»</a>&nbsp;func (c *Context) ClearAccum(red float32, green float32, blue float32, alpha float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearAccum(red float32, green float32, blue float32, alpha float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferData" class="hdr pkg hdr-method"><a href="#Context.ClearBufferData" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferData(target int32, internalformat int32, format int32, pType int32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferData(target int32, internalformat int32, format int32, pType int32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferSubData" class="hdr pkg hdr-method"><a href="#Context.ClearBufferSubData" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferSubData(target int32, internalformat int32, offset uintptr, size uintptr, format int32, pType int32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferSubData(target int32, internalformat int32, offset uintptr, size uintptr, format int32, pType int32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferfi" class="hdr pkg hdr-method"><a href="#Context.ClearBufferfi" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferfi(buffer int32, drawbuffer int32, depth float32, stencil int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferfi(buffer int32, drawbuffer int32, depth float32, stencil int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferfv" class="hdr pkg hdr-method"><a href="#Context.ClearBufferfv" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferfv(buffer int32, drawbuffer int32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferfv(buffer int32, drawbuffer int32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferiv" class="hdr pkg hdr-method"><a href="#Context.ClearBufferiv" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferiv(buffer int32, drawbuffer int32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferiv(buffer int32, drawbuffer int32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearBufferuiv" class="hdr pkg hdr-method"><a href="#Context.ClearBufferuiv" title="permalink">»</a>&nbsp;func (c *Context) ClearBufferuiv(buffer int32, drawbuffer int32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearBufferuiv(buffer int32, drawbuffer int32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearColor" class="hdr pkg hdr-method"><a href="#Context.ClearColor" title="permalink">»</a>&nbsp;func (c *Context) ClearColor(red float32, green float32, blue float32, alpha float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearColor(red float32, green float32, blue float32, alpha float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearDepth" class="hdr pkg hdr-method"><a href="#Context.ClearDepth" title="permalink">»</a>&nbsp;func (c *Context) ClearDepth(depth float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearDepth(depth float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearDepthf" class="hdr pkg hdr-method"><a href="#Context.ClearDepthf" title="permalink">»</a>&nbsp;func (c *Context) ClearDepthf(d float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearDepthf(d float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearIndex" class="hdr pkg hdr-method"><a href="#Context.ClearIndex" title="permalink">»</a>&nbsp;func (c *Context) ClearIndex(pC float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearIndex(pC float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearStencil" class="hdr pkg hdr-method"><a href="#Context.ClearStencil" title="permalink">»</a>&nbsp;func (c *Context) ClearStencil(s int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearStencil(s int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearTexImage" class="hdr pkg hdr-method"><a href="#Context.ClearTexImage" title="permalink">»</a>&nbsp;func (c *Context) ClearTexImage(texture uint32, level int32, format int32, pType int32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearTexImage(texture uint32, level int32, format int32, pType int32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.ClearTexSubImage" class="hdr pkg hdr-method"><a href="#Context.ClearTexSubImage" title="permalink">»</a>&nbsp;func (c *Context) ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.ClientActiveTexture" class="hdr pkg hdr-method"><a href="#Context.ClientActiveTexture" title="permalink">»</a>&nbsp;func (c *Context) ClientActiveTexture(texture int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClientActiveTexture(texture int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ClientWaitSync" class="hdr pkg hdr-method"><a href="#Context.ClientWaitSync" title="permalink">»</a>&nbsp;func (c *Context) ClientWaitSync(sync Sync, flags uint32, timeout uint64) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClientWaitSync(sync Sync, flags uint32, timeout uint64) int32</pre>
			
		</span>
	
		
		<h1 id="Context.ClipPlane" class="hdr pkg hdr-method"><a href="#Context.ClipPlane" title="permalink">»</a>&nbsp;func (c *Context) ClipPlane(plane int32, equation *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ClipPlane(plane int32, equation *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3b" class="hdr pkg hdr-method"><a href="#Context.Color3b" title="permalink">»</a>&nbsp;func (c *Context) Color3b(red byte, green byte, blue byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3b(red byte, green byte, blue byte)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3bv" class="hdr pkg hdr-method"><a href="#Context.Color3bv" title="permalink">»</a>&nbsp;func (c *Context) Color3bv(v *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3bv(v *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3d" class="hdr pkg hdr-method"><a href="#Context.Color3d" title="permalink">»</a>&nbsp;func (c *Context) Color3d(red float64, green float64, blue float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3d(red float64, green float64, blue float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3dv" class="hdr pkg hdr-method"><a href="#Context.Color3dv" title="permalink">»</a>&nbsp;func (c *Context) Color3dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3f" class="hdr pkg hdr-method"><a href="#Context.Color3f" title="permalink">»</a>&nbsp;func (c *Context) Color3f(red float32, green float32, blue float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3f(red float32, green float32, blue float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3fv" class="hdr pkg hdr-method"><a href="#Context.Color3fv" title="permalink">»</a>&nbsp;func (c *Context) Color3fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3i" class="hdr pkg hdr-method"><a href="#Context.Color3i" title="permalink">»</a>&nbsp;func (c *Context) Color3i(red int32, green int32, blue int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3i(red int32, green int32, blue int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3iv" class="hdr pkg hdr-method"><a href="#Context.Color3iv" title="permalink">»</a>&nbsp;func (c *Context) Color3iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3s" class="hdr pkg hdr-method"><a href="#Context.Color3s" title="permalink">»</a>&nbsp;func (c *Context) Color3s(red int16, green int16, blue int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3s(red int16, green int16, blue int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3sv" class="hdr pkg hdr-method"><a href="#Context.Color3sv" title="permalink">»</a>&nbsp;func (c *Context) Color3sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3ub" class="hdr pkg hdr-method"><a href="#Context.Color3ub" title="permalink">»</a>&nbsp;func (c *Context) Color3ub(red uint8, green uint8, blue uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3ub(red uint8, green uint8, blue uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3ubv" class="hdr pkg hdr-method"><a href="#Context.Color3ubv" title="permalink">»</a>&nbsp;func (c *Context) Color3ubv(v *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3ubv(v *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3ui" class="hdr pkg hdr-method"><a href="#Context.Color3ui" title="permalink">»</a>&nbsp;func (c *Context) Color3ui(red uint32, green uint32, blue uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3ui(red uint32, green uint32, blue uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3uiv" class="hdr pkg hdr-method"><a href="#Context.Color3uiv" title="permalink">»</a>&nbsp;func (c *Context) Color3uiv(v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3uiv(v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3us" class="hdr pkg hdr-method"><a href="#Context.Color3us" title="permalink">»</a>&nbsp;func (c *Context) Color3us(red uint16, green uint16, blue uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3us(red uint16, green uint16, blue uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.Color3usv" class="hdr pkg hdr-method"><a href="#Context.Color3usv" title="permalink">»</a>&nbsp;func (c *Context) Color3usv(v *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color3usv(v *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4b" class="hdr pkg hdr-method"><a href="#Context.Color4b" title="permalink">»</a>&nbsp;func (c *Context) Color4b(red byte, green byte, blue byte, alpha byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4b(red byte, green byte, blue byte, alpha byte)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4bv" class="hdr pkg hdr-method"><a href="#Context.Color4bv" title="permalink">»</a>&nbsp;func (c *Context) Color4bv(v *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4bv(v *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4d" class="hdr pkg hdr-method"><a href="#Context.Color4d" title="permalink">»</a>&nbsp;func (c *Context) Color4d(red float64, green float64, blue float64, alpha float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4d(red float64, green float64, blue float64, alpha float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4dv" class="hdr pkg hdr-method"><a href="#Context.Color4dv" title="permalink">»</a>&nbsp;func (c *Context) Color4dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4f" class="hdr pkg hdr-method"><a href="#Context.Color4f" title="permalink">»</a>&nbsp;func (c *Context) Color4f(red float32, green float32, blue float32, alpha float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4f(red float32, green float32, blue float32, alpha float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4fv" class="hdr pkg hdr-method"><a href="#Context.Color4fv" title="permalink">»</a>&nbsp;func (c *Context) Color4fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4i" class="hdr pkg hdr-method"><a href="#Context.Color4i" title="permalink">»</a>&nbsp;func (c *Context) Color4i(red int32, green int32, blue int32, alpha int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4i(red int32, green int32, blue int32, alpha int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4iv" class="hdr pkg hdr-method"><a href="#Context.Color4iv" title="permalink">»</a>&nbsp;func (c *Context) Color4iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4s" class="hdr pkg hdr-method"><a href="#Context.Color4s" title="permalink">»</a>&nbsp;func (c *Context) Color4s(red int16, green int16, blue int16, alpha int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4s(red int16, green int16, blue int16, alpha int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4sv" class="hdr pkg hdr-method"><a href="#Context.Color4sv" title="permalink">»</a>&nbsp;func (c *Context) Color4sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4ub" class="hdr pkg hdr-method"><a href="#Context.Color4ub" title="permalink">»</a>&nbsp;func (c *Context) Color4ub(red uint8, green uint8, blue uint8, alpha uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4ub(red uint8, green uint8, blue uint8, alpha uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4ubv" class="hdr pkg hdr-method"><a href="#Context.Color4ubv" title="permalink">»</a>&nbsp;func (c *Context) Color4ubv(v *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4ubv(v *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4ui" class="hdr pkg hdr-method"><a href="#Context.Color4ui" title="permalink">»</a>&nbsp;func (c *Context) Color4ui(red uint32, green uint32, blue uint32, alpha uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4ui(red uint32, green uint32, blue uint32, alpha uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4uiv" class="hdr pkg hdr-method"><a href="#Context.Color4uiv" title="permalink">»</a>&nbsp;func (c *Context) Color4uiv(v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4uiv(v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4us" class="hdr pkg hdr-method"><a href="#Context.Color4us" title="permalink">»</a>&nbsp;func (c *Context) Color4us(red uint16, green uint16, blue uint16, alpha uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4us(red uint16, green uint16, blue uint16, alpha uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.Color4usv" class="hdr pkg hdr-method"><a href="#Context.Color4usv" title="permalink">»</a>&nbsp;func (c *Context) Color4usv(v *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Color4usv(v *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorMask" class="hdr pkg hdr-method"><a href="#Context.ColorMask" title="permalink">»</a>&nbsp;func (c *Context) ColorMask(red uint8, green uint8, blue uint8, alpha uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorMask(red uint8, green uint8, blue uint8, alpha uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorMaski" class="hdr pkg hdr-method"><a href="#Context.ColorMaski" title="permalink">»</a>&nbsp;func (c *Context) ColorMaski(index uint32, r uint8, g uint8, b uint8, a uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorMaski(index uint32, r uint8, g uint8, b uint8, a uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorMaterial" class="hdr pkg hdr-method"><a href="#Context.ColorMaterial" title="permalink">»</a>&nbsp;func (c *Context) ColorMaterial(face int32, mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorMaterial(face int32, mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorP3ui" class="hdr pkg hdr-method"><a href="#Context.ColorP3ui" title="permalink">»</a>&nbsp;func (c *Context) ColorP3ui(pType int32, color uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorP3ui(pType int32, color uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorP3uiv" class="hdr pkg hdr-method"><a href="#Context.ColorP3uiv" title="permalink">»</a>&nbsp;func (c *Context) ColorP3uiv(pType int32, color *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorP3uiv(pType int32, color *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorP4ui" class="hdr pkg hdr-method"><a href="#Context.ColorP4ui" title="permalink">»</a>&nbsp;func (c *Context) ColorP4ui(pType int32, color uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorP4ui(pType int32, color uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorP4uiv" class="hdr pkg hdr-method"><a href="#Context.ColorP4uiv" title="permalink">»</a>&nbsp;func (c *Context) ColorP4uiv(pType int32, color *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorP4uiv(pType int32, color *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ColorPointer" class="hdr pkg hdr-method"><a href="#Context.ColorPointer" title="permalink">»</a>&nbsp;func (c *Context) ColorPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ColorPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompileShader" class="hdr pkg hdr-method"><a href="#Context.CompileShader" title="permalink">»</a>&nbsp;func (c *Context) CompileShader(shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompileShader(shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexImage1D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexImage1D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexImage1D(target int32, level int32, internalformat int32, width uint32, border int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexImage1D(target int32, level int32, internalformat int32, width uint32, border int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexImage2D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexImage2D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexImage3D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexImage3D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexSubImage1D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexSubImage1D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexSubImage1D(target int32, level int32, xoffset int32, width uint32, format int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexSubImage1D(target int32, level int32, xoffset int32, width uint32, format int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexSubImage2D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexSubImage2D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CompressedTexSubImage3D" class="hdr pkg hdr-method"><a href="#Context.CompressedTexSubImage3D" title="permalink">»</a>&nbsp;func (c *Context) CompressedTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, imageSize uint32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CompressedTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, imageSize uint32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyBufferSubData" class="hdr pkg hdr-method"><a href="#Context.CopyBufferSubData" title="permalink">»</a>&nbsp;func (c *Context) CopyBufferSubData(readTarget int32, writeTarget int32, readOffset uintptr, writeOffset uintptr, size uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyBufferSubData(readTarget int32, writeTarget int32, readOffset uintptr, writeOffset uintptr, size uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyImageSubData" class="hdr pkg hdr-method"><a href="#Context.CopyImageSubData" title="permalink">»</a>&nbsp;func (c *Context) CopyImageSubData(srcName uint32, srcTarget int32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget int32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth uint32, srcHeight uint32, srcDepth uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyImageSubData(srcName uint32, srcTarget int32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget int32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth uint32, srcHeight uint32, srcDepth uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyPixels" class="hdr pkg hdr-method"><a href="#Context.CopyPixels" title="permalink">»</a>&nbsp;func (c *Context) CopyPixels(x int32, y int32, width uint32, height uint32, pType int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyPixels(x int32, y int32, width uint32, height uint32, pType int32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexImage1D" class="hdr pkg hdr-method"><a href="#Context.CopyTexImage1D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexImage1D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, border int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexImage1D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, border int32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexImage2D" class="hdr pkg hdr-method"><a href="#Context.CopyTexImage2D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexImage2D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, height uint32, border int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexImage2D(target int32, level int32, internalformat int32, x int32, y int32, width uint32, height uint32, border int32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexSubImage1D" class="hdr pkg hdr-method"><a href="#Context.CopyTexSubImage1D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexSubImage1D(target int32, level int32, xoffset int32, x int32, y int32, width uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexSubImage1D(target int32, level int32, xoffset int32, x int32, y int32, width uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexSubImage2D" class="hdr pkg hdr-method"><a href="#Context.CopyTexSubImage2D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CopyTexSubImage3D" class="hdr pkg hdr-method"><a href="#Context.CopyTexSubImage3D" title="permalink">»</a>&nbsp;func (c *Context) CopyTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CopyTexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.CreateProgram" class="hdr pkg hdr-method"><a href="#Context.CreateProgram" title="permalink">»</a>&nbsp;func (c *Context) CreateProgram() uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CreateProgram() uint32</pre>
			
		</span>
	
		
		<h1 id="Context.CreateShader" class="hdr pkg hdr-method"><a href="#Context.CreateShader" title="permalink">»</a>&nbsp;func (c *Context) CreateShader(pType int32) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CreateShader(pType int32) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.CreateShaderProgramv" class="hdr pkg hdr-method"><a href="#Context.CreateShaderProgramv" title="permalink">»</a>&nbsp;func (c *Context) CreateShaderProgramv(pType int32, count uint32, strings **byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CreateShaderProgramv(pType int32, count uint32, strings **byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.CullFace" class="hdr pkg hdr-method"><a href="#Context.CullFace" title="permalink">»</a>&nbsp;func (c *Context) CullFace(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) CullFace(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DebugMessageCallback" class="hdr pkg hdr-method"><a href="#Context.DebugMessageCallback" title="permalink">»</a>&nbsp;func (c *Context) DebugMessageCallback(callback DEBUGPROC, userParam unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DebugMessageCallback(callback DEBUGPROC, userParam unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DebugMessageControl" class="hdr pkg hdr-method"><a href="#Context.DebugMessageControl" title="permalink">»</a>&nbsp;func (c *Context) DebugMessageControl(source int32, pType int32, severity int32, count uint32, ids *uint32, enabled uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DebugMessageControl(source int32, pType int32, severity int32, count uint32, ids *uint32, enabled uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.DebugMessageInsert" class="hdr pkg hdr-method"><a href="#Context.DebugMessageInsert" title="permalink">»</a>&nbsp;func (c *Context) DebugMessageInsert(source int32, pType int32, id uint32, severity int32, length uint32, buf *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DebugMessageInsert(source int32, pType int32, id uint32, severity int32, length uint32, buf *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteBuffers" class="hdr pkg hdr-method"><a href="#Context.DeleteBuffers" title="permalink">»</a>&nbsp;func (c *Context) DeleteBuffers(n uint32, buffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteBuffers(n uint32, buffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteFramebuffers" class="hdr pkg hdr-method"><a href="#Context.DeleteFramebuffers" title="permalink">»</a>&nbsp;func (c *Context) DeleteFramebuffers(n uint32, framebuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteFramebuffers(n uint32, framebuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteLists" class="hdr pkg hdr-method"><a href="#Context.DeleteLists" title="permalink">»</a>&nbsp;func (c *Context) DeleteLists(list uint32, pRange uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteLists(list uint32, pRange uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteProgram" class="hdr pkg hdr-method"><a href="#Context.DeleteProgram" title="permalink">»</a>&nbsp;func (c *Context) DeleteProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteProgramPipelines" class="hdr pkg hdr-method"><a href="#Context.DeleteProgramPipelines" title="permalink">»</a>&nbsp;func (c *Context) DeleteProgramPipelines(n uint32, pipelines *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteProgramPipelines(n uint32, pipelines *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteQueries" class="hdr pkg hdr-method"><a href="#Context.DeleteQueries" title="permalink">»</a>&nbsp;func (c *Context) DeleteQueries(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteQueries(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteRenderbuffers" class="hdr pkg hdr-method"><a href="#Context.DeleteRenderbuffers" title="permalink">»</a>&nbsp;func (c *Context) DeleteRenderbuffers(n uint32, renderbuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteRenderbuffers(n uint32, renderbuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteSamplers" class="hdr pkg hdr-method"><a href="#Context.DeleteSamplers" title="permalink">»</a>&nbsp;func (c *Context) DeleteSamplers(count uint32, samplers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteSamplers(count uint32, samplers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteShader" class="hdr pkg hdr-method"><a href="#Context.DeleteShader" title="permalink">»</a>&nbsp;func (c *Context) DeleteShader(shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteShader(shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteSync" class="hdr pkg hdr-method"><a href="#Context.DeleteSync" title="permalink">»</a>&nbsp;func (c *Context) DeleteSync(sync Sync) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteSync(sync Sync)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteTextures" class="hdr pkg hdr-method"><a href="#Context.DeleteTextures" title="permalink">»</a>&nbsp;func (c *Context) DeleteTextures(n uint32, textures *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteTextures(n uint32, textures *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteTransformFeedbacks" class="hdr pkg hdr-method"><a href="#Context.DeleteTransformFeedbacks" title="permalink">»</a>&nbsp;func (c *Context) DeleteTransformFeedbacks(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteTransformFeedbacks(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DeleteVertexArrays" class="hdr pkg hdr-method"><a href="#Context.DeleteVertexArrays" title="permalink">»</a>&nbsp;func (c *Context) DeleteVertexArrays(n uint32, arrays *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DeleteVertexArrays(n uint32, arrays *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthFunc" class="hdr pkg hdr-method"><a href="#Context.DepthFunc" title="permalink">»</a>&nbsp;func (c *Context) DepthFunc(pFunc int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthFunc(pFunc int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthMask" class="hdr pkg hdr-method"><a href="#Context.DepthMask" title="permalink">»</a>&nbsp;func (c *Context) DepthMask(flag uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthMask(flag uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthRange" class="hdr pkg hdr-method"><a href="#Context.DepthRange" title="permalink">»</a>&nbsp;func (c *Context) DepthRange(near float64, far float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthRange(near float64, far float64)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthRangeArrayv" class="hdr pkg hdr-method"><a href="#Context.DepthRangeArrayv" title="permalink">»</a>&nbsp;func (c *Context) DepthRangeArrayv(first uint32, count uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthRangeArrayv(first uint32, count uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthRangeIndexed" class="hdr pkg hdr-method"><a href="#Context.DepthRangeIndexed" title="permalink">»</a>&nbsp;func (c *Context) DepthRangeIndexed(index uint32, n float64, f float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthRangeIndexed(index uint32, n float64, f float64)</pre>
			
		</span>
	
		
		<h1 id="Context.DepthRangef" class="hdr pkg hdr-method"><a href="#Context.DepthRangef" title="permalink">»</a>&nbsp;func (c *Context) DepthRangef(n float32, f float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DepthRangef(n float32, f float32)</pre>
			
		</span>
	
		
		<h1 id="Context.DetachShader" class="hdr pkg hdr-method"><a href="#Context.DetachShader" title="permalink">»</a>&nbsp;func (c *Context) DetachShader(program uint32, shader uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DetachShader(program uint32, shader uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Disable" class="hdr pkg hdr-method"><a href="#Context.Disable" title="permalink">»</a>&nbsp;func (c *Context) Disable(cap int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Disable(cap int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DisableClientState" class="hdr pkg hdr-method"><a href="#Context.DisableClientState" title="permalink">»</a>&nbsp;func (c *Context) DisableClientState(array int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DisableClientState(array int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DisableVertexAttribArray" class="hdr pkg hdr-method"><a href="#Context.DisableVertexAttribArray" title="permalink">»</a>&nbsp;func (c *Context) DisableVertexAttribArray(index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DisableVertexAttribArray(index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Disablei" class="hdr pkg hdr-method"><a href="#Context.Disablei" title="permalink">»</a>&nbsp;func (c *Context) Disablei(target int32, index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Disablei(target int32, index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DispatchCompute" class="hdr pkg hdr-method"><a href="#Context.DispatchCompute" title="permalink">»</a>&nbsp;func (c *Context) DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DispatchComputeIndirect" class="hdr pkg hdr-method"><a href="#Context.DispatchComputeIndirect" title="permalink">»</a>&nbsp;func (c *Context) DispatchComputeIndirect(indirect uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DispatchComputeIndirect(indirect uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawArrays" class="hdr pkg hdr-method"><a href="#Context.DrawArrays" title="permalink">»</a>&nbsp;func (c *Context) DrawArrays(mode int32, first int32, count uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawArrays(mode int32, first int32, count uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawArraysIndirect" class="hdr pkg hdr-method"><a href="#Context.DrawArraysIndirect" title="permalink">»</a>&nbsp;func (c *Context) DrawArraysIndirect(mode int32, indirect unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawArraysIndirect(mode int32, indirect unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawArraysInstanced" class="hdr pkg hdr-method"><a href="#Context.DrawArraysInstanced" title="permalink">»</a>&nbsp;func (c *Context) DrawArraysInstanced(mode int32, first int32, count uint32, instancecount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawArraysInstanced(mode int32, first int32, count uint32, instancecount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawArraysInstancedBaseInstance" class="hdr pkg hdr-method"><a href="#Context.DrawArraysInstancedBaseInstance" title="permalink">»</a>&nbsp;func (c *Context) DrawArraysInstancedBaseInstance(mode int32, first int32, count uint32, instancecount uint32, baseinstance uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawArraysInstancedBaseInstance(mode int32, first int32, count uint32, instancecount uint32, baseinstance uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawBuffer" class="hdr pkg hdr-method"><a href="#Context.DrawBuffer" title="permalink">»</a>&nbsp;func (c *Context) DrawBuffer(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawBuffer(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawBuffers" class="hdr pkg hdr-method"><a href="#Context.DrawBuffers" title="permalink">»</a>&nbsp;func (c *Context) DrawBuffers(n uint32, bufs *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawBuffers(n uint32, bufs *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElements" class="hdr pkg hdr-method"><a href="#Context.DrawElements" title="permalink">»</a>&nbsp;func (c *Context) DrawElements(mode int32, count uint32, pType int32, indices unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElements(mode int32, count uint32, pType int32, indices unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsBaseVertex" class="hdr pkg hdr-method"><a href="#Context.DrawElementsBaseVertex" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsBaseVertex(mode int32, count uint32, pType int32, indices unsafe.Pointer, basevertex int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsBaseVertex(mode int32, count uint32, pType int32, indices unsafe.Pointer, basevertex int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsIndirect" class="hdr pkg hdr-method"><a href="#Context.DrawElementsIndirect" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsInstanced" class="hdr pkg hdr-method"><a href="#Context.DrawElementsInstanced" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsInstanced(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsInstanced(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsInstancedBaseInstance" class="hdr pkg hdr-method"><a href="#Context.DrawElementsInstancedBaseInstance" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsInstancedBaseInstance(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, baseinstance uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsInstancedBaseInstance(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, baseinstance uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsInstancedBaseVertex" class="hdr pkg hdr-method"><a href="#Context.DrawElementsInstancedBaseVertex" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsInstancedBaseVertex(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, basevertex int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsInstancedBaseVertex(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, basevertex int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawElementsInstancedBaseVertexBaseInstance" class="hdr pkg hdr-method"><a href="#Context.DrawElementsInstancedBaseVertexBaseInstance" title="permalink">»</a>&nbsp;func (c *Context) DrawElementsInstancedBaseVertexBaseInstance(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, basevertex int32, baseinstance uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawElementsInstancedBaseVertexBaseInstance(mode int32, count uint32, pType int32, indices unsafe.Pointer, instancecount uint32, basevertex int32, baseinstance uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawPixels" class="hdr pkg hdr-method"><a href="#Context.DrawPixels" title="permalink">»</a>&nbsp;func (c *Context) DrawPixels(width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawPixels(width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawRangeElements" class="hdr pkg hdr-method"><a href="#Context.DrawRangeElements" title="permalink">»</a>&nbsp;func (c *Context) DrawRangeElements(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawRangeElements(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawRangeElementsBaseVertex" class="hdr pkg hdr-method"><a href="#Context.DrawRangeElementsBaseVertex" title="permalink">»</a>&nbsp;func (c *Context) DrawRangeElementsBaseVertex(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer, basevertex int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawRangeElementsBaseVertex(mode int32, start uint32, end uint32, count uint32, pType int32, indices unsafe.Pointer, basevertex int32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.DrawTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) DrawTransformFeedback(mode int32, id uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawTransformFeedback(mode int32, id uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawTransformFeedbackInstanced" class="hdr pkg hdr-method"><a href="#Context.DrawTransformFeedbackInstanced" title="permalink">»</a>&nbsp;func (c *Context) DrawTransformFeedbackInstanced(mode int32, id uint32, instancecount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawTransformFeedbackInstanced(mode int32, id uint32, instancecount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawTransformFeedbackStream" class="hdr pkg hdr-method"><a href="#Context.DrawTransformFeedbackStream" title="permalink">»</a>&nbsp;func (c *Context) DrawTransformFeedbackStream(mode int32, id uint32, stream uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawTransformFeedbackStream(mode int32, id uint32, stream uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.DrawTransformFeedbackStreamInstanced" class="hdr pkg hdr-method"><a href="#Context.DrawTransformFeedbackStreamInstanced" title="permalink">»</a>&nbsp;func (c *Context) DrawTransformFeedbackStreamInstanced(mode int32, id uint32, stream uint32, instancecount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) DrawTransformFeedbackStreamInstanced(mode int32, id uint32, stream uint32, instancecount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.EdgeFlag" class="hdr pkg hdr-method"><a href="#Context.EdgeFlag" title="permalink">»</a>&nbsp;func (c *Context) EdgeFlag(flag uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EdgeFlag(flag uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.EdgeFlagPointer" class="hdr pkg hdr-method"><a href="#Context.EdgeFlagPointer" title="permalink">»</a>&nbsp;func (c *Context) EdgeFlagPointer(stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EdgeFlagPointer(stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.EdgeFlagv" class="hdr pkg hdr-method"><a href="#Context.EdgeFlagv" title="permalink">»</a>&nbsp;func (c *Context) EdgeFlagv(flag *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EdgeFlagv(flag *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.Enable" class="hdr pkg hdr-method"><a href="#Context.Enable" title="permalink">»</a>&nbsp;func (c *Context) Enable(cap int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Enable(cap int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EnableClientState" class="hdr pkg hdr-method"><a href="#Context.EnableClientState" title="permalink">»</a>&nbsp;func (c *Context) EnableClientState(array int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EnableClientState(array int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EnableVertexAttribArray" class="hdr pkg hdr-method"><a href="#Context.EnableVertexAttribArray" title="permalink">»</a>&nbsp;func (c *Context) EnableVertexAttribArray(index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EnableVertexAttribArray(index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Enablei" class="hdr pkg hdr-method"><a href="#Context.Enablei" title="permalink">»</a>&nbsp;func (c *Context) Enablei(target int32, index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Enablei(target int32, index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.End" class="hdr pkg hdr-method"><a href="#Context.End" title="permalink">»</a>&nbsp;func (c *Context) End() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) End()</pre>
			
		</span>
	
		
		<h1 id="Context.EndConditionalRender" class="hdr pkg hdr-method"><a href="#Context.EndConditionalRender" title="permalink">»</a>&nbsp;func (c *Context) EndConditionalRender() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EndConditionalRender()</pre>
			
		</span>
	
		
		<h1 id="Context.EndList" class="hdr pkg hdr-method"><a href="#Context.EndList" title="permalink">»</a>&nbsp;func (c *Context) EndList() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EndList()</pre>
			
		</span>
	
		
		<h1 id="Context.EndQuery" class="hdr pkg hdr-method"><a href="#Context.EndQuery" title="permalink">»</a>&nbsp;func (c *Context) EndQuery(target int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EndQuery(target int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EndQueryIndexed" class="hdr pkg hdr-method"><a href="#Context.EndQueryIndexed" title="permalink">»</a>&nbsp;func (c *Context) EndQueryIndexed(target int32, index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EndQueryIndexed(target int32, index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.EndTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.EndTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) EndTransformFeedback() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EndTransformFeedback()</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord1d" class="hdr pkg hdr-method"><a href="#Context.EvalCoord1d" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord1d(u float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord1d(u float64)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord1dv" class="hdr pkg hdr-method"><a href="#Context.EvalCoord1dv" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord1dv(u *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord1dv(u *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord1f" class="hdr pkg hdr-method"><a href="#Context.EvalCoord1f" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord1f(u float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord1f(u float32)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord1fv" class="hdr pkg hdr-method"><a href="#Context.EvalCoord1fv" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord1fv(u *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord1fv(u *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord2d" class="hdr pkg hdr-method"><a href="#Context.EvalCoord2d" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord2d(u float64, v float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord2d(u float64, v float64)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord2dv" class="hdr pkg hdr-method"><a href="#Context.EvalCoord2dv" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord2dv(u *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord2dv(u *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord2f" class="hdr pkg hdr-method"><a href="#Context.EvalCoord2f" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord2f(u float32, v float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord2f(u float32, v float32)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalCoord2fv" class="hdr pkg hdr-method"><a href="#Context.EvalCoord2fv" title="permalink">»</a>&nbsp;func (c *Context) EvalCoord2fv(u *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalCoord2fv(u *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalMesh1" class="hdr pkg hdr-method"><a href="#Context.EvalMesh1" title="permalink">»</a>&nbsp;func (c *Context) EvalMesh1(mode int32, i1 int32, i2 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalMesh1(mode int32, i1 int32, i2 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalMesh2" class="hdr pkg hdr-method"><a href="#Context.EvalMesh2" title="permalink">»</a>&nbsp;func (c *Context) EvalMesh2(mode int32, i1 int32, i2 int32, j1 int32, j2 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalMesh2(mode int32, i1 int32, i2 int32, j1 int32, j2 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalPoint1" class="hdr pkg hdr-method"><a href="#Context.EvalPoint1" title="permalink">»</a>&nbsp;func (c *Context) EvalPoint1(i int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalPoint1(i int32)</pre>
			
		</span>
	
		
		<h1 id="Context.EvalPoint2" class="hdr pkg hdr-method"><a href="#Context.EvalPoint2" title="permalink">»</a>&nbsp;func (c *Context) EvalPoint2(i int32, j int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) EvalPoint2(i int32, j int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Execute" class="hdr pkg hdr-method"><a href="#Context.Execute" title="permalink">»</a>&nbsp;func (c *Context) Execute() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Execute()</pre>
			<p>
Execute executes all the currently pending OpenGL function calls for this
Context.
</p>
<p>
This function executes pending calls regardless of whether or not batching
is turned on.
</p>

		</span>
	
		
		<h1 id="Context.Extension" class="hdr pkg hdr-method"><a href="#Context.Extension" title="permalink">»</a>&nbsp;func (c *Context) Extension(name string) (supported bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Extension(name string) (supported bool)</pre>
			<p>
Extension tells if the specified extension is supported by the OpenGL
implementation.
</p>

		</span>
	
		
		<h1 id="Context.Extensions" class="hdr pkg hdr-method"><a href="#Context.Extensions" title="permalink">»</a>&nbsp;func (c *Context) Extensions() []string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Extensions() []string</pre>
			<p>
Extensions returns a slice of strings which represents all the extensions
supported by the OpenGL implementation.
</p>
<p>
Internally a map is used to store them, so a copy in the form of a slice is
returned.
</p>

		</span>
	
		
		<h1 id="Context.FeedbackBuffer" class="hdr pkg hdr-method"><a href="#Context.FeedbackBuffer" title="permalink">»</a>&nbsp;func (c *Context) FeedbackBuffer(size uint32, pType int32, buffer *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FeedbackBuffer(size uint32, pType int32, buffer *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.FenceSync" class="hdr pkg hdr-method"><a href="#Context.FenceSync" title="permalink">»</a>&nbsp;func (c *Context) FenceSync(condition int32, flags uint32) Sync <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FenceSync(condition int32, flags uint32) Sync</pre>
			
		</span>
	
		
		<h1 id="Context.Finish" class="hdr pkg hdr-method"><a href="#Context.Finish" title="permalink">»</a>&nbsp;func (c *Context) Finish() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Finish()</pre>
			
		</span>
	
		
		<h1 id="Context.Flush" class="hdr pkg hdr-method"><a href="#Context.Flush" title="permalink">»</a>&nbsp;func (c *Context) Flush() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Flush()</pre>
			
		</span>
	
		
		<h1 id="Context.FlushMappedBufferRange" class="hdr pkg hdr-method"><a href="#Context.FlushMappedBufferRange" title="permalink">»</a>&nbsp;func (c *Context) FlushMappedBufferRange(target int32, offset uintptr, length uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FlushMappedBufferRange(target int32, offset uintptr, length uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.FogCoordPointer" class="hdr pkg hdr-method"><a href="#Context.FogCoordPointer" title="permalink">»</a>&nbsp;func (c *Context) FogCoordPointer(pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FogCoordPointer(pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.FogCoordd" class="hdr pkg hdr-method"><a href="#Context.FogCoordd" title="permalink">»</a>&nbsp;func (c *Context) FogCoordd(coord float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FogCoordd(coord float64)</pre>
			
		</span>
	
		
		<h1 id="Context.FogCoorddv" class="hdr pkg hdr-method"><a href="#Context.FogCoorddv" title="permalink">»</a>&nbsp;func (c *Context) FogCoorddv(coord *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FogCoorddv(coord *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.FogCoordf" class="hdr pkg hdr-method"><a href="#Context.FogCoordf" title="permalink">»</a>&nbsp;func (c *Context) FogCoordf(coord float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FogCoordf(coord float32)</pre>
			
		</span>
	
		
		<h1 id="Context.FogCoordfv" class="hdr pkg hdr-method"><a href="#Context.FogCoordfv" title="permalink">»</a>&nbsp;func (c *Context) FogCoordfv(coord *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FogCoordfv(coord *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Fogf" class="hdr pkg hdr-method"><a href="#Context.Fogf" title="permalink">»</a>&nbsp;func (c *Context) Fogf(pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Fogf(pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Fogfv" class="hdr pkg hdr-method"><a href="#Context.Fogfv" title="permalink">»</a>&nbsp;func (c *Context) Fogfv(pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Fogfv(pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Fogi" class="hdr pkg hdr-method"><a href="#Context.Fogi" title="permalink">»</a>&nbsp;func (c *Context) Fogi(pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Fogi(pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Fogiv" class="hdr pkg hdr-method"><a href="#Context.Fogiv" title="permalink">»</a>&nbsp;func (c *Context) Fogiv(pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Fogiv(pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferParameteri" class="hdr pkg hdr-method"><a href="#Context.FramebufferParameteri" title="permalink">»</a>&nbsp;func (c *Context) FramebufferParameteri(target int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferParameteri(target int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferRenderbuffer" class="hdr pkg hdr-method"><a href="#Context.FramebufferRenderbuffer" title="permalink">»</a>&nbsp;func (c *Context) FramebufferRenderbuffer(target int32, attachment int32, renderbuffertarget int32, renderbuffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferRenderbuffer(target int32, attachment int32, renderbuffertarget int32, renderbuffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferTexture" class="hdr pkg hdr-method"><a href="#Context.FramebufferTexture" title="permalink">»</a>&nbsp;func (c *Context) FramebufferTexture(target int32, attachment int32, texture uint32, level int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferTexture(target int32, attachment int32, texture uint32, level int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferTexture1D" class="hdr pkg hdr-method"><a href="#Context.FramebufferTexture1D" title="permalink">»</a>&nbsp;func (c *Context) FramebufferTexture1D(target int32, attachment int32, textarget int32, texture uint32, level int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferTexture1D(target int32, attachment int32, textarget int32, texture uint32, level int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferTexture2D" class="hdr pkg hdr-method"><a href="#Context.FramebufferTexture2D" title="permalink">»</a>&nbsp;func (c *Context) FramebufferTexture2D(target int32, attachment int32, textarget int32, texture uint32, level int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferTexture2D(target int32, attachment int32, textarget int32, texture uint32, level int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferTexture3D" class="hdr pkg hdr-method"><a href="#Context.FramebufferTexture3D" title="permalink">»</a>&nbsp;func (c *Context) FramebufferTexture3D(target int32, attachment int32, textarget int32, texture uint32, level int32, zoffset int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferTexture3D(target int32, attachment int32, textarget int32, texture uint32, level int32, zoffset int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FramebufferTextureLayer" class="hdr pkg hdr-method"><a href="#Context.FramebufferTextureLayer" title="permalink">»</a>&nbsp;func (c *Context) FramebufferTextureLayer(target int32, attachment int32, texture uint32, level int32, layer int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FramebufferTextureLayer(target int32, attachment int32, texture uint32, level int32, layer int32)</pre>
			
		</span>
	
		
		<h1 id="Context.FrontFace" class="hdr pkg hdr-method"><a href="#Context.FrontFace" title="permalink">»</a>&nbsp;func (c *Context) FrontFace(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) FrontFace(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Frustum" class="hdr pkg hdr-method"><a href="#Context.Frustum" title="permalink">»</a>&nbsp;func (c *Context) Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Frustum(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GenBuffers" class="hdr pkg hdr-method"><a href="#Context.GenBuffers" title="permalink">»</a>&nbsp;func (c *Context) GenBuffers(n uint32, buffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenBuffers(n uint32, buffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenFramebuffers" class="hdr pkg hdr-method"><a href="#Context.GenFramebuffers" title="permalink">»</a>&nbsp;func (c *Context) GenFramebuffers(n uint32, framebuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenFramebuffers(n uint32, framebuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenLists" class="hdr pkg hdr-method"><a href="#Context.GenLists" title="permalink">»</a>&nbsp;func (c *Context) GenLists(pRange uint32) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenLists(pRange uint32) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.GenProgramPipelines" class="hdr pkg hdr-method"><a href="#Context.GenProgramPipelines" title="permalink">»</a>&nbsp;func (c *Context) GenProgramPipelines(n uint32, pipelines *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenProgramPipelines(n uint32, pipelines *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenQueries" class="hdr pkg hdr-method"><a href="#Context.GenQueries" title="permalink">»</a>&nbsp;func (c *Context) GenQueries(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenQueries(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenRenderbuffers" class="hdr pkg hdr-method"><a href="#Context.GenRenderbuffers" title="permalink">»</a>&nbsp;func (c *Context) GenRenderbuffers(n uint32, renderbuffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenRenderbuffers(n uint32, renderbuffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenSamplers" class="hdr pkg hdr-method"><a href="#Context.GenSamplers" title="permalink">»</a>&nbsp;func (c *Context) GenSamplers(count uint32, samplers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenSamplers(count uint32, samplers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenTextures" class="hdr pkg hdr-method"><a href="#Context.GenTextures" title="permalink">»</a>&nbsp;func (c *Context) GenTextures(n uint32, textures *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenTextures(n uint32, textures *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenTransformFeedbacks" class="hdr pkg hdr-method"><a href="#Context.GenTransformFeedbacks" title="permalink">»</a>&nbsp;func (c *Context) GenTransformFeedbacks(n uint32, ids *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenTransformFeedbacks(n uint32, ids *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenVertexArrays" class="hdr pkg hdr-method"><a href="#Context.GenVertexArrays" title="permalink">»</a>&nbsp;func (c *Context) GenVertexArrays(n uint32, arrays *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenVertexArrays(n uint32, arrays *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GenerateMipmap" class="hdr pkg hdr-method"><a href="#Context.GenerateMipmap" title="permalink">»</a>&nbsp;func (c *Context) GenerateMipmap(target int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GenerateMipmap(target int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveAtomicCounterBufferiv" class="hdr pkg hdr-method"><a href="#Context.GetActiveAtomicCounterBufferiv" title="permalink">»</a>&nbsp;func (c *Context) GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveAttrib" class="hdr pkg hdr-method"><a href="#Context.GetActiveAttrib" title="permalink">»</a>&nbsp;func (c *Context) GetActiveAttrib(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveAttrib(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveSubroutineName" class="hdr pkg hdr-method"><a href="#Context.GetActiveSubroutineName" title="permalink">»</a>&nbsp;func (c *Context) GetActiveSubroutineName(program uint32, shadertype int32, index uint32, bufsize uint32, length *uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveSubroutineName(program uint32, shadertype int32, index uint32, bufsize uint32, length *uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveSubroutineUniformName" class="hdr pkg hdr-method"><a href="#Context.GetActiveSubroutineUniformName" title="permalink">»</a>&nbsp;func (c *Context) GetActiveSubroutineUniformName(program uint32, shadertype int32, index uint32, bufsize uint32, length *uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveSubroutineUniformName(program uint32, shadertype int32, index uint32, bufsize uint32, length *uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveSubroutineUniformiv" class="hdr pkg hdr-method"><a href="#Context.GetActiveSubroutineUniformiv" title="permalink">»</a>&nbsp;func (c *Context) GetActiveSubroutineUniformiv(program uint32, shadertype int32, index uint32, pname int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveSubroutineUniformiv(program uint32, shadertype int32, index uint32, pname int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniform" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniform" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniform(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniform(program uint32, index uint32, bufSize uint32, length *uint32, size *int32, pType *int32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniformBlockName" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniformBlockName" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize uint32, length *uint32, uniformBlockName *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize uint32, length *uint32, uniformBlockName *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniformBlockiv" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniformBlockiv" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniformName" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniformName" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniformName(program uint32, uniformIndex uint32, bufSize uint32, length *uint32, uniformName *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniformName(program uint32, uniformIndex uint32, bufSize uint32, length *uint32, uniformName *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetActiveUniformsiv" class="hdr pkg hdr-method"><a href="#Context.GetActiveUniformsiv" title="permalink">»</a>&nbsp;func (c *Context) GetActiveUniformsiv(program uint32, uniformCount uint32, uniformIndices *uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetActiveUniformsiv(program uint32, uniformCount uint32, uniformIndices *uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetAttachedShaders" class="hdr pkg hdr-method"><a href="#Context.GetAttachedShaders" title="permalink">»</a>&nbsp;func (c *Context) GetAttachedShaders(program uint32, maxCount uint32, count *uint32, shaders *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetAttachedShaders(program uint32, maxCount uint32, count *uint32, shaders *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetAttribLocation" class="hdr pkg hdr-method"><a href="#Context.GetAttribLocation" title="permalink">»</a>&nbsp;func (c *Context) GetAttribLocation(program uint32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetAttribLocation(program uint32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetBooleani_v" class="hdr pkg hdr-method"><a href="#Context.GetBooleani_v" title="permalink">»</a>&nbsp;func (c *Context) GetBooleani_v(target int32, index uint32, data *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBooleani_v(target int32, index uint32, data *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBooleanv" class="hdr pkg hdr-method"><a href="#Context.GetBooleanv" title="permalink">»</a>&nbsp;func (c *Context) GetBooleanv(pname int32, data *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBooleanv(pname int32, data *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBufferParameteri64v" class="hdr pkg hdr-method"><a href="#Context.GetBufferParameteri64v" title="permalink">»</a>&nbsp;func (c *Context) GetBufferParameteri64v(target int32, pname int32, params *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBufferParameteri64v(target int32, pname int32, params *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBufferParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetBufferParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetBufferParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBufferParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBufferPointerv" class="hdr pkg hdr-method"><a href="#Context.GetBufferPointerv" title="permalink">»</a>&nbsp;func (c *Context) GetBufferPointerv(target int32, pname int32, params *unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBufferPointerv(target int32, pname int32, params *unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetBufferSubData" class="hdr pkg hdr-method"><a href="#Context.GetBufferSubData" title="permalink">»</a>&nbsp;func (c *Context) GetBufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetBufferSubData(target int32, offset uintptr, size uintptr, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetClipPlane" class="hdr pkg hdr-method"><a href="#Context.GetClipPlane" title="permalink">»</a>&nbsp;func (c *Context) GetClipPlane(plane int32, equation *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetClipPlane(plane int32, equation *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetCompressedTexImage" class="hdr pkg hdr-method"><a href="#Context.GetCompressedTexImage" title="permalink">»</a>&nbsp;func (c *Context) GetCompressedTexImage(target int32, level int32, img unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetCompressedTexImage(target int32, level int32, img unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetDebugMessageLog" class="hdr pkg hdr-method"><a href="#Context.GetDebugMessageLog" title="permalink">»</a>&nbsp;func (c *Context) GetDebugMessageLog(count uint32, bufSize uint32, sources *int32, types *int32, ids *uint32, severities *int32, lengths *uint32, messageLog *byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetDebugMessageLog(count uint32, bufSize uint32, sources *int32, types *int32, ids *uint32, severities *int32, lengths *uint32, messageLog *byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.GetDoublei_v" class="hdr pkg hdr-method"><a href="#Context.GetDoublei_v" title="permalink">»</a>&nbsp;func (c *Context) GetDoublei_v(target int32, index uint32, data *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetDoublei_v(target int32, index uint32, data *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetDoublev" class="hdr pkg hdr-method"><a href="#Context.GetDoublev" title="permalink">»</a>&nbsp;func (c *Context) GetDoublev(pname int32, data *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetDoublev(pname int32, data *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetError" class="hdr pkg hdr-method"><a href="#Context.GetError" title="permalink">»</a>&nbsp;func (c *Context) GetError() int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetError() int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetFloati_v" class="hdr pkg hdr-method"><a href="#Context.GetFloati_v" title="permalink">»</a>&nbsp;func (c *Context) GetFloati_v(target int32, index uint32, data *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFloati_v(target int32, index uint32, data *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetFloatv" class="hdr pkg hdr-method"><a href="#Context.GetFloatv" title="permalink">»</a>&nbsp;func (c *Context) GetFloatv(pname int32, data *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFloatv(pname int32, data *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetFragDataIndex" class="hdr pkg hdr-method"><a href="#Context.GetFragDataIndex" title="permalink">»</a>&nbsp;func (c *Context) GetFragDataIndex(program uint32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFragDataIndex(program uint32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetFragDataLocation" class="hdr pkg hdr-method"><a href="#Context.GetFragDataLocation" title="permalink">»</a>&nbsp;func (c *Context) GetFragDataLocation(program uint32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFragDataLocation(program uint32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetFramebufferAttachmentParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetFramebufferAttachmentParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetFramebufferAttachmentParameteriv(target int32, attachment int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFramebufferAttachmentParameteriv(target int32, attachment int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetFramebufferParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetFramebufferParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetFramebufferParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetFramebufferParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetInteger64i_v" class="hdr pkg hdr-method"><a href="#Context.GetInteger64i_v" title="permalink">»</a>&nbsp;func (c *Context) GetInteger64i_v(target int32, index uint32, data *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetInteger64i_v(target int32, index uint32, data *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetInteger64v" class="hdr pkg hdr-method"><a href="#Context.GetInteger64v" title="permalink">»</a>&nbsp;func (c *Context) GetInteger64v(pname int32, data *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetInteger64v(pname int32, data *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetIntegeri_v" class="hdr pkg hdr-method"><a href="#Context.GetIntegeri_v" title="permalink">»</a>&nbsp;func (c *Context) GetIntegeri_v(target int32, index uint32, data *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetIntegeri_v(target int32, index uint32, data *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetIntegerv" class="hdr pkg hdr-method"><a href="#Context.GetIntegerv" title="permalink">»</a>&nbsp;func (c *Context) GetIntegerv(pname int32, data *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetIntegerv(pname int32, data *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetInternalformati64v" class="hdr pkg hdr-method"><a href="#Context.GetInternalformati64v" title="permalink">»</a>&nbsp;func (c *Context) GetInternalformati64v(target int32, internalformat int32, pname int32, bufSize uint32, params *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetInternalformati64v(target int32, internalformat int32, pname int32, bufSize uint32, params *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetInternalformativ" class="hdr pkg hdr-method"><a href="#Context.GetInternalformativ" title="permalink">»</a>&nbsp;func (c *Context) GetInternalformativ(target int32, internalformat int32, pname int32, bufSize uint32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetInternalformativ(target int32, internalformat int32, pname int32, bufSize uint32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetLightfv" class="hdr pkg hdr-method"><a href="#Context.GetLightfv" title="permalink">»</a>&nbsp;func (c *Context) GetLightfv(light int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetLightfv(light int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetLightiv" class="hdr pkg hdr-method"><a href="#Context.GetLightiv" title="permalink">»</a>&nbsp;func (c *Context) GetLightiv(light int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetLightiv(light int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetMapdv" class="hdr pkg hdr-method"><a href="#Context.GetMapdv" title="permalink">»</a>&nbsp;func (c *Context) GetMapdv(target int32, query int32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetMapdv(target int32, query int32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetMapfv" class="hdr pkg hdr-method"><a href="#Context.GetMapfv" title="permalink">»</a>&nbsp;func (c *Context) GetMapfv(target int32, query int32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetMapfv(target int32, query int32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetMapiv" class="hdr pkg hdr-method"><a href="#Context.GetMapiv" title="permalink">»</a>&nbsp;func (c *Context) GetMapiv(target int32, query int32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetMapiv(target int32, query int32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetMaterialfv" class="hdr pkg hdr-method"><a href="#Context.GetMaterialfv" title="permalink">»</a>&nbsp;func (c *Context) GetMaterialfv(face int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetMaterialfv(face int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetMaterialiv" class="hdr pkg hdr-method"><a href="#Context.GetMaterialiv" title="permalink">»</a>&nbsp;func (c *Context) GetMaterialiv(face int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetMaterialiv(face int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetMultisamplefv" class="hdr pkg hdr-method"><a href="#Context.GetMultisamplefv" title="permalink">»</a>&nbsp;func (c *Context) GetMultisamplefv(pname int32, index uint32, val *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetMultisamplefv(pname int32, index uint32, val *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetObjectLabel" class="hdr pkg hdr-method"><a href="#Context.GetObjectLabel" title="permalink">»</a>&nbsp;func (c *Context) GetObjectLabel(identifier int32, name uint32, bufSize uint32, length *uint32, label *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetObjectLabel(identifier int32, name uint32, bufSize uint32, length *uint32, label *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetObjectPtrLabel" class="hdr pkg hdr-method"><a href="#Context.GetObjectPtrLabel" title="permalink">»</a>&nbsp;func (c *Context) GetObjectPtrLabel(ptr unsafe.Pointer, bufSize uint32, length *uint32, label *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetObjectPtrLabel(ptr unsafe.Pointer, bufSize uint32, length *uint32, label *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetPixelMapfv" class="hdr pkg hdr-method"><a href="#Context.GetPixelMapfv" title="permalink">»</a>&nbsp;func (c *Context) GetPixelMapfv(pMap int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetPixelMapfv(pMap int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetPixelMapuiv" class="hdr pkg hdr-method"><a href="#Context.GetPixelMapuiv" title="permalink">»</a>&nbsp;func (c *Context) GetPixelMapuiv(pMap int32, values *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetPixelMapuiv(pMap int32, values *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetPixelMapusv" class="hdr pkg hdr-method"><a href="#Context.GetPixelMapusv" title="permalink">»</a>&nbsp;func (c *Context) GetPixelMapusv(pMap int32, values *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetPixelMapusv(pMap int32, values *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.GetPointerv" class="hdr pkg hdr-method"><a href="#Context.GetPointerv" title="permalink">»</a>&nbsp;func (c *Context) GetPointerv(pname int32, params *unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetPointerv(pname int32, params *unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetPolygonStipple" class="hdr pkg hdr-method"><a href="#Context.GetPolygonStipple" title="permalink">»</a>&nbsp;func (c *Context) GetPolygonStipple(mask *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetPolygonStipple(mask *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramBinary" class="hdr pkg hdr-method"><a href="#Context.GetProgramBinary" title="permalink">»</a>&nbsp;func (c *Context) GetProgramBinary(program uint32, bufSize uint32, length *uint32, binaryFormat *int32, binary unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramBinary(program uint32, bufSize uint32, length *uint32, binaryFormat *int32, binary unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramInfoLog" class="hdr pkg hdr-method"><a href="#Context.GetProgramInfoLog" title="permalink">»</a>&nbsp;func (c *Context) GetProgramInfoLog(program uint32, bufSize uint32, length *uint32, infoLog *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramInfoLog(program uint32, bufSize uint32, length *uint32, infoLog *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramInterfaceiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramInterfaceiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramInterfaceiv(program uint32, programInterface int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramInterfaceiv(program uint32, programInterface int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramPipelineInfoLog" class="hdr pkg hdr-method"><a href="#Context.GetProgramPipelineInfoLog" title="permalink">»</a>&nbsp;func (c *Context) GetProgramPipelineInfoLog(pipeline uint32, bufSize uint32, length *uint32, infoLog *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramPipelineInfoLog(pipeline uint32, bufSize uint32, length *uint32, infoLog *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramPipelineiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramPipelineiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramPipelineiv(pipeline uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramPipelineiv(pipeline uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceIndex" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceIndex" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceIndex(program uint32, programInterface int32, name *byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceIndex(program uint32, programInterface int32, name *byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceLocation" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceLocation" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceLocation(program uint32, programInterface int32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceLocation(program uint32, programInterface int32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceLocationIndex" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceLocationIndex" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceLocationIndex(program uint32, programInterface int32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceLocationIndex(program uint32, programInterface int32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceName" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceName" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceName(program uint32, programInterface int32, index uint32, bufSize uint32, length *uint32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceName(program uint32, programInterface int32, index uint32, bufSize uint32, length *uint32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramResourceiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramResourceiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramResourceiv(program uint32, programInterface int32, index uint32, propCount uint32, props *int32, bufSize uint32, length *uint32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramResourceiv(program uint32, programInterface int32, index uint32, propCount uint32, props *int32, bufSize uint32, length *uint32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramStageiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramStageiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramStageiv(program uint32, shadertype int32, pname int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramStageiv(program uint32, shadertype int32, pname int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetProgramiv" class="hdr pkg hdr-method"><a href="#Context.GetProgramiv" title="permalink">»</a>&nbsp;func (c *Context) GetProgramiv(program uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetProgramiv(program uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryIndexediv" class="hdr pkg hdr-method"><a href="#Context.GetQueryIndexediv" title="permalink">»</a>&nbsp;func (c *Context) GetQueryIndexediv(target int32, index uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryIndexediv(target int32, index uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryObjecti64v" class="hdr pkg hdr-method"><a href="#Context.GetQueryObjecti64v" title="permalink">»</a>&nbsp;func (c *Context) GetQueryObjecti64v(id uint32, pname int32, params *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryObjecti64v(id uint32, pname int32, params *int64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryObjectiv" class="hdr pkg hdr-method"><a href="#Context.GetQueryObjectiv" title="permalink">»</a>&nbsp;func (c *Context) GetQueryObjectiv(id uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryObjectiv(id uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryObjectui64v" class="hdr pkg hdr-method"><a href="#Context.GetQueryObjectui64v" title="permalink">»</a>&nbsp;func (c *Context) GetQueryObjectui64v(id uint32, pname int32, params *uint64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryObjectui64v(id uint32, pname int32, params *uint64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryObjectuiv" class="hdr pkg hdr-method"><a href="#Context.GetQueryObjectuiv" title="permalink">»</a>&nbsp;func (c *Context) GetQueryObjectuiv(id uint32, pname int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryObjectuiv(id uint32, pname int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetQueryiv" class="hdr pkg hdr-method"><a href="#Context.GetQueryiv" title="permalink">»</a>&nbsp;func (c *Context) GetQueryiv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetQueryiv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetRenderbufferParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetRenderbufferParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetRenderbufferParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetRenderbufferParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetSamplerParameterIiv" class="hdr pkg hdr-method"><a href="#Context.GetSamplerParameterIiv" title="permalink">»</a>&nbsp;func (c *Context) GetSamplerParameterIiv(sampler uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSamplerParameterIiv(sampler uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetSamplerParameterIuiv" class="hdr pkg hdr-method"><a href="#Context.GetSamplerParameterIuiv" title="permalink">»</a>&nbsp;func (c *Context) GetSamplerParameterIuiv(sampler uint32, pname int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSamplerParameterIuiv(sampler uint32, pname int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetSamplerParameterfv" class="hdr pkg hdr-method"><a href="#Context.GetSamplerParameterfv" title="permalink">»</a>&nbsp;func (c *Context) GetSamplerParameterfv(sampler uint32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSamplerParameterfv(sampler uint32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetSamplerParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetSamplerParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetSamplerParameteriv(sampler uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSamplerParameteriv(sampler uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderInfoLog" class="hdr pkg hdr-method"><a href="#Context.GetShaderInfoLog" title="permalink">»</a>&nbsp;func (c *Context) GetShaderInfoLog(shader uint32, bufSize uint32, length *uint32, infoLog *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderInfoLog(shader uint32, bufSize uint32, length *uint32, infoLog *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderPrecisionFormat" class="hdr pkg hdr-method"><a href="#Context.GetShaderPrecisionFormat" title="permalink">»</a>&nbsp;func (c *Context) GetShaderPrecisionFormat(shadertype int32, precisiontype int32, pRange *int32, precision *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderPrecisionFormat(shadertype int32, precisiontype int32, pRange *int32, precision *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderSource" class="hdr pkg hdr-method"><a href="#Context.GetShaderSource" title="permalink">»</a>&nbsp;func (c *Context) GetShaderSource(shader uint32, bufSize uint32, length *uint32, source *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderSource(shader uint32, bufSize uint32, length *uint32, source *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetShaderiv" class="hdr pkg hdr-method"><a href="#Context.GetShaderiv" title="permalink">»</a>&nbsp;func (c *Context) GetShaderiv(shader uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetShaderiv(shader uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetString" class="hdr pkg hdr-method"><a href="#Context.GetString" title="permalink">»</a>&nbsp;func (c *Context) GetString(name int32) *uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetString(name int32) *uint8</pre>
			
		</span>
	
		
		<h1 id="Context.GetStringi" class="hdr pkg hdr-method"><a href="#Context.GetStringi" title="permalink">»</a>&nbsp;func (c *Context) GetStringi(name int32, index uint32) *uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetStringi(name int32, index uint32) *uint8</pre>
			
		</span>
	
		
		<h1 id="Context.GetSubroutineIndex" class="hdr pkg hdr-method"><a href="#Context.GetSubroutineIndex" title="permalink">»</a>&nbsp;func (c *Context) GetSubroutineIndex(program uint32, shadertype int32, name *byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSubroutineIndex(program uint32, shadertype int32, name *byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.GetSubroutineUniformLocation" class="hdr pkg hdr-method"><a href="#Context.GetSubroutineUniformLocation" title="permalink">»</a>&nbsp;func (c *Context) GetSubroutineUniformLocation(program uint32, shadertype int32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSubroutineUniformLocation(program uint32, shadertype int32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetSynciv" class="hdr pkg hdr-method"><a href="#Context.GetSynciv" title="permalink">»</a>&nbsp;func (c *Context) GetSynciv(sync Sync, pname int32, bufSize uint32, length *uint32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetSynciv(sync Sync, pname int32, bufSize uint32, length *uint32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexEnvfv" class="hdr pkg hdr-method"><a href="#Context.GetTexEnvfv" title="permalink">»</a>&nbsp;func (c *Context) GetTexEnvfv(target int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexEnvfv(target int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexEnviv" class="hdr pkg hdr-method"><a href="#Context.GetTexEnviv" title="permalink">»</a>&nbsp;func (c *Context) GetTexEnviv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexEnviv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexGendv" class="hdr pkg hdr-method"><a href="#Context.GetTexGendv" title="permalink">»</a>&nbsp;func (c *Context) GetTexGendv(coord int32, pname int32, params *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexGendv(coord int32, pname int32, params *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexGenfv" class="hdr pkg hdr-method"><a href="#Context.GetTexGenfv" title="permalink">»</a>&nbsp;func (c *Context) GetTexGenfv(coord int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexGenfv(coord int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexGeniv" class="hdr pkg hdr-method"><a href="#Context.GetTexGeniv" title="permalink">»</a>&nbsp;func (c *Context) GetTexGeniv(coord int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexGeniv(coord int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexImage" class="hdr pkg hdr-method"><a href="#Context.GetTexImage" title="permalink">»</a>&nbsp;func (c *Context) GetTexImage(target int32, level int32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexImage(target int32, level int32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexLevelParameterfv" class="hdr pkg hdr-method"><a href="#Context.GetTexLevelParameterfv" title="permalink">»</a>&nbsp;func (c *Context) GetTexLevelParameterfv(target int32, level int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexLevelParameterfv(target int32, level int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexLevelParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetTexLevelParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetTexLevelParameteriv(target int32, level int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexLevelParameteriv(target int32, level int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexParameterIiv" class="hdr pkg hdr-method"><a href="#Context.GetTexParameterIiv" title="permalink">»</a>&nbsp;func (c *Context) GetTexParameterIiv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexParameterIiv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexParameterIuiv" class="hdr pkg hdr-method"><a href="#Context.GetTexParameterIuiv" title="permalink">»</a>&nbsp;func (c *Context) GetTexParameterIuiv(target int32, pname int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexParameterIuiv(target int32, pname int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexParameterfv" class="hdr pkg hdr-method"><a href="#Context.GetTexParameterfv" title="permalink">»</a>&nbsp;func (c *Context) GetTexParameterfv(target int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexParameterfv(target int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTexParameteriv" class="hdr pkg hdr-method"><a href="#Context.GetTexParameteriv" title="permalink">»</a>&nbsp;func (c *Context) GetTexParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTexParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetTransformFeedbackVarying" class="hdr pkg hdr-method"><a href="#Context.GetTransformFeedbackVarying" title="permalink">»</a>&nbsp;func (c *Context) GetTransformFeedbackVarying(program uint32, index uint32, bufSize uint32, length *uint32, size *uint32, pType *int32, name *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetTransformFeedbackVarying(program uint32, index uint32, bufSize uint32, length *uint32, size *uint32, pType *int32, name *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformBlockIndex" class="hdr pkg hdr-method"><a href="#Context.GetUniformBlockIndex" title="permalink">»</a>&nbsp;func (c *Context) GetUniformBlockIndex(program uint32, uniformBlockName *byte) uint32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformBlockIndex(program uint32, uniformBlockName *byte) uint32</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformIndices" class="hdr pkg hdr-method"><a href="#Context.GetUniformIndices" title="permalink">»</a>&nbsp;func (c *Context) GetUniformIndices(program uint32, uniformCount uint32, uniformNames **byte, uniformIndices *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformIndices(program uint32, uniformCount uint32, uniformNames **byte, uniformIndices *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformLocation" class="hdr pkg hdr-method"><a href="#Context.GetUniformLocation" title="permalink">»</a>&nbsp;func (c *Context) GetUniformLocation(program uint32, name *byte) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformLocation(program uint32, name *byte) int32</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformSubroutineuiv" class="hdr pkg hdr-method"><a href="#Context.GetUniformSubroutineuiv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformSubroutineuiv(shadertype int32, location int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformSubroutineuiv(shadertype int32, location int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformdv" class="hdr pkg hdr-method"><a href="#Context.GetUniformdv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformdv(program uint32, location int32, params *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformdv(program uint32, location int32, params *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformfv" class="hdr pkg hdr-method"><a href="#Context.GetUniformfv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformfv(program uint32, location int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformfv(program uint32, location int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformiv" class="hdr pkg hdr-method"><a href="#Context.GetUniformiv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformiv(program uint32, location int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformiv(program uint32, location int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetUniformuiv" class="hdr pkg hdr-method"><a href="#Context.GetUniformuiv" title="permalink">»</a>&nbsp;func (c *Context) GetUniformuiv(program uint32, location int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetUniformuiv(program uint32, location int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribIiv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribIiv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribIiv(index uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribIiv(index uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribIuiv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribIuiv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribIuiv(index uint32, pname int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribIuiv(index uint32, pname int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribLdv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribLdv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribLdv(index uint32, pname int32, params *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribLdv(index uint32, pname int32, params *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribPointerv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribPointerv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribPointerv(index uint32, pname int32, pointer *unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribPointerv(index uint32, pname int32, pointer *unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribdv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribdv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribdv(index uint32, pname int32, params *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribdv(index uint32, pname int32, params *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribfv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribfv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribfv(index uint32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribfv(index uint32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.GetVertexAttribiv" class="hdr pkg hdr-method"><a href="#Context.GetVertexAttribiv" title="permalink">»</a>&nbsp;func (c *Context) GetVertexAttribiv(index uint32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) GetVertexAttribiv(index uint32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Hint" class="hdr pkg hdr-method"><a href="#Context.Hint" title="permalink">»</a>&nbsp;func (c *Context) Hint(target int32, mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Hint(target int32, mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.IndexMask" class="hdr pkg hdr-method"><a href="#Context.IndexMask" title="permalink">»</a>&nbsp;func (c *Context) IndexMask(mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IndexMask(mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.IndexPointer" class="hdr pkg hdr-method"><a href="#Context.IndexPointer" title="permalink">»</a>&nbsp;func (c *Context) IndexPointer(pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IndexPointer(pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexd" class="hdr pkg hdr-method"><a href="#Context.Indexd" title="permalink">»</a>&nbsp;func (c *Context) Indexd(pC float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexd(pC float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexdv" class="hdr pkg hdr-method"><a href="#Context.Indexdv" title="permalink">»</a>&nbsp;func (c *Context) Indexdv(pC *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexdv(pC *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexf" class="hdr pkg hdr-method"><a href="#Context.Indexf" title="permalink">»</a>&nbsp;func (c *Context) Indexf(pC float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexf(pC float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexfv" class="hdr pkg hdr-method"><a href="#Context.Indexfv" title="permalink">»</a>&nbsp;func (c *Context) Indexfv(pC *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexfv(pC *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexi" class="hdr pkg hdr-method"><a href="#Context.Indexi" title="permalink">»</a>&nbsp;func (c *Context) Indexi(pC int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexi(pC int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexiv" class="hdr pkg hdr-method"><a href="#Context.Indexiv" title="permalink">»</a>&nbsp;func (c *Context) Indexiv(pC *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexiv(pC *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexs" class="hdr pkg hdr-method"><a href="#Context.Indexs" title="permalink">»</a>&nbsp;func (c *Context) Indexs(pC int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexs(pC int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexsv" class="hdr pkg hdr-method"><a href="#Context.Indexsv" title="permalink">»</a>&nbsp;func (c *Context) Indexsv(pC *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexsv(pC *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexub" class="hdr pkg hdr-method"><a href="#Context.Indexub" title="permalink">»</a>&nbsp;func (c *Context) Indexub(pC uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexub(pC uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.Indexubv" class="hdr pkg hdr-method"><a href="#Context.Indexubv" title="permalink">»</a>&nbsp;func (c *Context) Indexubv(pC *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Indexubv(pC *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.InitNames" class="hdr pkg hdr-method"><a href="#Context.InitNames" title="permalink">»</a>&nbsp;func (c *Context) InitNames() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InitNames()</pre>
			
		</span>
	
		
		<h1 id="Context.InterleavedArrays" class="hdr pkg hdr-method"><a href="#Context.InterleavedArrays" title="permalink">»</a>&nbsp;func (c *Context) InterleavedArrays(format int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InterleavedArrays(format int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateBufferData" class="hdr pkg hdr-method"><a href="#Context.InvalidateBufferData" title="permalink">»</a>&nbsp;func (c *Context) InvalidateBufferData(buffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateBufferData(buffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateBufferSubData" class="hdr pkg hdr-method"><a href="#Context.InvalidateBufferSubData" title="permalink">»</a>&nbsp;func (c *Context) InvalidateBufferSubData(buffer uint32, offset uintptr, length uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateBufferSubData(buffer uint32, offset uintptr, length uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateFramebuffer" class="hdr pkg hdr-method"><a href="#Context.InvalidateFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) InvalidateFramebuffer(target int32, numAttachments uint32, attachments *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateFramebuffer(target int32, numAttachments uint32, attachments *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateSubFramebuffer" class="hdr pkg hdr-method"><a href="#Context.InvalidateSubFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) InvalidateSubFramebuffer(target int32, numAttachments uint32, attachments *int32, x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateSubFramebuffer(target int32, numAttachments uint32, attachments *int32, x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateTexImage" class="hdr pkg hdr-method"><a href="#Context.InvalidateTexImage" title="permalink">»</a>&nbsp;func (c *Context) InvalidateTexImage(texture uint32, level int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateTexImage(texture uint32, level int32)</pre>
			
		</span>
	
		
		<h1 id="Context.InvalidateTexSubImage" class="hdr pkg hdr-method"><a href="#Context.InvalidateTexSubImage" title="permalink">»</a>&nbsp;func (c *Context) InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.IsBuffer" class="hdr pkg hdr-method"><a href="#Context.IsBuffer" title="permalink">»</a>&nbsp;func (c *Context) IsBuffer(buffer uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsBuffer(buffer uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsEnabled" class="hdr pkg hdr-method"><a href="#Context.IsEnabled" title="permalink">»</a>&nbsp;func (c *Context) IsEnabled(cap int32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsEnabled(cap int32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsEnabledi" class="hdr pkg hdr-method"><a href="#Context.IsEnabledi" title="permalink">»</a>&nbsp;func (c *Context) IsEnabledi(target int32, index uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsEnabledi(target int32, index uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsFramebuffer" class="hdr pkg hdr-method"><a href="#Context.IsFramebuffer" title="permalink">»</a>&nbsp;func (c *Context) IsFramebuffer(framebuffer uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsFramebuffer(framebuffer uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsList" class="hdr pkg hdr-method"><a href="#Context.IsList" title="permalink">»</a>&nbsp;func (c *Context) IsList(list uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsList(list uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsProgram" class="hdr pkg hdr-method"><a href="#Context.IsProgram" title="permalink">»</a>&nbsp;func (c *Context) IsProgram(program uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsProgram(program uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsProgramPipeline" class="hdr pkg hdr-method"><a href="#Context.IsProgramPipeline" title="permalink">»</a>&nbsp;func (c *Context) IsProgramPipeline(pipeline uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsProgramPipeline(pipeline uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsQuery" class="hdr pkg hdr-method"><a href="#Context.IsQuery" title="permalink">»</a>&nbsp;func (c *Context) IsQuery(id uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsQuery(id uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsRenderbuffer" class="hdr pkg hdr-method"><a href="#Context.IsRenderbuffer" title="permalink">»</a>&nbsp;func (c *Context) IsRenderbuffer(renderbuffer uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsRenderbuffer(renderbuffer uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsSampler" class="hdr pkg hdr-method"><a href="#Context.IsSampler" title="permalink">»</a>&nbsp;func (c *Context) IsSampler(sampler uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsSampler(sampler uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsShader" class="hdr pkg hdr-method"><a href="#Context.IsShader" title="permalink">»</a>&nbsp;func (c *Context) IsShader(shader uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsShader(shader uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsSync" class="hdr pkg hdr-method"><a href="#Context.IsSync" title="permalink">»</a>&nbsp;func (c *Context) IsSync(sync Sync) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsSync(sync Sync) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsTexture" class="hdr pkg hdr-method"><a href="#Context.IsTexture" title="permalink">»</a>&nbsp;func (c *Context) IsTexture(texture uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsTexture(texture uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.IsTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) IsTransformFeedback(id uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsTransformFeedback(id uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.IsVertexArray" class="hdr pkg hdr-method"><a href="#Context.IsVertexArray" title="permalink">»</a>&nbsp;func (c *Context) IsVertexArray(array uint32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) IsVertexArray(array uint32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.LightModelf" class="hdr pkg hdr-method"><a href="#Context.LightModelf" title="permalink">»</a>&nbsp;func (c *Context) LightModelf(pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LightModelf(pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.LightModelfv" class="hdr pkg hdr-method"><a href="#Context.LightModelfv" title="permalink">»</a>&nbsp;func (c *Context) LightModelfv(pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LightModelfv(pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.LightModeli" class="hdr pkg hdr-method"><a href="#Context.LightModeli" title="permalink">»</a>&nbsp;func (c *Context) LightModeli(pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LightModeli(pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.LightModeliv" class="hdr pkg hdr-method"><a href="#Context.LightModeliv" title="permalink">»</a>&nbsp;func (c *Context) LightModeliv(pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LightModeliv(pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Lightf" class="hdr pkg hdr-method"><a href="#Context.Lightf" title="permalink">»</a>&nbsp;func (c *Context) Lightf(light int32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Lightf(light int32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Lightfv" class="hdr pkg hdr-method"><a href="#Context.Lightfv" title="permalink">»</a>&nbsp;func (c *Context) Lightfv(light int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Lightfv(light int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Lighti" class="hdr pkg hdr-method"><a href="#Context.Lighti" title="permalink">»</a>&nbsp;func (c *Context) Lighti(light int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Lighti(light int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Lightiv" class="hdr pkg hdr-method"><a href="#Context.Lightiv" title="permalink">»</a>&nbsp;func (c *Context) Lightiv(light int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Lightiv(light int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.LineStipple" class="hdr pkg hdr-method"><a href="#Context.LineStipple" title="permalink">»</a>&nbsp;func (c *Context) LineStipple(factor int32, pattern uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LineStipple(factor int32, pattern uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.LineWidth" class="hdr pkg hdr-method"><a href="#Context.LineWidth" title="permalink">»</a>&nbsp;func (c *Context) LineWidth(width float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LineWidth(width float32)</pre>
			
		</span>
	
		
		<h1 id="Context.LinkProgram" class="hdr pkg hdr-method"><a href="#Context.LinkProgram" title="permalink">»</a>&nbsp;func (c *Context) LinkProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LinkProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ListBase" class="hdr pkg hdr-method"><a href="#Context.ListBase" title="permalink">»</a>&nbsp;func (c *Context) ListBase(base uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ListBase(base uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.LoadIdentity" class="hdr pkg hdr-method"><a href="#Context.LoadIdentity" title="permalink">»</a>&nbsp;func (c *Context) LoadIdentity() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LoadIdentity()</pre>
			
		</span>
	
		
		<h1 id="Context.LoadMatrixd" class="hdr pkg hdr-method"><a href="#Context.LoadMatrixd" title="permalink">»</a>&nbsp;func (c *Context) LoadMatrixd(m *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LoadMatrixd(m *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.LoadMatrixf" class="hdr pkg hdr-method"><a href="#Context.LoadMatrixf" title="permalink">»</a>&nbsp;func (c *Context) LoadMatrixf(m *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LoadMatrixf(m *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.LoadName" class="hdr pkg hdr-method"><a href="#Context.LoadName" title="permalink">»</a>&nbsp;func (c *Context) LoadName(name uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LoadName(name uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.LoadTransposeMatrixd" class="hdr pkg hdr-method"><a href="#Context.LoadTransposeMatrixd" title="permalink">»</a>&nbsp;func (c *Context) LoadTransposeMatrixd(m *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LoadTransposeMatrixd(m *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.LoadTransposeMatrixf" class="hdr pkg hdr-method"><a href="#Context.LoadTransposeMatrixf" title="permalink">»</a>&nbsp;func (c *Context) LoadTransposeMatrixf(m *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LoadTransposeMatrixf(m *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.LogicOp" class="hdr pkg hdr-method"><a href="#Context.LogicOp" title="permalink">»</a>&nbsp;func (c *Context) LogicOp(opcode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) LogicOp(opcode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Map1d" class="hdr pkg hdr-method"><a href="#Context.Map1d" title="permalink">»</a>&nbsp;func (c *Context) Map1d(target int32, u1 float64, u2 float64, stride int32, order int32, points *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Map1d(target int32, u1 float64, u2 float64, stride int32, order int32, points *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Map1f" class="hdr pkg hdr-method"><a href="#Context.Map1f" title="permalink">»</a>&nbsp;func (c *Context) Map1f(target int32, u1 float32, u2 float32, stride int32, order int32, points *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Map1f(target int32, u1 float32, u2 float32, stride int32, order int32, points *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Map2d" class="hdr pkg hdr-method"><a href="#Context.Map2d" title="permalink">»</a>&nbsp;func (c *Context) Map2d(target int32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Map2d(target int32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Map2f" class="hdr pkg hdr-method"><a href="#Context.Map2f" title="permalink">»</a>&nbsp;func (c *Context) Map2f(target int32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Map2f(target int32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MapBuffer" class="hdr pkg hdr-method"><a href="#Context.MapBuffer" title="permalink">»</a>&nbsp;func (c *Context) MapBuffer(target int32, access int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MapBuffer(target int32, access int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MapBufferRange" class="hdr pkg hdr-method"><a href="#Context.MapBufferRange" title="permalink">»</a>&nbsp;func (c *Context) MapBufferRange(target int32, offset uintptr, length uintptr, access uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MapBufferRange(target int32, offset uintptr, length uintptr, access uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MapGrid1d" class="hdr pkg hdr-method"><a href="#Context.MapGrid1d" title="permalink">»</a>&nbsp;func (c *Context) MapGrid1d(un int32, u1 float64, u2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MapGrid1d(un int32, u1 float64, u2 float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MapGrid1f" class="hdr pkg hdr-method"><a href="#Context.MapGrid1f" title="permalink">»</a>&nbsp;func (c *Context) MapGrid1f(un int32, u1 float32, u2 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MapGrid1f(un int32, u1 float32, u2 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MapGrid2d" class="hdr pkg hdr-method"><a href="#Context.MapGrid2d" title="permalink">»</a>&nbsp;func (c *Context) MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MapGrid2d(un int32, u1 float64, u2 float64, vn int32, v1 float64, v2 float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MapGrid2f" class="hdr pkg hdr-method"><a href="#Context.MapGrid2f" title="permalink">»</a>&nbsp;func (c *Context) MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MapGrid2f(un int32, u1 float32, u2 float32, vn int32, v1 float32, v2 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Materialf" class="hdr pkg hdr-method"><a href="#Context.Materialf" title="permalink">»</a>&nbsp;func (c *Context) Materialf(face int32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Materialf(face int32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Materialfv" class="hdr pkg hdr-method"><a href="#Context.Materialfv" title="permalink">»</a>&nbsp;func (c *Context) Materialfv(face int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Materialfv(face int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Materiali" class="hdr pkg hdr-method"><a href="#Context.Materiali" title="permalink">»</a>&nbsp;func (c *Context) Materiali(face int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Materiali(face int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Materialiv" class="hdr pkg hdr-method"><a href="#Context.Materialiv" title="permalink">»</a>&nbsp;func (c *Context) Materialiv(face int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Materialiv(face int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MatrixMode" class="hdr pkg hdr-method"><a href="#Context.MatrixMode" title="permalink">»</a>&nbsp;func (c *Context) MatrixMode(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MatrixMode(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MemoryBarrier" class="hdr pkg hdr-method"><a href="#Context.MemoryBarrier" title="permalink">»</a>&nbsp;func (c *Context) MemoryBarrier(barriers uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MemoryBarrier(barriers uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MinSampleShading" class="hdr pkg hdr-method"><a href="#Context.MinSampleShading" title="permalink">»</a>&nbsp;func (c *Context) MinSampleShading(value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MinSampleShading(value float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultMatrixd" class="hdr pkg hdr-method"><a href="#Context.MultMatrixd" title="permalink">»</a>&nbsp;func (c *Context) MultMatrixd(m *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultMatrixd(m *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultMatrixf" class="hdr pkg hdr-method"><a href="#Context.MultMatrixf" title="permalink">»</a>&nbsp;func (c *Context) MultMatrixf(m *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultMatrixf(m *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultTransposeMatrixd" class="hdr pkg hdr-method"><a href="#Context.MultTransposeMatrixd" title="permalink">»</a>&nbsp;func (c *Context) MultTransposeMatrixd(m *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultTransposeMatrixd(m *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultTransposeMatrixf" class="hdr pkg hdr-method"><a href="#Context.MultTransposeMatrixf" title="permalink">»</a>&nbsp;func (c *Context) MultTransposeMatrixf(m *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultTransposeMatrixf(m *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiDrawArrays" class="hdr pkg hdr-method"><a href="#Context.MultiDrawArrays" title="permalink">»</a>&nbsp;func (c *Context) MultiDrawArrays(mode int32, first *int32, count *uint32, drawcount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiDrawArrays(mode int32, first *int32, count *uint32, drawcount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiDrawArraysIndirect" class="hdr pkg hdr-method"><a href="#Context.MultiDrawArraysIndirect" title="permalink">»</a>&nbsp;func (c *Context) MultiDrawArraysIndirect(mode int32, indirect unsafe.Pointer, drawcount uint32, stride uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiDrawArraysIndirect(mode int32, indirect unsafe.Pointer, drawcount uint32, stride uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiDrawElements" class="hdr pkg hdr-method"><a href="#Context.MultiDrawElements" title="permalink">»</a>&nbsp;func (c *Context) MultiDrawElements(mode int32, count *uint32, pType int32, indices *unsafe.Pointer, drawcount uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiDrawElements(mode int32, count *uint32, pType int32, indices *unsafe.Pointer, drawcount uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiDrawElementsBaseVertex" class="hdr pkg hdr-method"><a href="#Context.MultiDrawElementsBaseVertex" title="permalink">»</a>&nbsp;func (c *Context) MultiDrawElementsBaseVertex(mode int32, count *uint32, pType int32, indices *unsafe.Pointer, drawcount uint32, basevertex *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiDrawElementsBaseVertex(mode int32, count *uint32, pType int32, indices *unsafe.Pointer, drawcount uint32, basevertex *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiDrawElementsIndirect" class="hdr pkg hdr-method"><a href="#Context.MultiDrawElementsIndirect" title="permalink">»</a>&nbsp;func (c *Context) MultiDrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer, drawcount uint32, stride uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiDrawElementsIndirect(mode int32, pType int32, indirect unsafe.Pointer, drawcount uint32, stride uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1d" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1d" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1d(target int32, s float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1d(target int32, s float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1dv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1dv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1dv(target int32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1dv(target int32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1f" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1f" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1f(target int32, s float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1f(target int32, s float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1fv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1fv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1fv(target int32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1fv(target int32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1i" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1i" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1i(target int32, s int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1i(target int32, s int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1iv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1iv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1iv(target int32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1iv(target int32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1s" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1s" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1s(target int32, s int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1s(target int32, s int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord1sv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord1sv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord1sv(target int32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord1sv(target int32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2d" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2d" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2d(target int32, s float64, t float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2d(target int32, s float64, t float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2dv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2dv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2dv(target int32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2dv(target int32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2f" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2f" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2f(target int32, s float32, t float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2f(target int32, s float32, t float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2fv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2fv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2fv(target int32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2fv(target int32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2i" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2i" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2i(target int32, s int32, t int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2i(target int32, s int32, t int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2iv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2iv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2iv(target int32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2iv(target int32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2s" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2s" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2s(target int32, s int16, t int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2s(target int32, s int16, t int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord2sv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord2sv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord2sv(target int32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord2sv(target int32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3d" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3d" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3d(target int32, s float64, t float64, r float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3d(target int32, s float64, t float64, r float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3dv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3dv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3dv(target int32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3dv(target int32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3f" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3f" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3f(target int32, s float32, t float32, r float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3f(target int32, s float32, t float32, r float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3fv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3fv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3fv(target int32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3fv(target int32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3i" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3i" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3i(target int32, s int32, t int32, r int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3i(target int32, s int32, t int32, r int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3iv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3iv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3iv(target int32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3iv(target int32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3s" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3s" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3s(target int32, s int16, t int16, r int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3s(target int32, s int16, t int16, r int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord3sv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord3sv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord3sv(target int32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord3sv(target int32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4d" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4d" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4d(target int32, s float64, t float64, r float64, q float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4d(target int32, s float64, t float64, r float64, q float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4dv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4dv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4dv(target int32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4dv(target int32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4f" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4f" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4f(target int32, s float32, t float32, r float32, q float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4f(target int32, s float32, t float32, r float32, q float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4fv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4fv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4fv(target int32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4fv(target int32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4i" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4i" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4i(target int32, s int32, t int32, r int32, q int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4i(target int32, s int32, t int32, r int32, q int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4iv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4iv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4iv(target int32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4iv(target int32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4s" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4s" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4s(target int32, s int16, t int16, r int16, q int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4s(target int32, s int16, t int16, r int16, q int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoord4sv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoord4sv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoord4sv(target int32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoord4sv(target int32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP1ui" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP1ui" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP1ui(texture int32, pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP1ui(texture int32, pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP1uiv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP1uiv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP1uiv(texture int32, pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP1uiv(texture int32, pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP2ui" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP2ui" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP2ui(texture int32, pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP2ui(texture int32, pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP2uiv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP2uiv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP2uiv(texture int32, pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP2uiv(texture int32, pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP3ui" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP3ui" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP3ui(texture int32, pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP3ui(texture int32, pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP3uiv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP3uiv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP3uiv(texture int32, pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP3uiv(texture int32, pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP4ui" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP4ui" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP4ui(texture int32, pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP4ui(texture int32, pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.MultiTexCoordP4uiv" class="hdr pkg hdr-method"><a href="#Context.MultiTexCoordP4uiv" title="permalink">»</a>&nbsp;func (c *Context) MultiTexCoordP4uiv(texture int32, pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) MultiTexCoordP4uiv(texture int32, pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.NewList" class="hdr pkg hdr-method"><a href="#Context.NewList" title="permalink">»</a>&nbsp;func (c *Context) NewList(list uint32, mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) NewList(list uint32, mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3b" class="hdr pkg hdr-method"><a href="#Context.Normal3b" title="permalink">»</a>&nbsp;func (c *Context) Normal3b(nx byte, ny byte, nz byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3b(nx byte, ny byte, nz byte)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3bv" class="hdr pkg hdr-method"><a href="#Context.Normal3bv" title="permalink">»</a>&nbsp;func (c *Context) Normal3bv(v *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3bv(v *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3d" class="hdr pkg hdr-method"><a href="#Context.Normal3d" title="permalink">»</a>&nbsp;func (c *Context) Normal3d(nx float64, ny float64, nz float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3d(nx float64, ny float64, nz float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3dv" class="hdr pkg hdr-method"><a href="#Context.Normal3dv" title="permalink">»</a>&nbsp;func (c *Context) Normal3dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3f" class="hdr pkg hdr-method"><a href="#Context.Normal3f" title="permalink">»</a>&nbsp;func (c *Context) Normal3f(nx float32, ny float32, nz float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3f(nx float32, ny float32, nz float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3fv" class="hdr pkg hdr-method"><a href="#Context.Normal3fv" title="permalink">»</a>&nbsp;func (c *Context) Normal3fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3i" class="hdr pkg hdr-method"><a href="#Context.Normal3i" title="permalink">»</a>&nbsp;func (c *Context) Normal3i(nx int32, ny int32, nz int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3i(nx int32, ny int32, nz int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3iv" class="hdr pkg hdr-method"><a href="#Context.Normal3iv" title="permalink">»</a>&nbsp;func (c *Context) Normal3iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3s" class="hdr pkg hdr-method"><a href="#Context.Normal3s" title="permalink">»</a>&nbsp;func (c *Context) Normal3s(nx int16, ny int16, nz int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3s(nx int16, ny int16, nz int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Normal3sv" class="hdr pkg hdr-method"><a href="#Context.Normal3sv" title="permalink">»</a>&nbsp;func (c *Context) Normal3sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Normal3sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.NormalP3ui" class="hdr pkg hdr-method"><a href="#Context.NormalP3ui" title="permalink">»</a>&nbsp;func (c *Context) NormalP3ui(pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) NormalP3ui(pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.NormalP3uiv" class="hdr pkg hdr-method"><a href="#Context.NormalP3uiv" title="permalink">»</a>&nbsp;func (c *Context) NormalP3uiv(pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) NormalP3uiv(pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.NormalPointer" class="hdr pkg hdr-method"><a href="#Context.NormalPointer" title="permalink">»</a>&nbsp;func (c *Context) NormalPointer(pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) NormalPointer(pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.ObjectLabel" class="hdr pkg hdr-method"><a href="#Context.ObjectLabel" title="permalink">»</a>&nbsp;func (c *Context) ObjectLabel(identifier int32, name uint32, length uint32, label *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ObjectLabel(identifier int32, name uint32, length uint32, label *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.ObjectPtrLabel" class="hdr pkg hdr-method"><a href="#Context.ObjectPtrLabel" title="permalink">»</a>&nbsp;func (c *Context) ObjectPtrLabel(ptr unsafe.Pointer, length uint32, label *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ObjectPtrLabel(ptr unsafe.Pointer, length uint32, label *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.Ortho" class="hdr pkg hdr-method"><a href="#Context.Ortho" title="permalink">»</a>&nbsp;func (c *Context) Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Ortho(left float64, right float64, bottom float64, top float64, zNear float64, zFar float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Panic" class="hdr pkg hdr-method"><a href="#Context.Panic" title="permalink">»</a>&nbsp;func (c *Context) Panic(err string) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Panic(err string)</pre>
			<p>
Panic causes a Go panic with the err string and also dumps the OpenGL stack
before the panic.
</p>
<p>
This function is only defined if the application is compiled with the
&#34;opengl_debug&#34; build tag.
</p>

		</span>
	
		
		<h1 id="Context.PassThrough" class="hdr pkg hdr-method"><a href="#Context.PassThrough" title="permalink">»</a>&nbsp;func (c *Context) PassThrough(token float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PassThrough(token float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PatchParameterfv" class="hdr pkg hdr-method"><a href="#Context.PatchParameterfv" title="permalink">»</a>&nbsp;func (c *Context) PatchParameterfv(pname int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PatchParameterfv(pname int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PatchParameteri" class="hdr pkg hdr-method"><a href="#Context.PatchParameteri" title="permalink">»</a>&nbsp;func (c *Context) PatchParameteri(pname int32, value int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PatchParameteri(pname int32, value int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PauseTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.PauseTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) PauseTransformFeedback() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PauseTransformFeedback()</pre>
			
		</span>
	
		
		<h1 id="Context.PixelMapfv" class="hdr pkg hdr-method"><a href="#Context.PixelMapfv" title="permalink">»</a>&nbsp;func (c *Context) PixelMapfv(pMap int32, mapsize uint32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelMapfv(pMap int32, mapsize uint32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PixelMapuiv" class="hdr pkg hdr-method"><a href="#Context.PixelMapuiv" title="permalink">»</a>&nbsp;func (c *Context) PixelMapuiv(pMap int32, mapsize uint32, values *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelMapuiv(pMap int32, mapsize uint32, values *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.PixelMapusv" class="hdr pkg hdr-method"><a href="#Context.PixelMapusv" title="permalink">»</a>&nbsp;func (c *Context) PixelMapusv(pMap int32, mapsize uint32, values *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelMapusv(pMap int32, mapsize uint32, values *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.PixelStoref" class="hdr pkg hdr-method"><a href="#Context.PixelStoref" title="permalink">»</a>&nbsp;func (c *Context) PixelStoref(pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelStoref(pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PixelStorei" class="hdr pkg hdr-method"><a href="#Context.PixelStorei" title="permalink">»</a>&nbsp;func (c *Context) PixelStorei(pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelStorei(pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PixelTransferf" class="hdr pkg hdr-method"><a href="#Context.PixelTransferf" title="permalink">»</a>&nbsp;func (c *Context) PixelTransferf(pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelTransferf(pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PixelTransferi" class="hdr pkg hdr-method"><a href="#Context.PixelTransferi" title="permalink">»</a>&nbsp;func (c *Context) PixelTransferi(pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelTransferi(pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PixelZoom" class="hdr pkg hdr-method"><a href="#Context.PixelZoom" title="permalink">»</a>&nbsp;func (c *Context) PixelZoom(xfactor float32, yfactor float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PixelZoom(xfactor float32, yfactor float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PointParameterf" class="hdr pkg hdr-method"><a href="#Context.PointParameterf" title="permalink">»</a>&nbsp;func (c *Context) PointParameterf(pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PointParameterf(pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PointParameterfv" class="hdr pkg hdr-method"><a href="#Context.PointParameterfv" title="permalink">»</a>&nbsp;func (c *Context) PointParameterfv(pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PointParameterfv(pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PointParameteri" class="hdr pkg hdr-method"><a href="#Context.PointParameteri" title="permalink">»</a>&nbsp;func (c *Context) PointParameteri(pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PointParameteri(pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PointParameteriv" class="hdr pkg hdr-method"><a href="#Context.PointParameteriv" title="permalink">»</a>&nbsp;func (c *Context) PointParameteriv(pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PointParameteriv(pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PointSize" class="hdr pkg hdr-method"><a href="#Context.PointSize" title="permalink">»</a>&nbsp;func (c *Context) PointSize(size float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PointSize(size float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PolygonMode" class="hdr pkg hdr-method"><a href="#Context.PolygonMode" title="permalink">»</a>&nbsp;func (c *Context) PolygonMode(face int32, mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PolygonMode(face int32, mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PolygonOffset" class="hdr pkg hdr-method"><a href="#Context.PolygonOffset" title="permalink">»</a>&nbsp;func (c *Context) PolygonOffset(factor float32, units float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PolygonOffset(factor float32, units float32)</pre>
			
		</span>
	
		
		<h1 id="Context.PolygonStipple" class="hdr pkg hdr-method"><a href="#Context.PolygonStipple" title="permalink">»</a>&nbsp;func (c *Context) PolygonStipple(mask *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PolygonStipple(mask *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.PopAttrib" class="hdr pkg hdr-method"><a href="#Context.PopAttrib" title="permalink">»</a>&nbsp;func (c *Context) PopAttrib() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PopAttrib()</pre>
			
		</span>
	
		
		<h1 id="Context.PopClientAttrib" class="hdr pkg hdr-method"><a href="#Context.PopClientAttrib" title="permalink">»</a>&nbsp;func (c *Context) PopClientAttrib() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PopClientAttrib()</pre>
			
		</span>
	
		
		<h1 id="Context.PopDebugGroup" class="hdr pkg hdr-method"><a href="#Context.PopDebugGroup" title="permalink">»</a>&nbsp;func (c *Context) PopDebugGroup() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PopDebugGroup()</pre>
			
		</span>
	
		
		<h1 id="Context.PopMatrix" class="hdr pkg hdr-method"><a href="#Context.PopMatrix" title="permalink">»</a>&nbsp;func (c *Context) PopMatrix() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PopMatrix()</pre>
			
		</span>
	
		
		<h1 id="Context.PopName" class="hdr pkg hdr-method"><a href="#Context.PopName" title="permalink">»</a>&nbsp;func (c *Context) PopName() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PopName()</pre>
			
		</span>
	
		
		<h1 id="Context.PrimitiveRestartIndex" class="hdr pkg hdr-method"><a href="#Context.PrimitiveRestartIndex" title="permalink">»</a>&nbsp;func (c *Context) PrimitiveRestartIndex(index uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PrimitiveRestartIndex(index uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.PrioritizeTextures" class="hdr pkg hdr-method"><a href="#Context.PrioritizeTextures" title="permalink">»</a>&nbsp;func (c *Context) PrioritizeTextures(n uint32, textures *uint32, priorities *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PrioritizeTextures(n uint32, textures *uint32, priorities *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramBinary" class="hdr pkg hdr-method"><a href="#Context.ProgramBinary" title="permalink">»</a>&nbsp;func (c *Context) ProgramBinary(program uint32, binaryFormat int32, binary unsafe.Pointer, length uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramBinary(program uint32, binaryFormat int32, binary unsafe.Pointer, length uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramParameteri" class="hdr pkg hdr-method"><a href="#Context.ProgramParameteri" title="permalink">»</a>&nbsp;func (c *Context) ProgramParameteri(program uint32, pname int32, value int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramParameteri(program uint32, pname int32, value int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1d" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1d" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1d(program uint32, location int32, v0 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1d(program uint32, location int32, v0 float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1dv(program uint32, location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1dv(program uint32, location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1f(program uint32, location int32, v0 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1f(program uint32, location int32, v0 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1i(program uint32, location int32, v0 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1i(program uint32, location int32, v0 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1ui(program uint32, location int32, v0 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1ui(program uint32, location int32, v0 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform1uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform1uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform1uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform1uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2d" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2d" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2dv(program uint32, location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2dv(program uint32, location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform2uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform2uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform2uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform2uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3d" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3d" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3dv(program uint32, location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3dv(program uint32, location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform3uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform3uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform3uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform3uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4d" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4d" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4dv(program uint32, location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4dv(program uint32, location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4f" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4f" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4fv(program uint32, location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4fv(program uint32, location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4i" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4i" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4iv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4iv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4iv(program uint32, location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4iv(program uint32, location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4ui" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4ui" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniform4uiv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniform4uiv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniform4uiv(program uint32, location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniform4uiv(program uint32, location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2x3dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2x3dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2x3dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2x3dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2x3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2x3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2x4dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2x4dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2x4dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2x4dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix2x4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix2x4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix2x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix2x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3x2dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3x2dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3x2dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3x2dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3x2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3x2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3x4dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3x4dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3x4dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3x4dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix3x4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix3x4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix3x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix3x4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4x2dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4x2dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4x2dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4x2dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4x2fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4x2fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4x2fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4x3dv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4x3dv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4x3dv(program uint32, location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4x3dv(program uint32, location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.ProgramUniformMatrix4x3fv" class="hdr pkg hdr-method"><a href="#Context.ProgramUniformMatrix4x3fv" title="permalink">»</a>&nbsp;func (c *Context) ProgramUniformMatrix4x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProgramUniformMatrix4x3fv(program uint32, location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ProvokingVertex" class="hdr pkg hdr-method"><a href="#Context.ProvokingVertex" title="permalink">»</a>&nbsp;func (c *Context) ProvokingVertex(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ProvokingVertex(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.PushAttrib" class="hdr pkg hdr-method"><a href="#Context.PushAttrib" title="permalink">»</a>&nbsp;func (c *Context) PushAttrib(mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PushAttrib(mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.PushClientAttrib" class="hdr pkg hdr-method"><a href="#Context.PushClientAttrib" title="permalink">»</a>&nbsp;func (c *Context) PushClientAttrib(mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PushClientAttrib(mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.PushDebugGroup" class="hdr pkg hdr-method"><a href="#Context.PushDebugGroup" title="permalink">»</a>&nbsp;func (c *Context) PushDebugGroup(source int32, id uint32, length uint32, message *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PushDebugGroup(source int32, id uint32, length uint32, message *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.PushMatrix" class="hdr pkg hdr-method"><a href="#Context.PushMatrix" title="permalink">»</a>&nbsp;func (c *Context) PushMatrix() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PushMatrix()</pre>
			
		</span>
	
		
		<h1 id="Context.PushName" class="hdr pkg hdr-method"><a href="#Context.PushName" title="permalink">»</a>&nbsp;func (c *Context) PushName(name uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) PushName(name uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.QueryCounter" class="hdr pkg hdr-method"><a href="#Context.QueryCounter" title="permalink">»</a>&nbsp;func (c *Context) QueryCounter(id uint32, target int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) QueryCounter(id uint32, target int32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2d" class="hdr pkg hdr-method"><a href="#Context.RasterPos2d" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2d(x float64, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2d(x float64, y float64)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2dv" class="hdr pkg hdr-method"><a href="#Context.RasterPos2dv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2f" class="hdr pkg hdr-method"><a href="#Context.RasterPos2f" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2f(x float32, y float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2f(x float32, y float32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2fv" class="hdr pkg hdr-method"><a href="#Context.RasterPos2fv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2i" class="hdr pkg hdr-method"><a href="#Context.RasterPos2i" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2i(x int32, y int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2i(x int32, y int32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2iv" class="hdr pkg hdr-method"><a href="#Context.RasterPos2iv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2s" class="hdr pkg hdr-method"><a href="#Context.RasterPos2s" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2s(x int16, y int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2s(x int16, y int16)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos2sv" class="hdr pkg hdr-method"><a href="#Context.RasterPos2sv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos2sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos2sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3d" class="hdr pkg hdr-method"><a href="#Context.RasterPos3d" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3d(x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3d(x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3dv" class="hdr pkg hdr-method"><a href="#Context.RasterPos3dv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3f" class="hdr pkg hdr-method"><a href="#Context.RasterPos3f" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3f(x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3f(x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3fv" class="hdr pkg hdr-method"><a href="#Context.RasterPos3fv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3i" class="hdr pkg hdr-method"><a href="#Context.RasterPos3i" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3i(x int32, y int32, z int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3i(x int32, y int32, z int32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3iv" class="hdr pkg hdr-method"><a href="#Context.RasterPos3iv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3s" class="hdr pkg hdr-method"><a href="#Context.RasterPos3s" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3s(x int16, y int16, z int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3s(x int16, y int16, z int16)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos3sv" class="hdr pkg hdr-method"><a href="#Context.RasterPos3sv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos3sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos3sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4d" class="hdr pkg hdr-method"><a href="#Context.RasterPos4d" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4d(x float64, y float64, z float64, w float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4d(x float64, y float64, z float64, w float64)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4dv" class="hdr pkg hdr-method"><a href="#Context.RasterPos4dv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4f" class="hdr pkg hdr-method"><a href="#Context.RasterPos4f" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4f(x float32, y float32, z float32, w float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4f(x float32, y float32, z float32, w float32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4fv" class="hdr pkg hdr-method"><a href="#Context.RasterPos4fv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4i" class="hdr pkg hdr-method"><a href="#Context.RasterPos4i" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4i(x int32, y int32, z int32, w int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4i(x int32, y int32, z int32, w int32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4iv" class="hdr pkg hdr-method"><a href="#Context.RasterPos4iv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4s" class="hdr pkg hdr-method"><a href="#Context.RasterPos4s" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4s(x int16, y int16, z int16, w int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4s(x int16, y int16, z int16, w int16)</pre>
			
		</span>
	
		
		<h1 id="Context.RasterPos4sv" class="hdr pkg hdr-method"><a href="#Context.RasterPos4sv" title="permalink">»</a>&nbsp;func (c *Context) RasterPos4sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RasterPos4sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.ReadBuffer" class="hdr pkg hdr-method"><a href="#Context.ReadBuffer" title="permalink">»</a>&nbsp;func (c *Context) ReadBuffer(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ReadBuffer(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ReadPixels" class="hdr pkg hdr-method"><a href="#Context.ReadPixels" title="permalink">»</a>&nbsp;func (c *Context) ReadPixels(x int32, y int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ReadPixels(x int32, y int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.Rectd" class="hdr pkg hdr-method"><a href="#Context.Rectd" title="permalink">»</a>&nbsp;func (c *Context) Rectd(x1 float64, y1 float64, x2 float64, y2 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rectd(x1 float64, y1 float64, x2 float64, y2 float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Rectdv" class="hdr pkg hdr-method"><a href="#Context.Rectdv" title="permalink">»</a>&nbsp;func (c *Context) Rectdv(v1 *float64, v2 *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rectdv(v1 *float64, v2 *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Rectf" class="hdr pkg hdr-method"><a href="#Context.Rectf" title="permalink">»</a>&nbsp;func (c *Context) Rectf(x1 float32, y1 float32, x2 float32, y2 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rectf(x1 float32, y1 float32, x2 float32, y2 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Rectfv" class="hdr pkg hdr-method"><a href="#Context.Rectfv" title="permalink">»</a>&nbsp;func (c *Context) Rectfv(v1 *float32, v2 *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rectfv(v1 *float32, v2 *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Recti" class="hdr pkg hdr-method"><a href="#Context.Recti" title="permalink">»</a>&nbsp;func (c *Context) Recti(x1 int32, y1 int32, x2 int32, y2 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Recti(x1 int32, y1 int32, x2 int32, y2 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Rectiv" class="hdr pkg hdr-method"><a href="#Context.Rectiv" title="permalink">»</a>&nbsp;func (c *Context) Rectiv(v1 *int32, v2 *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rectiv(v1 *int32, v2 *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Rects" class="hdr pkg hdr-method"><a href="#Context.Rects" title="permalink">»</a>&nbsp;func (c *Context) Rects(x1 int16, y1 int16, x2 int16, y2 int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rects(x1 int16, y1 int16, x2 int16, y2 int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Rectsv" class="hdr pkg hdr-method"><a href="#Context.Rectsv" title="permalink">»</a>&nbsp;func (c *Context) Rectsv(v1 *int16, v2 *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rectsv(v1 *int16, v2 *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.ReleaseShaderCompiler" class="hdr pkg hdr-method"><a href="#Context.ReleaseShaderCompiler" title="permalink">»</a>&nbsp;func (c *Context) ReleaseShaderCompiler() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ReleaseShaderCompiler()</pre>
			
		</span>
	
		
		<h1 id="Context.RenderMode" class="hdr pkg hdr-method"><a href="#Context.RenderMode" title="permalink">»</a>&nbsp;func (c *Context) RenderMode(mode int32) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RenderMode(mode int32) int32</pre>
			
		</span>
	
		
		<h1 id="Context.RenderbufferStorage" class="hdr pkg hdr-method"><a href="#Context.RenderbufferStorage" title="permalink">»</a>&nbsp;func (c *Context) RenderbufferStorage(target int32, internalformat int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RenderbufferStorage(target int32, internalformat int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.RenderbufferStorageMultisample" class="hdr pkg hdr-method"><a href="#Context.RenderbufferStorageMultisample" title="permalink">»</a>&nbsp;func (c *Context) RenderbufferStorageMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) RenderbufferStorageMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ResumeTransformFeedback" class="hdr pkg hdr-method"><a href="#Context.ResumeTransformFeedback" title="permalink">»</a>&nbsp;func (c *Context) ResumeTransformFeedback() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ResumeTransformFeedback()</pre>
			
		</span>
	
		
		<h1 id="Context.Rotated" class="hdr pkg hdr-method"><a href="#Context.Rotated" title="permalink">»</a>&nbsp;func (c *Context) Rotated(angle float64, x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rotated(angle float64, x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Rotatef" class="hdr pkg hdr-method"><a href="#Context.Rotatef" title="permalink">»</a>&nbsp;func (c *Context) Rotatef(angle float32, x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Rotatef(angle float32, x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.SampleCoverage" class="hdr pkg hdr-method"><a href="#Context.SampleCoverage" title="permalink">»</a>&nbsp;func (c *Context) SampleCoverage(value float32, invert uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SampleCoverage(value float32, invert uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.SampleMaski" class="hdr pkg hdr-method"><a href="#Context.SampleMaski" title="permalink">»</a>&nbsp;func (c *Context) SampleMaski(maskNumber uint32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SampleMaski(maskNumber uint32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameterIiv" class="hdr pkg hdr-method"><a href="#Context.SamplerParameterIiv" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameterIiv(sampler uint32, pname int32, param *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameterIiv(sampler uint32, pname int32, param *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameterIuiv" class="hdr pkg hdr-method"><a href="#Context.SamplerParameterIuiv" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameterIuiv(sampler uint32, pname int32, param *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameterIuiv(sampler uint32, pname int32, param *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameterf" class="hdr pkg hdr-method"><a href="#Context.SamplerParameterf" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameterf(sampler uint32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameterf(sampler uint32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameterfv" class="hdr pkg hdr-method"><a href="#Context.SamplerParameterfv" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameterfv(sampler uint32, pname int32, param *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameterfv(sampler uint32, pname int32, param *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameteri" class="hdr pkg hdr-method"><a href="#Context.SamplerParameteri" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameteri(sampler uint32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameteri(sampler uint32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.SamplerParameteriv" class="hdr pkg hdr-method"><a href="#Context.SamplerParameteriv" title="permalink">»</a>&nbsp;func (c *Context) SamplerParameteriv(sampler uint32, pname int32, param *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SamplerParameteriv(sampler uint32, pname int32, param *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Scaled" class="hdr pkg hdr-method"><a href="#Context.Scaled" title="permalink">»</a>&nbsp;func (c *Context) Scaled(x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Scaled(x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Scalef" class="hdr pkg hdr-method"><a href="#Context.Scalef" title="permalink">»</a>&nbsp;func (c *Context) Scalef(x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Scalef(x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Scissor" class="hdr pkg hdr-method"><a href="#Context.Scissor" title="permalink">»</a>&nbsp;func (c *Context) Scissor(x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Scissor(x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ScissorArrayv" class="hdr pkg hdr-method"><a href="#Context.ScissorArrayv" title="permalink">»</a>&nbsp;func (c *Context) ScissorArrayv(first uint32, count uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ScissorArrayv(first uint32, count uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ScissorIndexed" class="hdr pkg hdr-method"><a href="#Context.ScissorIndexed" title="permalink">»</a>&nbsp;func (c *Context) ScissorIndexed(index uint32, left int32, bottom int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ScissorIndexed(index uint32, left int32, bottom int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ScissorIndexedv" class="hdr pkg hdr-method"><a href="#Context.ScissorIndexedv" title="permalink">»</a>&nbsp;func (c *Context) ScissorIndexedv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ScissorIndexedv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3b" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3b" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3b(red byte, green byte, blue byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3b(red byte, green byte, blue byte)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3bv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3bv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3bv(v *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3bv(v *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3d" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3d" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3d(red float64, green float64, blue float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3d(red float64, green float64, blue float64)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3dv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3dv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3f" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3f" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3f(red float32, green float32, blue float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3f(red float32, green float32, blue float32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3fv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3fv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3i" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3i" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3i(red int32, green int32, blue int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3i(red int32, green int32, blue int32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3iv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3iv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3s" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3s" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3s(red int16, green int16, blue int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3s(red int16, green int16, blue int16)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3sv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3sv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3ub" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3ub" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3ub(red uint8, green uint8, blue uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3ub(red uint8, green uint8, blue uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3ubv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3ubv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3ubv(v *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3ubv(v *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3ui" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3ui" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3ui(red uint32, green uint32, blue uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3ui(red uint32, green uint32, blue uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3uiv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3uiv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3uiv(v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3uiv(v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3us" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3us" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3us(red uint16, green uint16, blue uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3us(red uint16, green uint16, blue uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColor3usv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColor3usv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColor3usv(v *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColor3usv(v *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColorP3ui" class="hdr pkg hdr-method"><a href="#Context.SecondaryColorP3ui" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColorP3ui(pType int32, color uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColorP3ui(pType int32, color uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColorP3uiv" class="hdr pkg hdr-method"><a href="#Context.SecondaryColorP3uiv" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColorP3uiv(pType int32, color *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColorP3uiv(pType int32, color *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SecondaryColorPointer" class="hdr pkg hdr-method"><a href="#Context.SecondaryColorPointer" title="permalink">»</a>&nbsp;func (c *Context) SecondaryColorPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SecondaryColorPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.SelectBuffer" class="hdr pkg hdr-method"><a href="#Context.SelectBuffer" title="permalink">»</a>&nbsp;func (c *Context) SelectBuffer(size uint32, buffer *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SelectBuffer(size uint32, buffer *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.SetBatching" class="hdr pkg hdr-method"><a href="#Context.SetBatching" title="permalink">»</a>&nbsp;func (c *Context) SetBatching(batching bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) SetBatching(batching bool)</pre>
			<p>
SetBatching turns on or off batching of this Context.
</p>
<p>
If turning off batching using SetBatching(false), then an implicit call to
Execute() which executes all the currently pending OpenGL function calls on
this Context occurs.
</p>
<p>
Default value is off (false).
</p>

		</span>
	
		
		<h1 id="Context.ShadeModel" class="hdr pkg hdr-method"><a href="#Context.ShadeModel" title="permalink">»</a>&nbsp;func (c *Context) ShadeModel(mode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShadeModel(mode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ShaderBinary" class="hdr pkg hdr-method"><a href="#Context.ShaderBinary" title="permalink">»</a>&nbsp;func (c *Context) ShaderBinary(count uint32, shaders *uint32, binaryformat int32, binary unsafe.Pointer, length uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShaderBinary(count uint32, shaders *uint32, binaryformat int32, binary unsafe.Pointer, length uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ShaderSource" class="hdr pkg hdr-method"><a href="#Context.ShaderSource" title="permalink">»</a>&nbsp;func (c *Context) ShaderSource(shader uint32, count uint32, string **byte, length *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShaderSource(shader uint32, count uint32, string **byte, length *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.ShaderStorageBlockBinding" class="hdr pkg hdr-method"><a href="#Context.ShaderStorageBlockBinding" title="permalink">»</a>&nbsp;func (c *Context) ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ShaderVersion" class="hdr pkg hdr-method"><a href="#Context.ShaderVersion" title="permalink">»</a>&nbsp;func (c *Context) ShaderVersion() (major, minor, release int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ShaderVersion() (major, minor, release int)</pre>
			<p>
ShaderVersion returns the major and minor version of the supported GLSL
shading language per the OpenGL implementation.
</p>
<p>
Additionally provided is the vendor-specific release version (E.g. a driver
version number).
</p>

		</span>
	
		
		<h1 id="Context.StencilFunc" class="hdr pkg hdr-method"><a href="#Context.StencilFunc" title="permalink">»</a>&nbsp;func (c *Context) StencilFunc(pFunc int32, ref int32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilFunc(pFunc int32, ref int32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilFuncSeparate" class="hdr pkg hdr-method"><a href="#Context.StencilFuncSeparate" title="permalink">»</a>&nbsp;func (c *Context) StencilFuncSeparate(face int32, pFunc int32, ref int32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilFuncSeparate(face int32, pFunc int32, ref int32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilMask" class="hdr pkg hdr-method"><a href="#Context.StencilMask" title="permalink">»</a>&nbsp;func (c *Context) StencilMask(mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilMask(mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilMaskSeparate" class="hdr pkg hdr-method"><a href="#Context.StencilMaskSeparate" title="permalink">»</a>&nbsp;func (c *Context) StencilMaskSeparate(face int32, mask uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilMaskSeparate(face int32, mask uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilOp" class="hdr pkg hdr-method"><a href="#Context.StencilOp" title="permalink">»</a>&nbsp;func (c *Context) StencilOp(fail int32, zfail int32, zpass int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilOp(fail int32, zfail int32, zpass int32)</pre>
			
		</span>
	
		
		<h1 id="Context.StencilOpSeparate" class="hdr pkg hdr-method"><a href="#Context.StencilOpSeparate" title="permalink">»</a>&nbsp;func (c *Context) StencilOpSeparate(face int32, sfail int32, dpfail int32, dppass int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) StencilOpSeparate(face int32, sfail int32, dpfail int32, dppass int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexBuffer" class="hdr pkg hdr-method"><a href="#Context.TexBuffer" title="permalink">»</a>&nbsp;func (c *Context) TexBuffer(target int32, internalformat int32, buffer uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexBuffer(target int32, internalformat int32, buffer uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexBufferRange" class="hdr pkg hdr-method"><a href="#Context.TexBufferRange" title="permalink">»</a>&nbsp;func (c *Context) TexBufferRange(target int32, internalformat int32, buffer uint32, offset uintptr, size uintptr) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexBufferRange(target int32, internalformat int32, buffer uint32, offset uintptr, size uintptr)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1d" class="hdr pkg hdr-method"><a href="#Context.TexCoord1d" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1d(s float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1d(s float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1dv" class="hdr pkg hdr-method"><a href="#Context.TexCoord1dv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1f" class="hdr pkg hdr-method"><a href="#Context.TexCoord1f" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1f(s float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1f(s float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1fv" class="hdr pkg hdr-method"><a href="#Context.TexCoord1fv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1i" class="hdr pkg hdr-method"><a href="#Context.TexCoord1i" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1i(s int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1i(s int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1iv" class="hdr pkg hdr-method"><a href="#Context.TexCoord1iv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1s" class="hdr pkg hdr-method"><a href="#Context.TexCoord1s" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1s(s int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1s(s int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord1sv" class="hdr pkg hdr-method"><a href="#Context.TexCoord1sv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord1sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord1sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2d" class="hdr pkg hdr-method"><a href="#Context.TexCoord2d" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2d(s float64, t float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2d(s float64, t float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2dv" class="hdr pkg hdr-method"><a href="#Context.TexCoord2dv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2f" class="hdr pkg hdr-method"><a href="#Context.TexCoord2f" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2f(s float32, t float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2f(s float32, t float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2fv" class="hdr pkg hdr-method"><a href="#Context.TexCoord2fv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2i" class="hdr pkg hdr-method"><a href="#Context.TexCoord2i" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2i(s int32, t int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2i(s int32, t int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2iv" class="hdr pkg hdr-method"><a href="#Context.TexCoord2iv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2s" class="hdr pkg hdr-method"><a href="#Context.TexCoord2s" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2s(s int16, t int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2s(s int16, t int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord2sv" class="hdr pkg hdr-method"><a href="#Context.TexCoord2sv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord2sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord2sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3d" class="hdr pkg hdr-method"><a href="#Context.TexCoord3d" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3d(s float64, t float64, r float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3d(s float64, t float64, r float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3dv" class="hdr pkg hdr-method"><a href="#Context.TexCoord3dv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3f" class="hdr pkg hdr-method"><a href="#Context.TexCoord3f" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3f(s float32, t float32, r float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3f(s float32, t float32, r float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3fv" class="hdr pkg hdr-method"><a href="#Context.TexCoord3fv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3i" class="hdr pkg hdr-method"><a href="#Context.TexCoord3i" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3i(s int32, t int32, r int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3i(s int32, t int32, r int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3iv" class="hdr pkg hdr-method"><a href="#Context.TexCoord3iv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3s" class="hdr pkg hdr-method"><a href="#Context.TexCoord3s" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3s(s int16, t int16, r int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3s(s int16, t int16, r int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord3sv" class="hdr pkg hdr-method"><a href="#Context.TexCoord3sv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord3sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord3sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4d" class="hdr pkg hdr-method"><a href="#Context.TexCoord4d" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4d(s float64, t float64, r float64, q float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4d(s float64, t float64, r float64, q float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4dv" class="hdr pkg hdr-method"><a href="#Context.TexCoord4dv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4f" class="hdr pkg hdr-method"><a href="#Context.TexCoord4f" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4f(s float32, t float32, r float32, q float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4f(s float32, t float32, r float32, q float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4fv" class="hdr pkg hdr-method"><a href="#Context.TexCoord4fv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4i" class="hdr pkg hdr-method"><a href="#Context.TexCoord4i" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4i(s int32, t int32, r int32, q int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4i(s int32, t int32, r int32, q int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4iv" class="hdr pkg hdr-method"><a href="#Context.TexCoord4iv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4s" class="hdr pkg hdr-method"><a href="#Context.TexCoord4s" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4s(s int16, t int16, r int16, q int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4s(s int16, t int16, r int16, q int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoord4sv" class="hdr pkg hdr-method"><a href="#Context.TexCoord4sv" title="permalink">»</a>&nbsp;func (c *Context) TexCoord4sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoord4sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP1ui" class="hdr pkg hdr-method"><a href="#Context.TexCoordP1ui" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP1ui(pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP1ui(pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP1uiv" class="hdr pkg hdr-method"><a href="#Context.TexCoordP1uiv" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP1uiv(pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP1uiv(pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP2ui" class="hdr pkg hdr-method"><a href="#Context.TexCoordP2ui" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP2ui(pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP2ui(pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP2uiv" class="hdr pkg hdr-method"><a href="#Context.TexCoordP2uiv" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP2uiv(pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP2uiv(pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP3ui" class="hdr pkg hdr-method"><a href="#Context.TexCoordP3ui" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP3ui(pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP3ui(pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP3uiv" class="hdr pkg hdr-method"><a href="#Context.TexCoordP3uiv" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP3uiv(pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP3uiv(pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP4ui" class="hdr pkg hdr-method"><a href="#Context.TexCoordP4ui" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP4ui(pType int32, coords uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP4ui(pType int32, coords uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordP4uiv" class="hdr pkg hdr-method"><a href="#Context.TexCoordP4uiv" title="permalink">»</a>&nbsp;func (c *Context) TexCoordP4uiv(pType int32, coords *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordP4uiv(pType int32, coords *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexCoordPointer" class="hdr pkg hdr-method"><a href="#Context.TexCoordPointer" title="permalink">»</a>&nbsp;func (c *Context) TexCoordPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexCoordPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexEnvf" class="hdr pkg hdr-method"><a href="#Context.TexEnvf" title="permalink">»</a>&nbsp;func (c *Context) TexEnvf(target int32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexEnvf(target int32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexEnvfv" class="hdr pkg hdr-method"><a href="#Context.TexEnvfv" title="permalink">»</a>&nbsp;func (c *Context) TexEnvfv(target int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexEnvfv(target int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexEnvi" class="hdr pkg hdr-method"><a href="#Context.TexEnvi" title="permalink">»</a>&nbsp;func (c *Context) TexEnvi(target int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexEnvi(target int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexEnviv" class="hdr pkg hdr-method"><a href="#Context.TexEnviv" title="permalink">»</a>&nbsp;func (c *Context) TexEnviv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexEnviv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexGend" class="hdr pkg hdr-method"><a href="#Context.TexGend" title="permalink">»</a>&nbsp;func (c *Context) TexGend(coord int32, pname int32, param float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexGend(coord int32, pname int32, param float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexGendv" class="hdr pkg hdr-method"><a href="#Context.TexGendv" title="permalink">»</a>&nbsp;func (c *Context) TexGendv(coord int32, pname int32, params *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexGendv(coord int32, pname int32, params *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.TexGenf" class="hdr pkg hdr-method"><a href="#Context.TexGenf" title="permalink">»</a>&nbsp;func (c *Context) TexGenf(coord int32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexGenf(coord int32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexGenfv" class="hdr pkg hdr-method"><a href="#Context.TexGenfv" title="permalink">»</a>&nbsp;func (c *Context) TexGenfv(coord int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexGenfv(coord int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexGeni" class="hdr pkg hdr-method"><a href="#Context.TexGeni" title="permalink">»</a>&nbsp;func (c *Context) TexGeni(coord int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexGeni(coord int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexGeniv" class="hdr pkg hdr-method"><a href="#Context.TexGeniv" title="permalink">»</a>&nbsp;func (c *Context) TexGeniv(coord int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexGeniv(coord int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexImage1D" class="hdr pkg hdr-method"><a href="#Context.TexImage1D" title="permalink">»</a>&nbsp;func (c *Context) TexImage1D(target int32, level int32, internalformat int32, width uint32, border int32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexImage1D(target int32, level int32, internalformat int32, width uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexImage2D" class="hdr pkg hdr-method"><a href="#Context.TexImage2D" title="permalink">»</a>&nbsp;func (c *Context) TexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexImage2D(target int32, level int32, internalformat int32, width uint32, height uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexImage2DMultisample" class="hdr pkg hdr-method"><a href="#Context.TexImage2DMultisample" title="permalink">»</a>&nbsp;func (c *Context) TexImage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexImage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.TexImage3D" class="hdr pkg hdr-method"><a href="#Context.TexImage3D" title="permalink">»</a>&nbsp;func (c *Context) TexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexImage3D(target int32, level int32, internalformat int32, width uint32, height uint32, depth uint32, border int32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexImage3DMultisample" class="hdr pkg hdr-method"><a href="#Context.TexImage3DMultisample" title="permalink">»</a>&nbsp;func (c *Context) TexImage3DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, depth uint32, fixedsamplelocations uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexImage3DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, depth uint32, fixedsamplelocations uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameterIiv" class="hdr pkg hdr-method"><a href="#Context.TexParameterIiv" title="permalink">»</a>&nbsp;func (c *Context) TexParameterIiv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameterIiv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameterIuiv" class="hdr pkg hdr-method"><a href="#Context.TexParameterIuiv" title="permalink">»</a>&nbsp;func (c *Context) TexParameterIuiv(target int32, pname int32, params *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameterIuiv(target int32, pname int32, params *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameterf" class="hdr pkg hdr-method"><a href="#Context.TexParameterf" title="permalink">»</a>&nbsp;func (c *Context) TexParameterf(target int32, pname int32, param float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameterf(target int32, pname int32, param float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameterfv" class="hdr pkg hdr-method"><a href="#Context.TexParameterfv" title="permalink">»</a>&nbsp;func (c *Context) TexParameterfv(target int32, pname int32, params *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameterfv(target int32, pname int32, params *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameteri" class="hdr pkg hdr-method"><a href="#Context.TexParameteri" title="permalink">»</a>&nbsp;func (c *Context) TexParameteri(target int32, pname int32, param int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameteri(target int32, pname int32, param int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexParameteriv" class="hdr pkg hdr-method"><a href="#Context.TexParameteriv" title="permalink">»</a>&nbsp;func (c *Context) TexParameteriv(target int32, pname int32, params *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexParameteriv(target int32, pname int32, params *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage1D" class="hdr pkg hdr-method"><a href="#Context.TexStorage1D" title="permalink">»</a>&nbsp;func (c *Context) TexStorage1D(target int32, levels uint32, internalformat int32, width uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage1D(target int32, levels uint32, internalformat int32, width uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage2D" class="hdr pkg hdr-method"><a href="#Context.TexStorage2D" title="permalink">»</a>&nbsp;func (c *Context) TexStorage2D(target int32, levels uint32, internalformat int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage2D(target int32, levels uint32, internalformat int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage2DMultisample" class="hdr pkg hdr-method"><a href="#Context.TexStorage2DMultisample" title="permalink">»</a>&nbsp;func (c *Context) TexStorage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage2DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, fixedsamplelocations uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage3D" class="hdr pkg hdr-method"><a href="#Context.TexStorage3D" title="permalink">»</a>&nbsp;func (c *Context) TexStorage3D(target int32, levels uint32, internalformat int32, width uint32, height uint32, depth uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage3D(target int32, levels uint32, internalformat int32, width uint32, height uint32, depth uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TexStorage3DMultisample" class="hdr pkg hdr-method"><a href="#Context.TexStorage3DMultisample" title="permalink">»</a>&nbsp;func (c *Context) TexStorage3DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, depth uint32, fixedsamplelocations uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexStorage3DMultisample(target int32, samples uint32, internalformat int32, width uint32, height uint32, depth uint32, fixedsamplelocations uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.TexSubImage1D" class="hdr pkg hdr-method"><a href="#Context.TexSubImage1D" title="permalink">»</a>&nbsp;func (c *Context) TexSubImage1D(target int32, level int32, xoffset int32, width uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexSubImage1D(target int32, level int32, xoffset int32, width uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexSubImage2D" class="hdr pkg hdr-method"><a href="#Context.TexSubImage2D" title="permalink">»</a>&nbsp;func (c *Context) TexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexSubImage2D(target int32, level int32, xoffset int32, yoffset int32, width uint32, height uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TexSubImage3D" class="hdr pkg hdr-method"><a href="#Context.TexSubImage3D" title="permalink">»</a>&nbsp;func (c *Context) TexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, pixels unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TexSubImage3D(target int32, level int32, xoffset int32, yoffset int32, zoffset int32, width uint32, height uint32, depth uint32, format int32, pType int32, pixels unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.TextureView" class="hdr pkg hdr-method"><a href="#Context.TextureView" title="permalink">»</a>&nbsp;func (c *Context) TextureView(texture uint32, target int32, origtexture uint32, internalformat int32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TextureView(texture uint32, target int32, origtexture uint32, internalformat int32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.TransformFeedbackVaryings" class="hdr pkg hdr-method"><a href="#Context.TransformFeedbackVaryings" title="permalink">»</a>&nbsp;func (c *Context) TransformFeedbackVaryings(program uint32, count uint32, varyings **byte, bufferMode int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) TransformFeedbackVaryings(program uint32, count uint32, varyings **byte, bufferMode int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Translated" class="hdr pkg hdr-method"><a href="#Context.Translated" title="permalink">»</a>&nbsp;func (c *Context) Translated(x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Translated(x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Translatef" class="hdr pkg hdr-method"><a href="#Context.Translatef" title="permalink">»</a>&nbsp;func (c *Context) Translatef(x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Translatef(x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1d" class="hdr pkg hdr-method"><a href="#Context.Uniform1d" title="permalink">»</a>&nbsp;func (c *Context) Uniform1d(location int32, x float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1d(location int32, x float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1dv" class="hdr pkg hdr-method"><a href="#Context.Uniform1dv" title="permalink">»</a>&nbsp;func (c *Context) Uniform1dv(location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1dv(location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1f" class="hdr pkg hdr-method"><a href="#Context.Uniform1f" title="permalink">»</a>&nbsp;func (c *Context) Uniform1f(location int32, v0 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1f(location int32, v0 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1fv" class="hdr pkg hdr-method"><a href="#Context.Uniform1fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform1fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1i" class="hdr pkg hdr-method"><a href="#Context.Uniform1i" title="permalink">»</a>&nbsp;func (c *Context) Uniform1i(location int32, v0 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1i(location int32, v0 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1iv" class="hdr pkg hdr-method"><a href="#Context.Uniform1iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform1iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1ui" class="hdr pkg hdr-method"><a href="#Context.Uniform1ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform1ui(location int32, v0 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1ui(location int32, v0 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform1uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform1uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform1uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform1uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2d" class="hdr pkg hdr-method"><a href="#Context.Uniform2d" title="permalink">»</a>&nbsp;func (c *Context) Uniform2d(location int32, x float64, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2d(location int32, x float64, y float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2dv" class="hdr pkg hdr-method"><a href="#Context.Uniform2dv" title="permalink">»</a>&nbsp;func (c *Context) Uniform2dv(location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2dv(location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2f" class="hdr pkg hdr-method"><a href="#Context.Uniform2f" title="permalink">»</a>&nbsp;func (c *Context) Uniform2f(location int32, v0 float32, v1 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2f(location int32, v0 float32, v1 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2fv" class="hdr pkg hdr-method"><a href="#Context.Uniform2fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform2fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2i" class="hdr pkg hdr-method"><a href="#Context.Uniform2i" title="permalink">»</a>&nbsp;func (c *Context) Uniform2i(location int32, v0 int32, v1 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2i(location int32, v0 int32, v1 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2iv" class="hdr pkg hdr-method"><a href="#Context.Uniform2iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform2iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2ui" class="hdr pkg hdr-method"><a href="#Context.Uniform2ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform2ui(location int32, v0 uint32, v1 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2ui(location int32, v0 uint32, v1 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform2uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform2uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform2uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform2uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3d" class="hdr pkg hdr-method"><a href="#Context.Uniform3d" title="permalink">»</a>&nbsp;func (c *Context) Uniform3d(location int32, x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3d(location int32, x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3dv" class="hdr pkg hdr-method"><a href="#Context.Uniform3dv" title="permalink">»</a>&nbsp;func (c *Context) Uniform3dv(location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3dv(location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3f" class="hdr pkg hdr-method"><a href="#Context.Uniform3f" title="permalink">»</a>&nbsp;func (c *Context) Uniform3f(location int32, v0 float32, v1 float32, v2 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3f(location int32, v0 float32, v1 float32, v2 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3fv" class="hdr pkg hdr-method"><a href="#Context.Uniform3fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform3fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3i" class="hdr pkg hdr-method"><a href="#Context.Uniform3i" title="permalink">»</a>&nbsp;func (c *Context) Uniform3i(location int32, v0 int32, v1 int32, v2 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3i(location int32, v0 int32, v1 int32, v2 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3iv" class="hdr pkg hdr-method"><a href="#Context.Uniform3iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform3iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3ui" class="hdr pkg hdr-method"><a href="#Context.Uniform3ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform3uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform3uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform3uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform3uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4d" class="hdr pkg hdr-method"><a href="#Context.Uniform4d" title="permalink">»</a>&nbsp;func (c *Context) Uniform4d(location int32, x float64, y float64, z float64, w float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4d(location int32, x float64, y float64, z float64, w float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4dv" class="hdr pkg hdr-method"><a href="#Context.Uniform4dv" title="permalink">»</a>&nbsp;func (c *Context) Uniform4dv(location int32, count uint32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4dv(location int32, count uint32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4f" class="hdr pkg hdr-method"><a href="#Context.Uniform4f" title="permalink">»</a>&nbsp;func (c *Context) Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4fv" class="hdr pkg hdr-method"><a href="#Context.Uniform4fv" title="permalink">»</a>&nbsp;func (c *Context) Uniform4fv(location int32, count uint32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4fv(location int32, count uint32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4i" class="hdr pkg hdr-method"><a href="#Context.Uniform4i" title="permalink">»</a>&nbsp;func (c *Context) Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4iv" class="hdr pkg hdr-method"><a href="#Context.Uniform4iv" title="permalink">»</a>&nbsp;func (c *Context) Uniform4iv(location int32, count uint32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4iv(location int32, count uint32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4ui" class="hdr pkg hdr-method"><a href="#Context.Uniform4ui" title="permalink">»</a>&nbsp;func (c *Context) Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.Uniform4uiv" class="hdr pkg hdr-method"><a href="#Context.Uniform4uiv" title="permalink">»</a>&nbsp;func (c *Context) Uniform4uiv(location int32, count uint32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Uniform4uiv(location int32, count uint32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformBlockBinding" class="hdr pkg hdr-method"><a href="#Context.UniformBlockBinding" title="permalink">»</a>&nbsp;func (c *Context) UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2x3dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2x3dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2x3dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2x3dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2x3fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2x3fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2x3fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2x3fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2x4dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2x4dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2x4dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2x4dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix2x4fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix2x4fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix2x4fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix2x4fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3x2dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3x2dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3x2dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3x2dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3x2fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3x2fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3x2fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3x2fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3x4dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3x4dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3x4dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3x4dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix3x4fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix3x4fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix3x4fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix3x4fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4x2dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4x2dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4x2dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4x2dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4x2fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4x2fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4x2fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4x2fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4x3dv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4x3dv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4x3dv(location int32, count uint32, transpose uint8, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4x3dv(location int32, count uint32, transpose uint8, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformMatrix4x3fv" class="hdr pkg hdr-method"><a href="#Context.UniformMatrix4x3fv" title="permalink">»</a>&nbsp;func (c *Context) UniformMatrix4x3fv(location int32, count uint32, transpose uint8, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformMatrix4x3fv(location int32, count uint32, transpose uint8, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.UniformSubroutinesuiv" class="hdr pkg hdr-method"><a href="#Context.UniformSubroutinesuiv" title="permalink">»</a>&nbsp;func (c *Context) UniformSubroutinesuiv(shadertype int32, count uint32, indices *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UniformSubroutinesuiv(shadertype int32, count uint32, indices *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.UnmapBuffer" class="hdr pkg hdr-method"><a href="#Context.UnmapBuffer" title="permalink">»</a>&nbsp;func (c *Context) UnmapBuffer(target int32) uint8 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UnmapBuffer(target int32) uint8</pre>
			
		</span>
	
		
		<h1 id="Context.UseProgram" class="hdr pkg hdr-method"><a href="#Context.UseProgram" title="permalink">»</a>&nbsp;func (c *Context) UseProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UseProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.UseProgramStages" class="hdr pkg hdr-method"><a href="#Context.UseProgramStages" title="permalink">»</a>&nbsp;func (c *Context) UseProgramStages(pipeline uint32, stages uint32, program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) UseProgramStages(pipeline uint32, stages uint32, program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ValidateProgram" class="hdr pkg hdr-method"><a href="#Context.ValidateProgram" title="permalink">»</a>&nbsp;func (c *Context) ValidateProgram(program uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ValidateProgram(program uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ValidateProgramPipeline" class="hdr pkg hdr-method"><a href="#Context.ValidateProgramPipeline" title="permalink">»</a>&nbsp;func (c *Context) ValidateProgramPipeline(pipeline uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ValidateProgramPipeline(pipeline uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VendorShaderVersion" class="hdr pkg hdr-method"><a href="#Context.VendorShaderVersion" title="permalink">»</a>&nbsp;func (c *Context) VendorShaderVersion() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VendorShaderVersion() string</pre>
			<p>
VendorShaderVersion returns the vendor-specific shading language version
information.
</p>
<p>
This string depends on the vendor of the graphics card/driver.
</p>

		</span>
	
		
		<h1 id="Context.VendorVersion" class="hdr pkg hdr-method"><a href="#Context.VendorVersion" title="permalink">»</a>&nbsp;func (c *Context) VendorVersion() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VendorVersion() string</pre>
			<p>
VendorVersion returns the vendor-specific OpenGL version information.
</p>
<p>
This string depends on the vendor of the graphics card/driver.
</p>

		</span>
	
		
		<h1 id="Context.Version" class="hdr pkg hdr-method"><a href="#Context.Version" title="permalink">»</a>&nbsp;func (c *Context) Version() (major, minor, release int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Version() (major, minor, release int)</pre>
			<p>
Version returns the major and minor OpenGL version supported by the
implementation.
</p>
<p>
Additionally provided is the vendor-specific release version (E.g. a driver
version number).
</p>

		</span>
	
		
		<h1 id="Context.Vertex2d" class="hdr pkg hdr-method"><a href="#Context.Vertex2d" title="permalink">»</a>&nbsp;func (c *Context) Vertex2d(x float64, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2d(x float64, y float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex2dv" class="hdr pkg hdr-method"><a href="#Context.Vertex2dv" title="permalink">»</a>&nbsp;func (c *Context) Vertex2dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex2f" class="hdr pkg hdr-method"><a href="#Context.Vertex2f" title="permalink">»</a>&nbsp;func (c *Context) Vertex2f(x float32, y float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2f(x float32, y float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex2fv" class="hdr pkg hdr-method"><a href="#Context.Vertex2fv" title="permalink">»</a>&nbsp;func (c *Context) Vertex2fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex2i" class="hdr pkg hdr-method"><a href="#Context.Vertex2i" title="permalink">»</a>&nbsp;func (c *Context) Vertex2i(x int32, y int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2i(x int32, y int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex2iv" class="hdr pkg hdr-method"><a href="#Context.Vertex2iv" title="permalink">»</a>&nbsp;func (c *Context) Vertex2iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex2s" class="hdr pkg hdr-method"><a href="#Context.Vertex2s" title="permalink">»</a>&nbsp;func (c *Context) Vertex2s(x int16, y int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2s(x int16, y int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex2sv" class="hdr pkg hdr-method"><a href="#Context.Vertex2sv" title="permalink">»</a>&nbsp;func (c *Context) Vertex2sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex2sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3d" class="hdr pkg hdr-method"><a href="#Context.Vertex3d" title="permalink">»</a>&nbsp;func (c *Context) Vertex3d(x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3d(x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3dv" class="hdr pkg hdr-method"><a href="#Context.Vertex3dv" title="permalink">»</a>&nbsp;func (c *Context) Vertex3dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3f" class="hdr pkg hdr-method"><a href="#Context.Vertex3f" title="permalink">»</a>&nbsp;func (c *Context) Vertex3f(x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3f(x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3fv" class="hdr pkg hdr-method"><a href="#Context.Vertex3fv" title="permalink">»</a>&nbsp;func (c *Context) Vertex3fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3i" class="hdr pkg hdr-method"><a href="#Context.Vertex3i" title="permalink">»</a>&nbsp;func (c *Context) Vertex3i(x int32, y int32, z int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3i(x int32, y int32, z int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3iv" class="hdr pkg hdr-method"><a href="#Context.Vertex3iv" title="permalink">»</a>&nbsp;func (c *Context) Vertex3iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3s" class="hdr pkg hdr-method"><a href="#Context.Vertex3s" title="permalink">»</a>&nbsp;func (c *Context) Vertex3s(x int16, y int16, z int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3s(x int16, y int16, z int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex3sv" class="hdr pkg hdr-method"><a href="#Context.Vertex3sv" title="permalink">»</a>&nbsp;func (c *Context) Vertex3sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex3sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4d" class="hdr pkg hdr-method"><a href="#Context.Vertex4d" title="permalink">»</a>&nbsp;func (c *Context) Vertex4d(x float64, y float64, z float64, w float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4d(x float64, y float64, z float64, w float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4dv" class="hdr pkg hdr-method"><a href="#Context.Vertex4dv" title="permalink">»</a>&nbsp;func (c *Context) Vertex4dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4f" class="hdr pkg hdr-method"><a href="#Context.Vertex4f" title="permalink">»</a>&nbsp;func (c *Context) Vertex4f(x float32, y float32, z float32, w float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4f(x float32, y float32, z float32, w float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4fv" class="hdr pkg hdr-method"><a href="#Context.Vertex4fv" title="permalink">»</a>&nbsp;func (c *Context) Vertex4fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4i" class="hdr pkg hdr-method"><a href="#Context.Vertex4i" title="permalink">»</a>&nbsp;func (c *Context) Vertex4i(x int32, y int32, z int32, w int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4i(x int32, y int32, z int32, w int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4iv" class="hdr pkg hdr-method"><a href="#Context.Vertex4iv" title="permalink">»</a>&nbsp;func (c *Context) Vertex4iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4s" class="hdr pkg hdr-method"><a href="#Context.Vertex4s" title="permalink">»</a>&nbsp;func (c *Context) Vertex4s(x int16, y int16, z int16, w int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4s(x int16, y int16, z int16, w int16)</pre>
			
		</span>
	
		
		<h1 id="Context.Vertex4sv" class="hdr pkg hdr-method"><a href="#Context.Vertex4sv" title="permalink">»</a>&nbsp;func (c *Context) Vertex4sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Vertex4sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib1d" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1d(index uint32, x float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1d(index uint32, x float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib1dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib1f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1f(index uint32, x float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1f(index uint32, x float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib1fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib1s" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1s" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1s(index uint32, x int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1s(index uint32, x int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib1sv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib1sv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib1sv(index uint32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib1sv(index uint32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2d" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2d(index uint32, x float64, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2d(index uint32, x float64, y float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2f(index uint32, x float32, y float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2f(index uint32, x float32, y float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2s" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2s" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2s(index uint32, x int16, y int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2s(index uint32, x int16, y int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib2sv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib2sv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib2sv(index uint32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib2sv(index uint32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3d" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3d(index uint32, x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3d(index uint32, x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3f(index uint32, x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3f(index uint32, x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3s" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3s" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3s(index uint32, x int16, y int16, z int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3s(index uint32, x int16, y int16, z int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib3sv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib3sv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib3sv(index uint32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib3sv(index uint32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4Nbv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4Nbv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4Nbv(index uint32, v *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4Nbv(index uint32, v *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4Niv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4Niv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4Niv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4Niv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4Nsv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4Nsv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4Nsv(index uint32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4Nsv(index uint32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4Nub" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4Nub" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4Nubv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4Nubv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4Nubv(index uint32, v *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4Nubv(index uint32, v *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4Nuiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4Nuiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4Nuiv(index uint32, v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4Nuiv(index uint32, v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4Nusv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4Nusv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4Nusv(index uint32, v *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4Nusv(index uint32, v *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4bv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4bv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4bv(index uint32, v *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4bv(index uint32, v *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4d" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4f" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4f" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4fv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4fv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4fv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4fv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4iv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4iv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4iv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4iv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4s" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4s" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4sv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4sv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4sv(index uint32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4sv(index uint32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4ubv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4ubv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4ubv(index uint32, v *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4ubv(index uint32, v *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4uiv(index uint32, v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4uiv(index uint32, v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttrib4usv" class="hdr pkg hdr-method"><a href="#Context.VertexAttrib4usv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttrib4usv(index uint32, v *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttrib4usv(index uint32, v *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribBinding" class="hdr pkg hdr-method"><a href="#Context.VertexAttribBinding" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribBinding(attribindex uint32, bindingindex uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribBinding(attribindex uint32, bindingindex uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribDivisor" class="hdr pkg hdr-method"><a href="#Context.VertexAttribDivisor" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribDivisor(index uint32, divisor uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribDivisor(index uint32, divisor uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribFormat" class="hdr pkg hdr-method"><a href="#Context.VertexAttribFormat" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribFormat(attribindex uint32, size int32, pType int32, normalized uint8, relativeoffset uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribFormat(attribindex uint32, size int32, pType int32, normalized uint8, relativeoffset uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI1i" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI1i" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI1i(index uint32, x int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI1i(index uint32, x int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI1iv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI1iv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI1iv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI1iv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI1ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI1ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI1ui(index uint32, x uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI1ui(index uint32, x uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI1uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI1uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI1uiv(index uint32, v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI1uiv(index uint32, v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI2i" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI2i" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI2i(index uint32, x int32, y int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI2i(index uint32, x int32, y int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI2iv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI2iv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI2iv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI2iv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI2ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI2ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI2ui(index uint32, x uint32, y uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI2ui(index uint32, x uint32, y uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI2uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI2uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI2uiv(index uint32, v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI2uiv(index uint32, v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI3i" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI3i" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI3i(index uint32, x int32, y int32, z int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI3i(index uint32, x int32, y int32, z int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI3iv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI3iv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI3iv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI3iv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI3ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI3ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI3uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI3uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI3uiv(index uint32, v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI3uiv(index uint32, v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4bv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4bv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4bv(index uint32, v *byte) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4bv(index uint32, v *byte)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4i" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4i" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4iv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4iv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4iv(index uint32, v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4iv(index uint32, v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4sv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4sv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4sv(index uint32, v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4sv(index uint32, v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4ubv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4ubv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4ubv(index uint32, v *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4ubv(index uint32, v *uint8)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4uiv(index uint32, v *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4uiv(index uint32, v *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribI4usv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribI4usv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribI4usv(index uint32, v *uint16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribI4usv(index uint32, v *uint16)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribIFormat" class="hdr pkg hdr-method"><a href="#Context.VertexAttribIFormat" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribIFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribIFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribIPointer" class="hdr pkg hdr-method"><a href="#Context.VertexAttribIPointer" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribIPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribIPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL1d" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL1d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL1d(index uint32, x float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL1d(index uint32, x float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL1dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL1dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL1dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL1dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL2d" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL2d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL2d(index uint32, x float64, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL2d(index uint32, x float64, y float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL2dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL2dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL2dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL2dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL3d" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL3d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL3d(index uint32, x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL3d(index uint32, x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL3dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL3dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL3dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL3dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL4d" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL4d" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribL4dv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribL4dv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribL4dv(index uint32, v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribL4dv(index uint32, v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribLFormat" class="hdr pkg hdr-method"><a href="#Context.VertexAttribLFormat" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribLFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribLFormat(attribindex uint32, size int32, pType int32, relativeoffset uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribLPointer" class="hdr pkg hdr-method"><a href="#Context.VertexAttribLPointer" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribLPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribLPointer(index uint32, size int32, pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP1ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP1ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP1ui(index uint32, pType int32, normalized uint8, value uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP1ui(index uint32, pType int32, normalized uint8, value uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP1uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP1uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP1uiv(index uint32, pType int32, normalized uint8, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP1uiv(index uint32, pType int32, normalized uint8, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP2ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP2ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP2ui(index uint32, pType int32, normalized uint8, value uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP2ui(index uint32, pType int32, normalized uint8, value uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP2uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP2uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP2uiv(index uint32, pType int32, normalized uint8, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP2uiv(index uint32, pType int32, normalized uint8, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP3ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP3ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP3ui(index uint32, pType int32, normalized uint8, value uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP3ui(index uint32, pType int32, normalized uint8, value uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP3uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP3uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP3uiv(index uint32, pType int32, normalized uint8, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP3uiv(index uint32, pType int32, normalized uint8, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP4ui" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP4ui" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP4ui(index uint32, pType int32, normalized uint8, value uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP4ui(index uint32, pType int32, normalized uint8, value uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribP4uiv" class="hdr pkg hdr-method"><a href="#Context.VertexAttribP4uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribP4uiv(index uint32, pType int32, normalized uint8, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribP4uiv(index uint32, pType int32, normalized uint8, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexAttribPointer" class="hdr pkg hdr-method"><a href="#Context.VertexAttribPointer" title="permalink">»</a>&nbsp;func (c *Context) VertexAttribPointer(index uint32, size int32, pType int32, normalized uint8, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexAttribPointer(index uint32, size int32, pType int32, normalized uint8, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexBindingDivisor" class="hdr pkg hdr-method"><a href="#Context.VertexBindingDivisor" title="permalink">»</a>&nbsp;func (c *Context) VertexBindingDivisor(bindingindex uint32, divisor uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexBindingDivisor(bindingindex uint32, divisor uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexP2ui" class="hdr pkg hdr-method"><a href="#Context.VertexP2ui" title="permalink">»</a>&nbsp;func (c *Context) VertexP2ui(pType int32, value uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexP2ui(pType int32, value uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexP2uiv" class="hdr pkg hdr-method"><a href="#Context.VertexP2uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexP2uiv(pType int32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexP2uiv(pType int32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexP3ui" class="hdr pkg hdr-method"><a href="#Context.VertexP3ui" title="permalink">»</a>&nbsp;func (c *Context) VertexP3ui(pType int32, value uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexP3ui(pType int32, value uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexP3uiv" class="hdr pkg hdr-method"><a href="#Context.VertexP3uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexP3uiv(pType int32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexP3uiv(pType int32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexP4ui" class="hdr pkg hdr-method"><a href="#Context.VertexP4ui" title="permalink">»</a>&nbsp;func (c *Context) VertexP4ui(pType int32, value uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexP4ui(pType int32, value uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexP4uiv" class="hdr pkg hdr-method"><a href="#Context.VertexP4uiv" title="permalink">»</a>&nbsp;func (c *Context) VertexP4uiv(pType int32, value *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexP4uiv(pType int32, value *uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.VertexPointer" class="hdr pkg hdr-method"><a href="#Context.VertexPointer" title="permalink">»</a>&nbsp;func (c *Context) VertexPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) VertexPointer(size int32, pType int32, stride uint32, pointer unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Context.Viewport" class="hdr pkg hdr-method"><a href="#Context.Viewport" title="permalink">»</a>&nbsp;func (c *Context) Viewport(x int32, y int32, width uint32, height uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Viewport(x int32, y int32, width uint32, height uint32)</pre>
			
		</span>
	
		
		<h1 id="Context.ViewportArrayv" class="hdr pkg hdr-method"><a href="#Context.ViewportArrayv" title="permalink">»</a>&nbsp;func (c *Context) ViewportArrayv(first uint32, count uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ViewportArrayv(first uint32, count uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ViewportIndexedf" class="hdr pkg hdr-method"><a href="#Context.ViewportIndexedf" title="permalink">»</a>&nbsp;func (c *Context) ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32)</pre>
			
		</span>
	
		
		<h1 id="Context.ViewportIndexedfv" class="hdr pkg hdr-method"><a href="#Context.ViewportIndexedfv" title="permalink">»</a>&nbsp;func (c *Context) ViewportIndexedfv(index uint32, v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) ViewportIndexedfv(index uint32, v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.WaitSync" class="hdr pkg hdr-method"><a href="#Context.WaitSync" title="permalink">»</a>&nbsp;func (c *Context) WaitSync(sync Sync, flags uint32, timeout uint64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WaitSync(sync Sync, flags uint32, timeout uint64)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2d" class="hdr pkg hdr-method"><a href="#Context.WindowPos2d" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2d(x float64, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2d(x float64, y float64)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2dv" class="hdr pkg hdr-method"><a href="#Context.WindowPos2dv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2f" class="hdr pkg hdr-method"><a href="#Context.WindowPos2f" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2f(x float32, y float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2f(x float32, y float32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2fv" class="hdr pkg hdr-method"><a href="#Context.WindowPos2fv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2i" class="hdr pkg hdr-method"><a href="#Context.WindowPos2i" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2i(x int32, y int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2i(x int32, y int32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2iv" class="hdr pkg hdr-method"><a href="#Context.WindowPos2iv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2s" class="hdr pkg hdr-method"><a href="#Context.WindowPos2s" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2s(x int16, y int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2s(x int16, y int16)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos2sv" class="hdr pkg hdr-method"><a href="#Context.WindowPos2sv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos2sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos2sv(v *int16)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3d" class="hdr pkg hdr-method"><a href="#Context.WindowPos3d" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3d(x float64, y float64, z float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3d(x float64, y float64, z float64)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3dv" class="hdr pkg hdr-method"><a href="#Context.WindowPos3dv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3dv(v *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3dv(v *float64)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3f" class="hdr pkg hdr-method"><a href="#Context.WindowPos3f" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3f(x float32, y float32, z float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3f(x float32, y float32, z float32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3fv" class="hdr pkg hdr-method"><a href="#Context.WindowPos3fv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3fv(v *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3fv(v *float32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3i" class="hdr pkg hdr-method"><a href="#Context.WindowPos3i" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3i(x int32, y int32, z int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3i(x int32, y int32, z int32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3iv" class="hdr pkg hdr-method"><a href="#Context.WindowPos3iv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3iv(v *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3iv(v *int32)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3s" class="hdr pkg hdr-method"><a href="#Context.WindowPos3s" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3s(x int16, y int16, z int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3s(x int16, y int16, z int16)</pre>
			
		</span>
	
		
		<h1 id="Context.WindowPos3sv" class="hdr pkg hdr-method"><a href="#Context.WindowPos3sv" title="permalink">»</a>&nbsp;func (c *Context) WindowPos3sv(v *int16) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) WindowPos3sv(v *int16)</pre>
			
		</span>
	

	
	<h1 id="DEBUGPROC" class="hdr pkg hdr-type"><a href="#DEBUGPROC" title="permalink">»</a>&nbsp;type DEBUGPROC <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROC C.GLDEBUGPROC</pre>
		
	</span>

	
	

	
	

	
	<h1 id="DEBUGPROCAMD" class="hdr pkg hdr-type"><a href="#DEBUGPROCAMD" title="permalink">»</a>&nbsp;type DEBUGPROCAMD <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROCAMD C.GLDEBUGPROCAMD</pre>
		
	</span>

	
	

	
	

	
	<h1 id="DEBUGPROCARB" class="hdr pkg hdr-type"><a href="#DEBUGPROCARB" title="permalink">»</a>&nbsp;type DEBUGPROCARB <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROCARB C.GLDEBUGPROCARB</pre>
		
	</span>

	
	

	
	

	
	<h1 id="DEBUGPROCKHR" class="hdr pkg hdr-type"><a href="#DEBUGPROCKHR" title="permalink">»</a>&nbsp;type DEBUGPROCKHR <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DEBUGPROCKHR C.GLDEBUGPROCKHR</pre>
		
	</span>

	
	

	
	

	
	<h1 id="Sync" class="hdr pkg hdr-type"><a href="#Sync" title="permalink">»</a>&nbsp;type Sync <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Sync C.GLsync</pre>
		
	</span>

	
	

	
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/native-gl/blob/dev/enums.go" title="view source">enums.go</a>
	
	<a href="https:/github.com/azul3d/native-gl/blob/dev/gl.go" title="view source">gl.go</a>
	
	<a href="https:/github.com/azul3d/native-gl/blob/dev/gldebug.go" title="view source">gldebug.go</a>
	
	<a href="https:/github.com/azul3d/native-gl/blob/dev/types.go" title="view source">types.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files"></span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div>Unless noted otherwise, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a BSD license.</div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



