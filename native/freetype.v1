

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">

		
		<link rel="image_src" href="http://azul3d.org/content/symbol_256x256.png">
		<meta property="og:image" content="http://azul3d.org/content/symbol_256x256.png">

		
			<title>Azul3D</title>
		
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='//fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='//fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>






































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc">Doc</a> | <a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package freetype</h1>
<span class="section pkg general">
	
		
			<p><em>Version 1</em></p>
		
	
	<span class="pkg import">import "azul3d.org/native/freetype.v1"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	

	
		
	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing the latest version of this package (v1).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/freetype.v1" title="azul3d.org/native/freetype.v1">v1</a> (latest version)</span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/freetype.dev" title="azul3d.org/native/freetype.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package freetype is a wrapper around the FreeType font rendering library.
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#variables">Variables</a></span></span>
		
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context">type Context</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Init">func Init() (*Context, error)</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Context.Load">func (c *Context) Load(fontFileData []byte) (*Font, error)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Font">type Font</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Font.Index">func (f *Font) Index(r rune) (glyphIndex uint)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Font.Kerning">func (f *Font) Kerning(leftGlyph, rightGlyph rune) (x, y int, e error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Font.Load">func (f *Font) Load(glyphIndex uint) (*Glyph, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Font.SetSize">func (f *Font) SetSize(width, height, xResolution, yResolution int) error</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Font.SetSizePixels">func (f *Font) SetSizePixels(width, height int) error</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Glyph">type Glyph</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Glyph.Image">func (g *Glyph) Image() (*GlyphImage, error)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GlyphImage">type GlyphImage</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GlyphMetrics">type GlyphMetrics</a></span></span>
			
			
		
	</span>
</span>








<h1 id="variables" class="hdr pkg hdr-variables"><a href="#variables" title="permalink">»</a>&nbsp;Variables <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg variables">
	
		<pre>var (
	ErrCannotOpenResource		= errors.New(&#34;cannot open resource&#34;)
	ErrUnknownFileFormat		= errors.New(&#34;unknown file format&#34;)
	ErrInvalidFileFormat		= errors.New(&#34;broken file&#34;)
	ErrInvalidVersion		= errors.New(&#34;invalid FreeType version&#34;)
	ErrLowerModuleVersion		= errors.New(&#34;module version is too low&#34;)
	ErrInvalidArgument		= errors.New(&#34;invalid argument&#34;)
	ErrUnimplementedFeature		= errors.New(&#34;unimplemented feature&#34;)
	ErrInvalidTable			= errors.New(&#34;broken table&#34;)
	ErrInvalidOffset		= errors.New(&#34;broken offset within table&#34;)
	ErrArrayTooLarge		= errors.New(&#34;array allocation size too large&#34;)
	ErrMissingModule		= errors.New(&#34;missing module&#34;)
	ErrMissingProperty		= errors.New(&#34;missing property&#34;)
	ErrInvalidGlyphIndex		= errors.New(&#34;invalid glyph index&#34;)
	ErrInvalidCharacterCode		= errors.New(&#34;invalid character code&#34;)
	ErrInvalidGlyphFormat		= errors.New(&#34;unsupported glyph image format&#34;)
	ErrCannotRenderGlyph		= errors.New(&#34;cannot render this glyph format&#34;)
	ErrInvalidOutline		= errors.New(&#34;invalid outline&#34;)
	ErrInvalidComposite		= errors.New(&#34;invalid composite glyph&#34;)
	ErrTooManyHints			= errors.New(&#34;too many hints&#34;)
	ErrInvalidPixelSize		= errors.New(&#34;invalid pixel size&#34;)
	ErrInvalidHandle		= errors.New(&#34;invalid object handle&#34;)
	ErrInvalidLibraryHandle		= errors.New(&#34;invalid library handle&#34;)
	ErrInvalidDriverHandle		= errors.New(&#34;invalid module handle&#34;)
	ErrInvalidFaceHandle		= errors.New(&#34;invalid face handle&#34;)
	ErrInvalidSizeHandle		= errors.New(&#34;invalid size handle&#34;)
	ErrInvalidSlotHandle		= errors.New(&#34;invalid glyph slot handle&#34;)
	ErrInvalidCharMapHandle		= errors.New(&#34;invalid charmap handle&#34;)
	ErrInvalidCacheHandle		= errors.New(&#34;invalid cache manager handle&#34;)
	ErrInvalidStreamHandle		= errors.New(&#34;invalid stream handle&#34;)
	ErrTooManyDrivers		= errors.New(&#34;too many modules&#34;)
	ErrTooManyExtensions		= errors.New(&#34;too many extensions&#34;)
	ErrOutOfMemory			= errors.New(&#34;out of memory&#34;)
	ErrUnlistedObject		= errors.New(&#34;unlisted object&#34;)
	ErrCannotOpenStream		= errors.New(&#34;cannot open stream&#34;)
	ErrInvalidStreamSeek		= errors.New(&#34;invalid stream seek&#34;)
	ErrInvalidStreamSkip		= errors.New(&#34;invalid stream skip&#34;)
	ErrInvalidStreamRead		= errors.New(&#34;invalid stream read&#34;)
	ErrInvalidStreamOperation	= errors.New(&#34;invalid stream operation&#34;)
	ErrInvalidFrameOperation	= errors.New(&#34;invalid frame operation&#34;)
	ErrNestedFrameAccess		= errors.New(&#34;nested frame access&#34;)
	ErrInvalidFrameRead		= errors.New(&#34;invalid frame read&#34;)
	ErrRasterUninitialized		= errors.New(&#34;raster uninitialized&#34;)
	ErrRasterCorrupted		= errors.New(&#34;raster corrupted&#34;)
	ErrRasterOverflow		= errors.New(&#34;raster overflow&#34;)
	ErrRasterNegativeHeight		= errors.New(&#34;negative height while rastering&#34;)
	ErrTooManyCaches		= errors.New(&#34;too many registered caches&#34;)
	ErrInvalidOpcode		= errors.New(&#34;invalid opcode&#34;)
	ErrTooFewArguments		= errors.New(&#34;too few arguments&#34;)
	ErrStackOverflow		= errors.New(&#34;stack overflow&#34;)
	ErrCodeOverflow			= errors.New(&#34;code overflow&#34;)
	ErrBadArgument			= errors.New(&#34;bad argument&#34;)
	ErrDivideByZero			= errors.New(&#34;division by zero&#34;)
	ErrInvalidReference		= errors.New(&#34;invalid reference&#34;)
	ErrDebugOpCode			= errors.New(&#34;found debug opcode&#34;)
	ErrENDFInExecStream		= errors.New(&#34;found ENDF opcode in execution stream&#34;)
	ErrNestedDEFS			= errors.New(&#34;nested DEFS&#34;)
	ErrInvalidCodeRange		= errors.New(&#34;invalid code range&#34;)
	ErrExecutionTooLong		= errors.New(&#34;execution context too long&#34;)
	ErrTooManyFunctionDefs		= errors.New(&#34;too many function definitions&#34;)
	ErrTooManyInstructionDefs	= errors.New(&#34;too many instruction definitions&#34;)
	ErrTableMissing			= errors.New(&#34;SFNT font table missing&#34;)
	ErrHorizHeaderMissing		= errors.New(&#34;horizontal header (hhea) table missing&#34;)
	ErrLocationsMissing		= errors.New(&#34;locations (loca) table missing&#34;)
	ErrNameTableMissing		= errors.New(&#34;name table missing&#34;)
	ErrCMapTableMissing		= errors.New(&#34;character map (cmap) table missing&#34;)
	ErrHmtxTableMissing		= errors.New(&#34;horizontal metrics (hmtx) table missing&#34;)
	ErrPostTableMissing		= errors.New(&#34;PostScript (post) table missing&#34;)
	ErrInvalidHorizMetrics		= errors.New(&#34;invalid horizontal metrics&#34;)
	ErrInvalidCharMapFormat		= errors.New(&#34;invalid character map (cmap) format&#34;)
	ErrInvalidPPem			= errors.New(&#34;invalid ppem value&#34;)
	ErrInvalidVertMetrics		= errors.New(&#34;invalid vertical metrics&#34;)
	ErrCouldNotFindContext		= errors.New(&#34;could not find context&#34;)
	ErrInvalidPostTableFormat	= errors.New(&#34;invalid PostScript (post) table format&#34;)
	ErrInvalidPostTable		= errors.New(&#34;invalid PostScript (post) table&#34;)
	ErrSyntaxError			= errors.New(&#34;opcode syntax error&#34;)
	ErrStackUnderflow		= errors.New(&#34;argument stack underflow&#34;)
	ErrIgnore			= errors.New(&#34;ignore&#34;)
	ErrNoUnicodeGlyphName		= errors.New(&#34;no Unicode glyph name found&#34;)
	ErrGlyphTooBig			= errors.New(&#34;glyph to big for hinting&#34;)
	ErrMissingStartfontField	= errors.New(&#34;`STARTFONT&#39; field missing&#34;)
	ErrMissingFontField		= errors.New(&#34;`FONT&#39; field missing&#34;)
	ErrMissingSizeField		= errors.New(&#34;`SIZE&#39; field missing&#34;)
	ErrMissingFontboundingboxField	= errors.New(&#34;`FONTBOUNDINGBOX&#39; field missing&#34;)
	ErrMissingCharsField		= errors.New(&#34;`CHARS&#39; field missing&#34;)
	ErrMissingStartcharField	= errors.New(&#34;`STARTCHAR&#39; field missing&#34;)
	ErrMissingEncodingField		= errors.New(&#34;`ENCODING&#39; field missing&#34;)
	ErrMissingBbxField		= errors.New(&#34;`BBX&#39; field missing&#34;)
	ErrBbxTooBig			= errors.New(&#34;`BBX&#39; too big&#34;)
	ErrCorruptedFontHeader		= errors.New(&#34;Font header corrupted or missing fields&#34;)
	ErrCorruptedFontGlyphs		= errors.New(&#34;Font glyphs corrupted or missing fields&#34;)
)</pre>
		<p></p>
	
</span>









	
	<h1 id="Context" class="hdr pkg hdr-type"><a href="#Context" title="permalink">»</a>&nbsp;type Context <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Context struct {
	// contains filtered or unexported fields
}</pre>
		<p>
Context represents a single freetype context which must not be accessed
concurrently (typically each thread/goroutine uses a single context).
</p>

	</span>

	
	
		<h1 id="Init" class="hdr pkg hdr-function"><a href="#Init" title="permalink">»</a>&nbsp;func Init() (*Context, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func Init() (*Context, error)</pre>
			<p>
Init initializes and returns a new freetype context, or returns a error.
</p>

		</span>
	

	
	
		
		<h1 id="Context.Load" class="hdr pkg hdr-method"><a href="#Context.Load" title="permalink">»</a>&nbsp;func (c *Context) Load(fontFileData []byte) (*Font, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (c *Context) Load(fontFileData []byte) (*Font, error)</pre>
			<p>
Load loads and returns the given font file data and returns the loaded font
or an error.
</p>

		</span>
	

	
	<h1 id="Font" class="hdr pkg hdr-type"><a href="#Font" title="permalink">»</a>&nbsp;type Font <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Font struct {

	// Bounding box that is large enough to contain any glyph in the font face.
	// Expressed in font units.
	BBox	image.Rectangle

	// The number of font units per EM square for this font face.
	// Expressed in font units.
	UnitsPerEm	int

	// The typographic ascender of the face
	// Expressed in font units.
	Ascender	int

	// The typographic descender of the face.
	// Expressed in font units.
	Descender	int

	// The vertical distance between two consecutive baselines.
	// Expressed in font units.
	LineHeight	int

	// The maximum advance width for all glyphs in this face.
	// This can be used to make word wrapping computations faster.
	// Expressed in font units.
	MaxAdvanceWidth	int

	// The maximum advance height, for all glyphs in this face.
	// This is only relevant for vertical layouts, and is set to ‘height’
	// for fonts that do not provide vertical metrics.
	// Expressed in font units.
	MaxAdvanceHeight	int

	// The position of the underline for this font face.
	// Expressed in font units.
	UnderlinePosition	int

	// The thickness for the underline of this font face.
	// Expressed in font units.
	UnderlineThickness	int
	// contains filtered or unexported fields
}</pre>
		<p>
Font represents a single Freetype font.
</p>

	</span>

	
	

	
	
		
		<h1 id="Font.Index" class="hdr pkg hdr-method"><a href="#Font.Index" title="permalink">»</a>&nbsp;func (f *Font) Index(r rune) (glyphIndex uint) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (f *Font) Index(r rune) (glyphIndex uint)</pre>
			<p>
Index returns the glyph index for the given rune.
</p>

		</span>
	
		
		<h1 id="Font.Kerning" class="hdr pkg hdr-method"><a href="#Font.Kerning" title="permalink">»</a>&nbsp;func (f *Font) Kerning(leftGlyph, rightGlyph rune) (x, y int, e error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (f *Font) Kerning(leftGlyph, rightGlyph rune) (x, y int, e error)</pre>
			<p>
Kerning returns the X/Y kerning pair for the left and right horizontally
aligned glyphs, or x=0, y=0, and a error.
</p>

		</span>
	
		
		<h1 id="Font.Load" class="hdr pkg hdr-method"><a href="#Font.Load" title="permalink">»</a>&nbsp;func (f *Font) Load(glyphIndex uint) (*Glyph, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (f *Font) Load(glyphIndex uint) (*Glyph, error)</pre>
			<p>
Load loads the given glyph index into the font&#39;s glyph slot and returns the
glyph.
</p>

		</span>
	
		
		<h1 id="Font.SetSize" class="hdr pkg hdr-method"><a href="#Font.SetSize" title="permalink">»</a>&nbsp;func (f *Font) SetSize(width, height, xResolution, yResolution int) error <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (f *Font) SetSize(width, height, xResolution, yResolution int) error</pre>
			<p>
SetSize sets the current size of the font given 26.6 width and height units
and X/Y axis resolutions.
</p>

		</span>
	
		
		<h1 id="Font.SetSizePixels" class="hdr pkg hdr-method"><a href="#Font.SetSizePixels" title="permalink">»</a>&nbsp;func (f *Font) SetSizePixels(width, height int) error <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (f *Font) SetSizePixels(width, height int) error</pre>
			<p>
SetSizePixels sets the current size of the font given width and height pixel
based units.
</p>

		</span>
	

	
	<h1 id="Glyph" class="hdr pkg hdr-type"><a href="#Glyph" title="permalink">»</a>&nbsp;type Glyph <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Glyph struct {

	// Width and height of glyph.
	// Expressed in font units.
	Width, Height	int

	// Horizontal and vertical glyph metrics.
	HMetrics, VMetrics	GlyphMetrics
	// contains filtered or unexported fields
}</pre>
		<p>
Glyph represents a single renderable glyph.
</p>

	</span>

	
	

	
	
		
		<h1 id="Glyph.Image" class="hdr pkg hdr-method"><a href="#Glyph.Image" title="permalink">»</a>&nbsp;func (g *Glyph) Image() (*GlyphImage, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (g *Glyph) Image() (*GlyphImage, error)</pre>
			<p>
Renders and returns a alpha image, it is returned as *GlyphImage because a
reference internally must be held to this *Glyph.
</p>
<p>
The returned glyph image&#39;s data resides in a single slot held by the font
this glyph came from, as such you must ensure you only use a single
GlyphImage from the same font source at any given time (or make a copy of
the returned image).
</p>

		</span>
	

	
	<h1 id="GlyphImage" class="hdr pkg hdr-type"><a href="#GlyphImage" title="permalink">»</a>&nbsp;type GlyphImage <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type GlyphImage struct {
	*image.Alpha
	// contains filtered or unexported fields
}</pre>
		<p>
GlyphImage is literally just *image.Alpha, except it must hold a pointer
internally to *Glyph to avoid a garbage collection invoking finalizers which
free the image data.
</p>

	</span>

	
	

	
	

	
	<h1 id="GlyphMetrics" class="hdr pkg hdr-type"><a href="#GlyphMetrics" title="permalink">»</a>&nbsp;type GlyphMetrics <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type GlyphMetrics struct {
	// Left side bearing and top side bearing
	// X values extend to the right, and positive Y values downward.
	// Expressed in font units.
	BearingX, BearingY	int

	// Advance (and unhinted advance) amount of glyph.
	// For horizontal metrics, a positive value means advancing to the right.
	// For vertical metrics, a positive value means advancing downward.
	// Expressed in font units.
	Advance, UnhintedAdvance	int
}</pre>
		<p>
GlyphMetrics contains metrics of a single glyph.
</p>

	</span>

	
	

	
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/native-freetype/blob/v1/context.go" title="view source">context.go</a>
	
	<a href="https:/github.com/azul3d/native-freetype/blob/v1/doc.go" title="view source">doc.go</a>
	
	<a href="https:/github.com/azul3d/native-freetype/blob/v1/errors.go" title="view source">errors.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files">
		<h2>Test Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-freetype/blob/v1/freetype_test.go" title="view source">freetype_test.go</a>
		</p>
	</span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div><a href="/doc/license.html">License</a> | <a href="/doc/authors.html">Authors</a></div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



