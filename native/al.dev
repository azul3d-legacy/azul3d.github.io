

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">
		<title>Azul3D</title>
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='http://fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='http://fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>






































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package al</h1>
<span class="section pkg general">
	
		<p><em>In Development</em></p>
	
	<span class="pkg import">import "azul3d.org/native/al.dev"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	
		<h2>WARNING!</h2>
		<span class="sub">
			
				<p>This version is the in-development -- <em><strong>unstable</strong></em> -- version of this package. Backwards incompatible changes will be made to this package in the future and as such <em>you should not use this version</em>! Please use the latest release <a href="/native/al.v1">here</a>.</p>
			
		</span>
	

	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing an older version of this package (dev).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/al.v1" title="azul3d.org/native/al.v1">v1</a> (latest version)</span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/al.dev" title="azul3d.org/native/al.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	<p>
Package al implements Go bindings to OpenAL.
</p>
<p>
To avoid the requirement of users having to download OpenAL (or for
developers to have to distribute dynamic libraries with their applications),
this package works as a sort-of automatic &#39;installer&#39;
</p>
<p>
The dynamic OpenAL-Soft library is packed as a binary blob within this
package automatically for you.
</p>
<p>
When an application imports this package the installer will automatically
run. It is not visible to users and only writes a single file to the hard
drive *if it does not exist*.
</p>
<p>
Because OpenAL-Soft is LGPL licensed it is required by the license that
users be able to run the application with their own version of the library,
we are not lawyers and you should consult a lawyer to know in full if you
are obeying the LGPL license of OpenAL-Soft when using this library, but:
</p>
<p>
You should simply inform your users where they can place their own
OpenAL-Soft dynamic link library for their specific platform, file named as
shown below, into their home directory under the &#34;.azul3d&#34; directory created
on their operating system&#39;s file system:
</p>
<pre>linux/amd64: libopenal_soft.so.1.15.1
</pre>
<p>
And it will be dynamically linked and loaded instead of ours. Should the
user wish to restore our dynamic link library, they can simply delete theirs
and it will be automatically placed there once again.
</p>

</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#variables">Variables</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AlcGetIntegerv">func AlcGetIntegerv(d *Device, param, size int32, values *int32)</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AlcGetRawString">func AlcGetRawString(d *Device, param int32) uintptr</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#AlcGetString">func AlcGetString(d *Device, param int32) string</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ErrorHandler">func ErrorHandler() func(error)</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SetErrorHandler">func SetErrorHandler(f func(error))</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#StringList">func StringList(raw uintptr) []string</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device">type Device</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#OpenDevice">func OpenDevice(name string, ctxAttribs []int32) (*Device, error)</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.AlcGetEnumValue">func (d *Device) AlcGetEnumValue(name string) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.AlcGetIntegerv">func (d *Device) AlcGetIntegerv(param int32, size int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.AlcGetProcAddress">func (d *Device) AlcGetProcAddress(name string) unsafe.Pointer</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.AlcGetRawString">func (d *Device) AlcGetRawString(param int32) uintptr</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.AlcGetString">func (d *Device) AlcGetString(param int32) string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.AlcIsExtensionPresent">func (d *Device) AlcIsExtensionPresent(name string) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Buffer3f">func (d *Device) Buffer3f(buffer uint32, param int32, value1, value2, value3 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Buffer3i">func (d *Device) Buffer3i(buffer uint32, param int32, value1, value2, value3 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.BufferData">func (d *Device) BufferData(buffer uint32, format int32, data unsafe.Pointer, size, freq int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.BufferDataStatic">func (d *Device) BufferDataStatic(buffer uint32, format int32, data unsafe.Pointer, length, freq int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.BufferSamplesSOFT">func (d *Device) BufferSamplesSOFT(buffer uint32, sampleRate uint32, internalFormat, samples, channels, t int32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.BufferSubDataSOFT">func (d *Device) BufferSubDataSOFT(buffer uint32, format int32, data unsafe.Pointer, offset, length int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.BufferSubSamplesSOFT">func (d *Device) BufferSubSamplesSOFT(buffer uint32, offset, samples, channels, t int32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Bufferf">func (d *Device) Bufferf(buffer uint32, param int32, value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Bufferfv">func (d *Device) Bufferfv(buffer uint32, param int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Bufferi">func (d *Device) Bufferi(buffer uint32, param int32, value int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Bufferiv">func (d *Device) Bufferiv(buffer uint32, param int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.CaptureSamples">func (d *Device) CaptureSamples(buffer unsafe.Pointer, n int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Close">func (d *Device) Close()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.DeleteBuffers">func (d *Device) DeleteBuffers(n int32, buffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.DeleteSources">func (d *Device) DeleteSources(n int32, sources *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Disable">func (d *Device) Disable(capability int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.DistanceModel">func (d *Device) DistanceModel(distanceModel int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.DopplerFactor">func (d *Device) DopplerFactor(value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.DopplerVelocity">func (d *Device) DopplerVelocity(value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Enable">func (d *Device) Enable(capability int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GenBuffers">func (d *Device) GenBuffers(n int32, buffers *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GenSources">func (d *Device) GenSources(n int32, sources *uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBoolean">func (d *Device) GetBoolean(param int32) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBooleanv">func (d *Device) GetBooleanv(param int32, values *uint8)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBuffer3f">func (d *Device) GetBuffer3f(buffer uint32, param int32, value1, value2, value3 *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBuffer3i">func (d *Device) GetBuffer3i(buffer uint32, param int32, value1, value2, value3 *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBufferSamplesSOFT">func (d *Device) GetBufferSamplesSOFT(buffer uint32, offset, samples, channels, t int32, data unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBufferf">func (d *Device) GetBufferf(buffer uint32, param int32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBufferfv">func (d *Device) GetBufferfv(buffer uint32, param int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBufferi">func (d *Device) GetBufferi(buffer uint32, param int32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetBufferiv">func (d *Device) GetBufferiv(buffer uint32, param int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetDouble">func (d *Device) GetDouble(param int32) float64</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetDoublev">func (d *Device) GetDoublev(param int32, values *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetEnumValue">func (d *Device) GetEnumValue(name string) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetFloat">func (d *Device) GetFloat(param int32) float32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetFloatv">func (d *Device) GetFloatv(param int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetInteger">func (d *Device) GetInteger(param int32) int32</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetIntegerv">func (d *Device) GetIntegerv(param int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetListener3f">func (d *Device) GetListener3f(param int32, value1, value2, value3 *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetListener3i">func (d *Device) GetListener3i(param int32, value1, value2, value3 *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetListenerf">func (d *Device) GetListenerf(param int32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetListenerfv">func (d *Device) GetListenerfv(param int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetListeneri">func (d *Device) GetListeneri(param int32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetListeneriv">func (d *Device) GetListeneriv(param int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetProcAddress">func (d *Device) GetProcAddress(name string) unsafe.Pointer</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSource3dSOFT">func (d *Device) GetSource3dSOFT(source uint32, param int32, value1, value2, value3 *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSource3f">func (d *Device) GetSource3f(source uint32, param int32, value1, value2, value3 *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSource3i">func (d *Device) GetSource3i(source uint32, param int32, value1, value2, value3 *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSource3i64SOFT">func (d *Device) GetSource3i64SOFT(source uint32, param int32, value1, value2, value3 *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourcedSOFT">func (d *Device) GetSourcedSOFT(source uint32, param int32, value *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourcedvSOFT">func (d *Device) GetSourcedvSOFT(source uint32, param int32, values *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourcef">func (d *Device) GetSourcef(source uint32, param int32, value *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourcefv">func (d *Device) GetSourcefv(source uint32, param int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourcei">func (d *Device) GetSourcei(source uint32, param int32, value *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourcei64SOFT">func (d *Device) GetSourcei64SOFT(source uint32, param int32, value *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourcei64vSOFT">func (d *Device) GetSourcei64vSOFT(source uint32, param int32, values *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetSourceiv">func (d *Device) GetSourceiv(source uint32, param int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.GetString">func (d *Device) GetString(param int32) string</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.InitCapture">func (d *Device) InitCapture(frequency uint32, format, bufferSize int32) error</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.IsBuffer">func (d *Device) IsBuffer(buffer uint32) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.IsBufferFormatSupportedSOFT">func (d *Device) IsBufferFormatSupportedSOFT(format int32) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.IsEnabled">func (d *Device) IsEnabled(capability int32) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.IsExtensionPresent">func (d *Device) IsExtensionPresent(name string) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.IsSource">func (d *Device) IsSource(source uint32) bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Listener3f">func (d *Device) Listener3f(param int32, value1, value2, value3 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Listener3i">func (d *Device) Listener3i(param int32, value1, value2, value3 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Listenerf">func (d *Device) Listenerf(param int32, value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Listenerfv">func (d *Device) Listenerfv(param int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Listeneri">func (d *Device) Listeneri(param int32, value int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Listeneriv">func (d *Device) Listeneriv(param int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Source3dSOFT">func (d *Device) Source3dSOFT(source uint32, param int32, value1, value2, value3 float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Source3f">func (d *Device) Source3f(source uint32, param int32, value1, value2, value3 float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Source3i">func (d *Device) Source3i(source uint32, param int32, value1, value2, value3 int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Source3i64SOFT">func (d *Device) Source3i64SOFT(source uint32, param int32, value1, value2, value3 int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourcePause">func (d *Device) SourcePause(source uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourcePausev">func (d *Device) SourcePausev(sources []uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourcePlay">func (d *Device) SourcePlay(source uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourcePlayv">func (d *Device) SourcePlayv(sources []uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourceQueueBuffers">func (d *Device) SourceQueueBuffers(source uint32, buffers []uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourceRewind">func (d *Device) SourceRewind(source uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourceRewindv">func (d *Device) SourceRewindv(sources []uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourceStop">func (d *Device) SourceStop(source uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourceStopv">func (d *Device) SourceStopv(sources []uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourceUnqueueBuffers">func (d *Device) SourceUnqueueBuffers(source uint32, buffers []uint32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourcedSOFT">func (d *Device) SourcedSOFT(source uint32, param int32, value float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SourcedvSOFT">func (d *Device) SourcedvSOFT(source uint32, param int32, values *float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Sourcef">func (d *Device) Sourcef(source uint32, param int32, value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Sourcefv">func (d *Device) Sourcefv(source uint32, param int32, values *float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Sourcei">func (d *Device) Sourcei(source uint32, param int32, value int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Sourcei64SOFT">func (d *Device) Sourcei64SOFT(source uint32, param int32, value int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Sourcei64vSOFT">func (d *Device) Sourcei64vSOFT(source uint32, param int32, values *int64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.Sourceiv">func (d *Device) Sourceiv(source uint32, param int32, values *int32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.SpeedOfSound">func (d *Device) SpeedOfSound(value float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.StartCapture">func (d *Device) StartCapture()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Device.StopCapture">func (d *Device) StopCapture()</a></span></span>
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	// Context attribute: &lt;int32&gt; Hz.
	ALC_FREQUENCY	int32	= C.ALC_FREQUENCY

	// Context attribute: &lt;int32&gt; Hz.
	ALC_REFRESH	int32	= C.ALC_REFRESH

	// Context attribute: TRUE or FALSE.
	ALC_SYNC	int32	= C.ALC_SYNC

	// Context attribute: &lt;int32&gt; requested Mono (3D) Sources.
	ALC_MONO_SOURCES	int32	= C.ALC_MONO_SOURCES

	// Context attribute: &lt;int32&gt; requested Stereo Sources.
	ALC_STEREO_SOURCES	int32	= C.ALC_STEREO_SOURCES

	// Runtime ALC version.
	ALC_MAJOR_VERSION	int32	= C.ALC_MAJOR_VERSION
	ALC_MINOR_VERSION	int32	= C.ALC_MINOR_VERSION

	// Context attribute list properties.
	ALC_ATTRIBUTES_SIZE	int32	= C.ALC_ATTRIBUTES_SIZE
	ALC_ALL_ATTRIBUTES	int32	= C.ALC_ALL_ATTRIBUTES

	// String for the default device specifier.
	ALC_DEFAULT_DEVICE_SPECIFIER	int32	= C.ALC_DEFAULT_DEVICE_SPECIFIER

	// String for the given device&#39;s specifier.
	//
	// If device handle is NULL, it is instead a null-char separated list of
	// strings of known device specifiers (list ends with an empty string).
	ALC_DEVICE_SPECIFIER	int32	= C.ALC_DEVICE_SPECIFIER

	// String for space-separated list of ALC extensions.
	ALC_EXTENSIONS	int32	= C.ALC_EXTENSIONS

	// Capture extension
	ALC_EXT_CAPTURE	int32	= C.ALC_EXT_CAPTURE

	// String for the given capture device&#39;s specifier.
	//
	// If device handle is NULL, it is instead a null-char separated list of
	// strings of known capture device specifiers (list ends with an empty string).
	ALC_CAPTURE_DEVICE_SPECIFIER	int32	= C.ALC_CAPTURE_DEVICE_SPECIFIER

	// String for the default capture device specifier.
	ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER	int32	= C.ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER

	// Number of sample frames available for capture.
	ALC_CAPTURE_SAMPLES	int32	= C.ALC_CAPTURE_SAMPLES

	// Enumerate All extension
	ALC_ENUMERATE_ALL_EXT	int32	= C.ALC_ENUMERATE_ALL_EXT

	// String for the default extended device specifier.
	ALC_DEFAULT_ALL_DEVICES_SPECIFIER	int32	= C.ALC_DEFAULT_ALL_DEVICES_SPECIFIER

	// String for the given extended device&#39;s specifier.
	//
	// If device handle is NULL, it is instead a null-char separated list of
	// strings of known extended device specifiers (list ends with an empty string).
	ALC_ALL_DEVICES_SPECIFIER	int32	= C.ALC_ALL_DEVICES_SPECIFIER
)</pre>
		<p></p>
	
		<pre>const (
	// &#34;no distance model&#34; or &#34;no buffer&#34;
	NONE	int32	= C.AL_NONE

	// Boolean False.
	FALSE	int32	= C.AL_FALSE

	// Boolean True.
	TRUE	int32	= C.AL_TRUE

	// Relative source.
	// Type:	uint8
	// Range:   [TRUE, FALSE]
	// Default: FALSE
	//
	// Specifies if the Source has relative coordinates.
	SOURCE_RELATIVE	int32	= C.AL_SOURCE_RELATIVE

	// Inner cone angle, in degrees.
	// Type:	int32, float32
	// Range:   [0 - 360]
	// Default: 360
	//
	// The angle covered by the inner cone, where the source will not attenuate.
	CONE_INNER_ANGLE	int32	= C.AL_CONE_INNER_ANGLE

	// Outer cone angle, in degrees.
	// Range:   [0 - 360]
	// Default: 360
	//
	// The angle covered by the outer cone, where the source will be fully
	// attenuated.
	CONE_OUTER_ANGLE	int32	= C.AL_CONE_OUTER_ANGLE

	// Source pitch.
	// Type:	float32
	// Range:   [0.5 - 2.0]
	// Default: 1.0
	//
	// A multiplier for the frequency (sample rate) of the source&#39;s buffer.
	PITCH	int32	= C.AL_PITCH

	// Source or listener position.
	// Type:	float32[3], int32[3]
	// Default: {0, 0, 0}
	//
	// The source or listener location in three dimensional space.
	//
	// OpenAL, like OpenGL, uses a right handed coordinate system, where in a
	// frontal default view X (thumb) points right, Y points up (index finger), and
	// Z points towards the viewer/camera (middle finger).
	//
	// To switch from a left handed coordinate system, flip the sign on the Z
	// coordinate.
	POSITION	int32	= C.AL_POSITION

	// Source direction.
	// Type:	float32[3], int32[3]
	// Default: {0, 0, 0}
	//
	// Specifies the current direction in local space.
	// A zero-length vector specifies an omni-directional source (cone is ignored).
	DIRECTION	int32	= C.AL_DIRECTION

	// Source or listener velocity.
	// Type:	float32[3], int32[3]
	// Default: {0, 0, 0}
	//
	// Specifies the current velocity in local space.
	VELOCITY	int32	= C.AL_VELOCITY

	// Source looping.
	// Type:	uint8
	// Range:   [TRUE, FALSE]
	// Default: FALSE
	//
	// Specifies whether source is looping.
	LOOPING	int32	= C.AL_LOOPING

	// Source buffer.
	// Type:  uint32
	// Range: any valid Buffer.
	//
	// Specifies the buffer to provide sound samples.
	BUFFER	int32	= C.AL_BUFFER

	// Source or listener gain.
	// Type:  float32
	// Range: [0.0 - ]
	//
	// A value of 1.0 means unattenuated. Each division by 2 equals an attenuation
	// of about -6dB. Each multiplicaton by 2 equals an amplification of about
	// &#43;6dB.
	//
	// A value of 0.0 is meaningless with respect to a logarithmic scale; it is
	// silent.
	GAIN	int32	= C.AL_GAIN

	// Minimum source gain.
	// Type:  float32
	// Range: [0.0 - 1.0]
	//
	// The minimum gain allowed for a source, after distance and cone attenation is
	// applied (if applicable).
	MIN_GAIN	int32	= C.AL_MIN_GAIN

	// Maximum source gain.
	// Type:  float32
	// Range: [0.0 - 1.0]
	//
	// The maximum gain allowed for a source, after distance and cone attenation is
	// applied (if applicable).
	MAX_GAIN	int32	= C.AL_MAX_GAIN

	// Listener orientation.
	// Type: float32[6]
	// Default: {0.0, 0.0, -1.0, 0.0, 1.0, 0.0}
	//
	// Effectively two three dimensional vectors. The first vector is the front (or
	// &#34;at&#34;) and the second is the top (or &#34;up&#34;).
	//
	// Both vectors are in local space.
	ORIENTATION	int32	= C.AL_ORIENTATION

	// Source state (query only).
	// Type:  int32
	// Range: [INITIAL, PLAYING, PAUSED, STOPPED]
	SOURCE_STATE	int32	= C.AL_SOURCE_STATE

	// Source state value.
	INITIAL	int32	= C.AL_INITIAL
	PLAYING	int32	= C.AL_PLAYING
	PAUSED	int32	= C.AL_PAUSED
	STOPPED	int32	= C.AL_STOPPED

	// Source Buffer Queue size (query only).
	// Type: int32
	//
	// The number of buffers queued using alSourceQueueBuffers, minus the buffers
	// removed with alSourceUnqueueBuffers.
	BUFFERS_QUEUED	int32	= C.AL_BUFFERS_QUEUED

	// Source Buffer Queue processed count (query only).
	// Type: int32
	//
	// The number of queued buffers that have been fully processed, and can be
	// removed with alSourceUnqueueBuffers.
	//
	// Looping sources will never fully process buffers because they will be set to
	// play again for when the source loops.
	BUFFERS_PROCESSED	int32	= C.AL_BUFFERS_PROCESSED

	// Source reference distance.
	// Type:	float32
	// Range:   [0.0 - ]
	// Default: 1.0
	//
	// The distance in units that no attenuation occurs.
	//
	// At 0.0, no distance attenuation ever occurs on non-linear attenuation models.
	REFERENCE_DISTANCE	int32	= C.AL_REFERENCE_DISTANCE

	// Source rolloff factor.
	// Type:	float32
	// Range:   [0.0 - ]
	// Default: 1.0
	//
	// Multiplier to exaggerate or diminish distance attenuation.
	//
	// At 0.0, no distance attenuation ever occurs.
	ROLLOFF_FACTOR	int32	= C.AL_ROLLOFF_FACTOR

	// Outer cone gain.
	// Type:	float32
	// Range:   [0.0 - 1.0]
	// Default: 0.0
	//
	// The gain attenuation applied when the listener is outside of the source&#39;s
	// outer cone.
	CONE_OUTER_GAIN	int32	= C.AL_CONE_OUTER_GAIN

	// Source maximum distance.
	// Type:	float32
	// Range:   [0.0 - ]
	// Default: &#43;inf
	//
	// The distance above which the source is not attenuated any further with a
	// clamped distance model, or where attenuation reaches 0.0 gain for linear
	// distance models with a default rolloff factor.
	MAX_DISTANCE	int32	= C.AL_MAX_DISTANCE

	// Source buffer position, in seconds
	SEC_OFFSET	int32	= C.AL_SEC_OFFSET

	// Source buffer position, in sample frames
	SAMPLE_OFFSET	int32	= C.AL_SAMPLE_OFFSET

	// Source buffer position, in bytes
	BYTE_OFFSET	int32	= C.AL_BYTE_OFFSET

	// Source type (query only).
	// Type:  int32
	// Range: [STATIC, STREAMING, UNDETERMINED]
	//
	// A Source is Static if a Buffer has been attached using BUFFER.
	//
	// A Source is Streaming if one or more Buffers have been attached using
	// alSourceQueueBuffers.
	//
	// A Source is Undetermined when it has the NULL buffer attached using
	// BUFFER.
	SOURCE_TYPE	int32	= C.AL_SOURCE_TYPE

	// Source type value.
	STATIC		int32	= C.AL_STATIC
	STREAMING	int32	= C.AL_STREAMING
	UNDETERMINED	int32	= C.AL_UNDETERMINED

	// Buffer format specifier.
	FORMAT_MONO8	int32	= C.AL_FORMAT_MONO8
	FORMAT_MONO16	int32	= C.AL_FORMAT_MONO16
	FORMAT_STEREO8	int32	= C.AL_FORMAT_STEREO8
	FORMAT_STEREO16	int32	= C.AL_FORMAT_STEREO16

	// Buffer frequency (query only).
	FREQUENCY	int32	= C.AL_FREQUENCY

	// Buffer bits per sample (query only).
	BITS	int32	= C.AL_BITS

	// Buffer channel count (query only).
	CHANNELS	int32	= C.AL_CHANNELS

	// Buffer data size (query only).
	SIZE	int32	= C.AL_SIZE

	// Context string: Vendor ID.
	VENDOR	int32	= C.AL_VENDOR

	// Context string: Version.
	VERSION	int32	= C.AL_VERSION

	// Context string: Renderer ID.
	RENDERER	int32	= C.AL_RENDERER

	// Context string: Space-separated extension list.
	EXTENSIONS	int32	= C.AL_EXTENSIONS

	// Doppler scale.
	// Type:	float32
	// Range:   [0.0 - ]
	// Default: 1.0
	//
	// Scale for source and listener velocities.
	DOPPLER_FACTOR	int32	= C.AL_DOPPLER_FACTOR

	// Doppler velocity (deprecated).
	//
	// A multiplier applied to the Speed of Sound.
	DOPPLER_VELOCITY	int32	= C.AL_DOPPLER_VELOCITY

	// Speed of Sound, in units per second.
	// Type:	float32
	// Range:   [0.0001 - ]
	// Default: 343.3
	//
	// The speed at which sound waves are assumed to travel, when calculating the
	// doppler effect.
	SPEED_OF_SOUND	int32	= C.AL_SPEED_OF_SOUND

	// Distance attenuation model.
	// Type:	int32
	// Range:   [NONE, INVERSE_DISTANCE, INVERSE_DISTANCE_CLAMPED,
	//		   LINEAR_DISTANCE, LINEAR_DISTANCE_CLAMPED,
	//		   EXPONENT_DISTANCE, EXPONENT_DISTANCE_CLAMPED]
	// Default: INVERSE_DISTANCE_CLAMPED
	//
	// The model by which sources attenuate with distance.
	//
	// None	 - No distance attenuation.
	// Inverse  - Doubling the distance halves the source gain.
	// Linear   - Linear gain scaling between the reference and max distances.
	// Exponent - Exponential gain dropoff.
	//
	// Clamped variations work like the non-clamped counterparts, except the
	// distance calculated is clamped between the reference and max distances.
	DISTANCE_MODEL	int32	= C.AL_DISTANCE_MODEL

	// Distance model value.
	INVERSE_DISTANCE		int32	= C.AL_INVERSE_DISTANCE
	INVERSE_DISTANCE_CLAMPED	int32	= C.AL_INVERSE_DISTANCE_CLAMPED
	LINEAR_DISTANCE			int32	= C.AL_LINEAR_DISTANCE
	LINEAR_DISTANCE_CLAMPED		int32	= C.AL_LINEAR_DISTANCE_CLAMPED
	EXPONENT_DISTANCE		int32	= C.AL_EXPONENT_DISTANCE
	EXPONENT_DISTANCE_CLAMPED	int32	= C.AL_EXPONENT_DISTANCE_CLAMPED
)</pre>
		<p></p>
	
		<pre>const (
	LOKI_IMA_ADPCM_format		int32	= C.AL_LOKI_IMA_ADPCM_format
	FORMAT_IMA_ADPCM_MONO16_EXT	int32	= C.AL_FORMAT_IMA_ADPCM_MONO16_EXT
	FORMAT_IMA_ADPCM_STEREO16_EXT	int32	= C.AL_FORMAT_IMA_ADPCM_STEREO16_EXT

	LOKI_WAVE_format	int32	= C.AL_LOKI_WAVE_format
	FORMAT_WAVE_EXT		int32	= C.AL_FORMAT_WAVE_EXT

	EXT_vorbis		int32	= C.AL_EXT_vorbis
	FORMAT_VORBIS_EXT	int32	= C.AL_FORMAT_VORBIS_EXT

	LOKI_quadriphonic	int32	= C.AL_LOKI_quadriphonic
	FORMAT_QUAD8_LOKI	int32	= C.AL_FORMAT_QUAD8_LOKI
	FORMAT_QUAD16_LOKI	int32	= C.AL_FORMAT_QUAD16_LOKI

	EXT_float32		int32	= C.AL_EXT_float32
	FORMAT_MONO_FLOAT32	int32	= C.AL_FORMAT_MONO_FLOAT32
	FORMAT_STEREO_FLOAT32	int32	= C.AL_FORMAT_STEREO_FLOAT32

	EXT_double			int32	= C.AL_EXT_double
	FORMAT_MONO_DOUBLE_EXT		int32	= C.AL_FORMAT_MONO_DOUBLE_EXT
	FORMAT_STEREO_DOUBLE_EXT	int32	= C.AL_FORMAT_STEREO_DOUBLE_EXT

	EXT_MULAW		int32	= C.AL_EXT_MULAW
	FORMAT_MONO_MULAW_EXT	int32	= C.AL_FORMAT_MONO_MULAW_EXT
	FORMAT_STEREO_MULAW_EXT	int32	= C.AL_FORMAT_STEREO_MULAW_EXT

	EXT_ALAW		int32	= C.AL_EXT_ALAW
	FORMAT_MONO_ALAW_EXT	int32	= C.AL_FORMAT_MONO_ALAW_EXT
	FORMAT_STEREO_ALAW_EXT	int32	= C.AL_FORMAT_STEREO_ALAW_EXT

	ALC_LOKI_audio_channel	int32	= C.ALC_LOKI_audio_channel
	ALC_CHAN_MAIN_LOKI	int32	= C.ALC_CHAN_MAIN_LOKI
	ALC_CHAN_PCM_LOKI	int32	= C.ALC_CHAN_PCM_LOKI
	ALC_CHAN_CD_LOKI	int32	= C.ALC_CHAN_CD_LOKI

	EXT_MCFORMATS	int32	= C.AL_EXT_MCFORMATS
	FORMAT_QUAD8	int32	= C.AL_FORMAT_QUAD8
	FORMAT_QUAD16	int32	= C.AL_FORMAT_QUAD16
	FORMAT_QUAD32	int32	= C.AL_FORMAT_QUAD32
	FORMAT_REAR8	int32	= C.AL_FORMAT_REAR8
	FORMAT_REAR16	int32	= C.AL_FORMAT_REAR16
	FORMAT_REAR32	int32	= C.AL_FORMAT_REAR32
	FORMAT_51CHN8	int32	= C.AL_FORMAT_51CHN8
	FORMAT_51CHN16	int32	= C.AL_FORMAT_51CHN16
	FORMAT_51CHN32	int32	= C.AL_FORMAT_51CHN32
	FORMAT_61CHN8	int32	= C.AL_FORMAT_61CHN8
	FORMAT_61CHN16	int32	= C.AL_FORMAT_61CHN16
	FORMAT_61CHN32	int32	= C.AL_FORMAT_61CHN32
	FORMAT_71CHN8	int32	= C.AL_FORMAT_71CHN8
	FORMAT_71CHN16	int32	= C.AL_FORMAT_71CHN16
	FORMAT_71CHN32	int32	= C.AL_FORMAT_71CHN32

	EXT_MULAW_MCFORMATS	int32	= C.AL_EXT_MULAW_MCFORMATS
	FORMAT_MONO_MULAW	int32	= C.AL_FORMAT_MONO_MULAW
	FORMAT_STEREO_MULAW	int32	= C.AL_FORMAT_STEREO_MULAW
	FORMAT_QUAD_MULAW	int32	= C.AL_FORMAT_QUAD_MULAW
	FORMAT_REAR_MULAW	int32	= C.AL_FORMAT_REAR_MULAW
	FORMAT_51CHN_MULAW	int32	= C.AL_FORMAT_51CHN_MULAW
	FORMAT_61CHN_MULAW	int32	= C.AL_FORMAT_61CHN_MULAW
	FORMAT_71CHN_MULAW	int32	= C.AL_FORMAT_71CHN_MULAW

	EXT_IMA4		int32	= C.AL_EXT_IMA4
	FORMAT_MONO_IMA4	int32	= C.AL_FORMAT_MONO_IMA4
	FORMAT_STEREO_IMA4	int32	= C.AL_FORMAT_STEREO_IMA4

	EXT_STATIC_BUFFER	int32	= C.AL_EXT_STATIC_BUFFER

	ALC_EXT_EFX	int32	= C.ALC_EXT_EFX

	ALC_EXT_disconnect	int32	= C.ALC_EXT_disconnect
	ALC_CONNECTED		int32	= C.ALC_CONNECTED

	ALC_EXT_thread_local_context	int32	= C.ALC_EXT_thread_local_context

	EXT_source_distance_model	int32	= C.AL_EXT_source_distance_model
	SOURCE_DISTANCE_MODEL		int32	= C.AL_SOURCE_DISTANCE_MODEL

	SOFT_buffer_sub_data	int32	= C.AL_SOFT_buffer_sub_data
	BYTE_RW_OFFSETS_SOFT	int32	= C.AL_BYTE_RW_OFFSETS_SOFT
	SAMPLE_RW_OFFSETS_SOFT	int32	= C.AL_SAMPLE_RW_OFFSETS_SOFT

	SOFT_loop_points	int32	= C.AL_SOFT_loop_points
	LOOP_POINTS_SOFT	int32	= C.AL_LOOP_POINTS_SOFT

	EXT_FOLDBACK		int32	= C.AL_EXT_FOLDBACK
	EXT_FOLDBACK_NAME		= C.AL_EXT_FOLDBACK_NAME
	FOLDBACK_EVENT_BLOCK	int32	= C.AL_FOLDBACK_EVENT_BLOCK
	FOLDBACK_EVENT_START	int32	= C.AL_FOLDBACK_EVENT_START
	FOLDBACK_EVENT_STOP	int32	= C.AL_FOLDBACK_EVENT_STOP
	FOLDBACK_MODE_MONO	int32	= C.AL_FOLDBACK_MODE_MONO
	FOLDBACK_MODE_STEREO	int32	= C.AL_FOLDBACK_MODE_STEREO

	ALC_EXT_DEDICATED			int32	= C.ALC_EXT_DEDICATED
	DEDICATED_GAIN				int32	= C.AL_DEDICATED_GAIN
	EFFECT_DEDICATED_DIALOGUE		int32	= C.AL_EFFECT_DEDICATED_DIALOGUE
	EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT	int32	= C.AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT

	SOFT_buffer_samples	int32	= C.AL_SOFT_buffer_samples

	// Channel configurations
	MONO_SOFT	int32	= C.AL_MONO_SOFT
	STEREO_SOFT	int32	= C.AL_STEREO_SOFT
	REAR_SOFT	int32	= C.AL_REAR_SOFT
	QUAD_SOFT	int32	= C.AL_QUAD_SOFT
	AL_5POINT1_SOFT	int32	= C.AL_5POINT1_SOFT
	AL_6POINT1_SOFT	int32	= C.AL_6POINT1_SOFT
	AL_7POINT1_SOFT	int32	= C.AL_7POINT1_SOFT

	// Sample types
	BYTE_SOFT		int32	= C.AL_BYTE_SOFT
	UNSIGNED_BYTE_SOFT	int32	= C.AL_UNSIGNED_BYTE_SOFT
	SHORT_SOFT		int32	= C.AL_SHORT_SOFT
	UNSIGNED_SHORT_SOFT	int32	= C.AL_UNSIGNED_SHORT_SOFT
	INT_SOFT		int32	= C.AL_INT_SOFT
	UNSIGNED_INT_SOFT	int32	= C.AL_UNSIGNED_INT_SOFT
	FLOAT_SOFT		int32	= C.AL_FLOAT_SOFT
	DOUBLE_SOFT		int32	= C.AL_DOUBLE_SOFT
	BYTE3_SOFT		int32	= C.AL_BYTE3_SOFT
	UNSIGNED_BYTE3_SOFT	int32	= C.AL_UNSIGNED_BYTE3_SOFT

	// Storage formats
	MONO8_SOFT		int32	= C.AL_MONO8_SOFT
	MONO16_SOFT		int32	= C.AL_MONO16_SOFT
	MONO32F_SOFT		int32	= C.AL_MONO32F_SOFT
	STEREO8_SOFT		int32	= C.AL_STEREO8_SOFT
	STEREO16_SOFT		int32	= C.AL_STEREO16_SOFT
	STEREO32F_SOFT		int32	= C.AL_STEREO32F_SOFT
	QUAD8_SOFT		int32	= C.AL_QUAD8_SOFT
	QUAD16_SOFT		int32	= C.AL_QUAD16_SOFT
	QUAD32F_SOFT		int32	= C.AL_QUAD32F_SOFT
	REAR8_SOFT		int32	= C.AL_REAR8_SOFT
	REAR16_SOFT		int32	= C.AL_REAR16_SOFT
	REAR32F_SOFT		int32	= C.AL_REAR32F_SOFT
	AL_5POINT1_8_SOFT	int32	= C.AL_5POINT1_8_SOFT
	AL_5POINT1_16_SOFT	int32	= C.AL_5POINT1_16_SOFT
	AL_5POINT1_32F_SOFT	int32	= C.AL_5POINT1_32F_SOFT
	AL_6POINT1_8_SOFT	int32	= C.AL_6POINT1_8_SOFT
	AL_6POINT1_16_SOFT	int32	= C.AL_6POINT1_16_SOFT
	AL_6POINT1_32F_SOFT	int32	= C.AL_6POINT1_32F_SOFT
	AL_7POINT1_8_SOFT	int32	= C.AL_7POINT1_8_SOFT
	AL_7POINT1_16_SOFT	int32	= C.AL_7POINT1_16_SOFT
	AL_7POINT1_32F_SOFT	int32	= C.AL_7POINT1_32F_SOFT

	// Buffer attributes
	INTERNAL_FORMAT_SOFT	int32	= C.AL_INTERNAL_FORMAT_SOFT
	BYTE_LENGTH_SOFT	int32	= C.AL_BYTE_LENGTH_SOFT
	SAMPLE_LENGTH_SOFT	int32	= C.AL_SAMPLE_LENGTH_SOFT
	SEC_LENGTH_SOFT		int32	= C.AL_SEC_LENGTH_SOFT

	SOFT_direct_channels	int32	= C.AL_SOFT_direct_channels
	DIRECT_CHANNELS_SOFT	int32	= C.AL_DIRECT_CHANNELS_SOFT

	ALC_SOFT_loopback		int32	= C.ALC_SOFT_loopback
	ALC_FORMAT_CHANNELS_SOFT	int32	= C.ALC_FORMAT_CHANNELS_SOFT
	ALC_FORMAT_TYPE_SOFT		int32	= C.ALC_FORMAT_TYPE_SOFT

	// Sample types
	ALC_BYTE_SOFT		int32	= C.ALC_BYTE_SOFT
	ALC_UNSIGNED_BYTE_SOFT	int32	= C.ALC_UNSIGNED_BYTE_SOFT
	ALC_SHORT_SOFT		int32	= C.ALC_SHORT_SOFT
	ALC_UNSIGNED_SHORT_SOFT	int32	= C.ALC_UNSIGNED_SHORT_SOFT
	ALC_INT_SOFT		int32	= C.ALC_INT_SOFT
	ALC_UNSIGNED_INT_SOFT	int32	= C.ALC_UNSIGNED_INT_SOFT
	ALC_FLOAT_SOFT		int32	= C.ALC_FLOAT_SOFT

	// Channel configurations
	ALC_MONO_SOFT		int32	= C.ALC_MONO_SOFT
	ALC_STEREO_SOFT		int32	= C.ALC_STEREO_SOFT
	ALC_QUAD_SOFT		int32	= C.ALC_QUAD_SOFT
	ALC_5POINT1_SOFT	int32	= C.ALC_5POINT1_SOFT
	ALC_6POINT1_SOFT	int32	= C.ALC_6POINT1_SOFT
	ALC_7POINT1_SOFT	int32	= C.ALC_7POINT1_SOFT

	EXT_STEREO_ANGLES	int32	= C.AL_EXT_STEREO_ANGLES
	STEREO_ANGLES		int32	= C.AL_STEREO_ANGLES

	EXT_SOURCE_RADIUS	int32	= C.AL_EXT_SOURCE_RADIUS
	SOURCE_RADIUS		int32	= C.AL_SOURCE_RADIUS

	SOFT_source_latency		int32	= C.AL_SOFT_source_latency
	SAMPLE_OFFSET_LATENCY_SOFT	int32	= C.AL_SAMPLE_OFFSET_LATENCY_SOFT
	SEC_OFFSET_LATENCY_SOFT		int32	= C.AL_SEC_OFFSET_LATENCY_SOFT
)</pre>
		<p></p>
	
</span>





<h1 id="variables" class="hdr pkg hdr-variables"><a href="#variables" title="permalink">»</a>&nbsp;Variables <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg variables">
	
		<pre>var (
	ErrInvalidName		= errors.New(&#34;openal: invalid name parameter&#34;)
	ErrInvalidEnum		= errors.New(&#34;openal: invalid enum parameter&#34;)
	ErrInvalidValue		= errors.New(&#34;openal: invalid value parameter&#34;)
	ErrInvalidOperation	= errors.New(&#34;openal: invalid operation&#34;)
	ErrOutOfMemory		= errors.New(&#34;openal: out of memory&#34;)

	ErrCantOpenDevice		= errors.New(&#34;openal: cant open device&#34;)
	ErrCantCreateContext		= errors.New(&#34;openal: cant create context&#34;)
	ErrCantMakeContextCurrent	= errors.New(&#34;openal: cant make context current&#34;)
)</pre>
		<p></p>
	
</span>





	<h1 id="AlcGetIntegerv" class="hdr pkg hdr-function"><a href="#AlcGetIntegerv" title="permalink">»</a>&nbsp;func AlcGetIntegerv(d *Device, param, size int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func AlcGetIntegerv(d *Device, param, size int32, values *int32)</pre>
		
	</span>

	<h1 id="AlcGetRawString" class="hdr pkg hdr-function"><a href="#AlcGetRawString" title="permalink">»</a>&nbsp;func AlcGetRawString(d *Device, param int32) uintptr <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func AlcGetRawString(d *Device, param int32) uintptr</pre>
		
	</span>

	<h1 id="AlcGetString" class="hdr pkg hdr-function"><a href="#AlcGetString" title="permalink">»</a>&nbsp;func AlcGetString(d *Device, param int32) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func AlcGetString(d *Device, param int32) string</pre>
		
	</span>

	<h1 id="ErrorHandler" class="hdr pkg hdr-function"><a href="#ErrorHandler" title="permalink">»</a>&nbsp;func ErrorHandler() func(error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func ErrorHandler() func(error)</pre>
		
	</span>

	<h1 id="SetErrorHandler" class="hdr pkg hdr-function"><a href="#SetErrorHandler" title="permalink">»</a>&nbsp;func SetErrorHandler(f func(error)) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func SetErrorHandler(f func(error))</pre>
		
	</span>

	<h1 id="StringList" class="hdr pkg hdr-function"><a href="#StringList" title="permalink">»</a>&nbsp;func StringList(raw uintptr) []string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func StringList(raw uintptr) []string</pre>
		<p>
StringList splits a string list. It must be NUL seperated with two NULs at
the end.
</p>

	</span>





	
	<h1 id="Device" class="hdr pkg hdr-type"><a href="#Device" title="permalink">»</a>&nbsp;type Device <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Device struct {
	// contains filtered or unexported fields
}</pre>
		
	</span>

	
	
		<h1 id="OpenDevice" class="hdr pkg hdr-function"><a href="#OpenDevice" title="permalink">»</a>&nbsp;func OpenDevice(name string, ctxAttribs []int32) (*Device, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func OpenDevice(name string, ctxAttribs []int32) (*Device, error)</pre>
			<p>
OpenDevice opens the named device (or &#34;&#34; for the default device).
</p>

		</span>
	

	
	
		
		<h1 id="Device.AlcGetEnumValue" class="hdr pkg hdr-method"><a href="#Device.AlcGetEnumValue" title="permalink">»</a>&nbsp;func (d *Device) AlcGetEnumValue(name string) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) AlcGetEnumValue(name string) int32</pre>
			
		</span>
	
		
		<h1 id="Device.AlcGetIntegerv" class="hdr pkg hdr-method"><a href="#Device.AlcGetIntegerv" title="permalink">»</a>&nbsp;func (d *Device) AlcGetIntegerv(param int32, size int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) AlcGetIntegerv(param int32, size int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.AlcGetProcAddress" class="hdr pkg hdr-method"><a href="#Device.AlcGetProcAddress" title="permalink">»</a>&nbsp;func (d *Device) AlcGetProcAddress(name string) unsafe.Pointer <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) AlcGetProcAddress(name string) unsafe.Pointer</pre>
			
		</span>
	
		
		<h1 id="Device.AlcGetRawString" class="hdr pkg hdr-method"><a href="#Device.AlcGetRawString" title="permalink">»</a>&nbsp;func (d *Device) AlcGetRawString(param int32) uintptr <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) AlcGetRawString(param int32) uintptr</pre>
			
		</span>
	
		
		<h1 id="Device.AlcGetString" class="hdr pkg hdr-method"><a href="#Device.AlcGetString" title="permalink">»</a>&nbsp;func (d *Device) AlcGetString(param int32) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) AlcGetString(param int32) string</pre>
			
		</span>
	
		
		<h1 id="Device.AlcIsExtensionPresent" class="hdr pkg hdr-method"><a href="#Device.AlcIsExtensionPresent" title="permalink">»</a>&nbsp;func (d *Device) AlcIsExtensionPresent(name string) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) AlcIsExtensionPresent(name string) bool</pre>
			
		</span>
	
		
		<h1 id="Device.Buffer3f" class="hdr pkg hdr-method"><a href="#Device.Buffer3f" title="permalink">»</a>&nbsp;func (d *Device) Buffer3f(buffer uint32, param int32, value1, value2, value3 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Buffer3f(buffer uint32, param int32, value1, value2, value3 float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Buffer3i" class="hdr pkg hdr-method"><a href="#Device.Buffer3i" title="permalink">»</a>&nbsp;func (d *Device) Buffer3i(buffer uint32, param int32, value1, value2, value3 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Buffer3i(buffer uint32, param int32, value1, value2, value3 int32)</pre>
			
		</span>
	
		
		<h1 id="Device.BufferData" class="hdr pkg hdr-method"><a href="#Device.BufferData" title="permalink">»</a>&nbsp;func (d *Device) BufferData(buffer uint32, format int32, data unsafe.Pointer, size, freq int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) BufferData(buffer uint32, format int32, data unsafe.Pointer, size, freq int32)</pre>
			
		</span>
	
		
		<h1 id="Device.BufferDataStatic" class="hdr pkg hdr-method"><a href="#Device.BufferDataStatic" title="permalink">»</a>&nbsp;func (d *Device) BufferDataStatic(buffer uint32, format int32, data unsafe.Pointer, length, freq int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) BufferDataStatic(buffer uint32, format int32, data unsafe.Pointer, length, freq int32)</pre>
			
		</span>
	
		
		<h1 id="Device.BufferSamplesSOFT" class="hdr pkg hdr-method"><a href="#Device.BufferSamplesSOFT" title="permalink">»</a>&nbsp;func (d *Device) BufferSamplesSOFT(buffer uint32, sampleRate uint32, internalFormat, samples, channels, t int32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) BufferSamplesSOFT(buffer uint32, sampleRate uint32, internalFormat, samples, channels, t int32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Device.BufferSubDataSOFT" class="hdr pkg hdr-method"><a href="#Device.BufferSubDataSOFT" title="permalink">»</a>&nbsp;func (d *Device) BufferSubDataSOFT(buffer uint32, format int32, data unsafe.Pointer, offset, length int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) BufferSubDataSOFT(buffer uint32, format int32, data unsafe.Pointer, offset, length int32)</pre>
			
		</span>
	
		
		<h1 id="Device.BufferSubSamplesSOFT" class="hdr pkg hdr-method"><a href="#Device.BufferSubSamplesSOFT" title="permalink">»</a>&nbsp;func (d *Device) BufferSubSamplesSOFT(buffer uint32, offset, samples, channels, t int32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) BufferSubSamplesSOFT(buffer uint32, offset, samples, channels, t int32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Device.Bufferf" class="hdr pkg hdr-method"><a href="#Device.Bufferf" title="permalink">»</a>&nbsp;func (d *Device) Bufferf(buffer uint32, param int32, value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Bufferf(buffer uint32, param int32, value float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Bufferfv" class="hdr pkg hdr-method"><a href="#Device.Bufferfv" title="permalink">»</a>&nbsp;func (d *Device) Bufferfv(buffer uint32, param int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Bufferfv(buffer uint32, param int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Bufferi" class="hdr pkg hdr-method"><a href="#Device.Bufferi" title="permalink">»</a>&nbsp;func (d *Device) Bufferi(buffer uint32, param int32, value int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Bufferi(buffer uint32, param int32, value int32)</pre>
			
		</span>
	
		
		<h1 id="Device.Bufferiv" class="hdr pkg hdr-method"><a href="#Device.Bufferiv" title="permalink">»</a>&nbsp;func (d *Device) Bufferiv(buffer uint32, param int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Bufferiv(buffer uint32, param int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.CaptureSamples" class="hdr pkg hdr-method"><a href="#Device.CaptureSamples" title="permalink">»</a>&nbsp;func (d *Device) CaptureSamples(buffer unsafe.Pointer, n int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) CaptureSamples(buffer unsafe.Pointer, n int32)</pre>
			<p>
CaptureSamples fills the buffer with n audio samples.
</p>
<p>
This function will panic if the device is not yet initialized for capturing
audo samples via the InitCapture() method.
</p>
<p>
This function will panic if the device was already closed via the Close()
method.
</p>

		</span>
	
		
		<h1 id="Device.Close" class="hdr pkg hdr-method"><a href="#Device.Close" title="permalink">»</a>&nbsp;func (d *Device) Close() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Close()</pre>
			<p>
Close closes the device. This function will panic if all of the device&#39;s
associated buffers have not been destroyed (indicating a programmer fault).
</p>
<p>
This function will panic if the device was already closed via the Close()
method.
</p>

		</span>
	
		
		<h1 id="Device.DeleteBuffers" class="hdr pkg hdr-method"><a href="#Device.DeleteBuffers" title="permalink">»</a>&nbsp;func (d *Device) DeleteBuffers(n int32, buffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) DeleteBuffers(n int32, buffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.DeleteSources" class="hdr pkg hdr-method"><a href="#Device.DeleteSources" title="permalink">»</a>&nbsp;func (d *Device) DeleteSources(n int32, sources *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) DeleteSources(n int32, sources *uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.Disable" class="hdr pkg hdr-method"><a href="#Device.Disable" title="permalink">»</a>&nbsp;func (d *Device) Disable(capability int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Disable(capability int32)</pre>
			
		</span>
	
		
		<h1 id="Device.DistanceModel" class="hdr pkg hdr-method"><a href="#Device.DistanceModel" title="permalink">»</a>&nbsp;func (d *Device) DistanceModel(distanceModel int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) DistanceModel(distanceModel int32)</pre>
			
		</span>
	
		
		<h1 id="Device.DopplerFactor" class="hdr pkg hdr-method"><a href="#Device.DopplerFactor" title="permalink">»</a>&nbsp;func (d *Device) DopplerFactor(value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) DopplerFactor(value float32)</pre>
			
		</span>
	
		
		<h1 id="Device.DopplerVelocity" class="hdr pkg hdr-method"><a href="#Device.DopplerVelocity" title="permalink">»</a>&nbsp;func (d *Device) DopplerVelocity(value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) DopplerVelocity(value float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Enable" class="hdr pkg hdr-method"><a href="#Device.Enable" title="permalink">»</a>&nbsp;func (d *Device) Enable(capability int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Enable(capability int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GenBuffers" class="hdr pkg hdr-method"><a href="#Device.GenBuffers" title="permalink">»</a>&nbsp;func (d *Device) GenBuffers(n int32, buffers *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GenBuffers(n int32, buffers *uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.GenSources" class="hdr pkg hdr-method"><a href="#Device.GenSources" title="permalink">»</a>&nbsp;func (d *Device) GenSources(n int32, sources *uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GenSources(n int32, sources *uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBoolean" class="hdr pkg hdr-method"><a href="#Device.GetBoolean" title="permalink">»</a>&nbsp;func (d *Device) GetBoolean(param int32) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBoolean(param int32) bool</pre>
			
		</span>
	
		
		<h1 id="Device.GetBooleanv" class="hdr pkg hdr-method"><a href="#Device.GetBooleanv" title="permalink">»</a>&nbsp;func (d *Device) GetBooleanv(param int32, values *uint8) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBooleanv(param int32, values *uint8)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBuffer3f" class="hdr pkg hdr-method"><a href="#Device.GetBuffer3f" title="permalink">»</a>&nbsp;func (d *Device) GetBuffer3f(buffer uint32, param int32, value1, value2, value3 *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBuffer3f(buffer uint32, param int32, value1, value2, value3 *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBuffer3i" class="hdr pkg hdr-method"><a href="#Device.GetBuffer3i" title="permalink">»</a>&nbsp;func (d *Device) GetBuffer3i(buffer uint32, param int32, value1, value2, value3 *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBuffer3i(buffer uint32, param int32, value1, value2, value3 *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBufferSamplesSOFT" class="hdr pkg hdr-method"><a href="#Device.GetBufferSamplesSOFT" title="permalink">»</a>&nbsp;func (d *Device) GetBufferSamplesSOFT(buffer uint32, offset, samples, channels, t int32, data unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBufferSamplesSOFT(buffer uint32, offset, samples, channels, t int32, data unsafe.Pointer)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBufferf" class="hdr pkg hdr-method"><a href="#Device.GetBufferf" title="permalink">»</a>&nbsp;func (d *Device) GetBufferf(buffer uint32, param int32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBufferf(buffer uint32, param int32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBufferfv" class="hdr pkg hdr-method"><a href="#Device.GetBufferfv" title="permalink">»</a>&nbsp;func (d *Device) GetBufferfv(buffer uint32, param int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBufferfv(buffer uint32, param int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBufferi" class="hdr pkg hdr-method"><a href="#Device.GetBufferi" title="permalink">»</a>&nbsp;func (d *Device) GetBufferi(buffer uint32, param int32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBufferi(buffer uint32, param int32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetBufferiv" class="hdr pkg hdr-method"><a href="#Device.GetBufferiv" title="permalink">»</a>&nbsp;func (d *Device) GetBufferiv(buffer uint32, param int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetBufferiv(buffer uint32, param int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetDouble" class="hdr pkg hdr-method"><a href="#Device.GetDouble" title="permalink">»</a>&nbsp;func (d *Device) GetDouble(param int32) float64 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetDouble(param int32) float64</pre>
			
		</span>
	
		
		<h1 id="Device.GetDoublev" class="hdr pkg hdr-method"><a href="#Device.GetDoublev" title="permalink">»</a>&nbsp;func (d *Device) GetDoublev(param int32, values *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetDoublev(param int32, values *float64)</pre>
			
		</span>
	
		
		<h1 id="Device.GetEnumValue" class="hdr pkg hdr-method"><a href="#Device.GetEnumValue" title="permalink">»</a>&nbsp;func (d *Device) GetEnumValue(name string) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetEnumValue(name string) int32</pre>
			
		</span>
	
		
		<h1 id="Device.GetFloat" class="hdr pkg hdr-method"><a href="#Device.GetFloat" title="permalink">»</a>&nbsp;func (d *Device) GetFloat(param int32) float32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetFloat(param int32) float32</pre>
			
		</span>
	
		
		<h1 id="Device.GetFloatv" class="hdr pkg hdr-method"><a href="#Device.GetFloatv" title="permalink">»</a>&nbsp;func (d *Device) GetFloatv(param int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetFloatv(param int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetInteger" class="hdr pkg hdr-method"><a href="#Device.GetInteger" title="permalink">»</a>&nbsp;func (d *Device) GetInteger(param int32) int32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetInteger(param int32) int32</pre>
			
		</span>
	
		
		<h1 id="Device.GetIntegerv" class="hdr pkg hdr-method"><a href="#Device.GetIntegerv" title="permalink">»</a>&nbsp;func (d *Device) GetIntegerv(param int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetIntegerv(param int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetListener3f" class="hdr pkg hdr-method"><a href="#Device.GetListener3f" title="permalink">»</a>&nbsp;func (d *Device) GetListener3f(param int32, value1, value2, value3 *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetListener3f(param int32, value1, value2, value3 *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetListener3i" class="hdr pkg hdr-method"><a href="#Device.GetListener3i" title="permalink">»</a>&nbsp;func (d *Device) GetListener3i(param int32, value1, value2, value3 *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetListener3i(param int32, value1, value2, value3 *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetListenerf" class="hdr pkg hdr-method"><a href="#Device.GetListenerf" title="permalink">»</a>&nbsp;func (d *Device) GetListenerf(param int32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetListenerf(param int32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetListenerfv" class="hdr pkg hdr-method"><a href="#Device.GetListenerfv" title="permalink">»</a>&nbsp;func (d *Device) GetListenerfv(param int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetListenerfv(param int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetListeneri" class="hdr pkg hdr-method"><a href="#Device.GetListeneri" title="permalink">»</a>&nbsp;func (d *Device) GetListeneri(param int32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetListeneri(param int32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetListeneriv" class="hdr pkg hdr-method"><a href="#Device.GetListeneriv" title="permalink">»</a>&nbsp;func (d *Device) GetListeneriv(param int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetListeneriv(param int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetProcAddress" class="hdr pkg hdr-method"><a href="#Device.GetProcAddress" title="permalink">»</a>&nbsp;func (d *Device) GetProcAddress(name string) unsafe.Pointer <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetProcAddress(name string) unsafe.Pointer</pre>
			
		</span>
	
		
		<h1 id="Device.GetSource3dSOFT" class="hdr pkg hdr-method"><a href="#Device.GetSource3dSOFT" title="permalink">»</a>&nbsp;func (d *Device) GetSource3dSOFT(source uint32, param int32, value1, value2, value3 *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSource3dSOFT(source uint32, param int32, value1, value2, value3 *float64)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSource3f" class="hdr pkg hdr-method"><a href="#Device.GetSource3f" title="permalink">»</a>&nbsp;func (d *Device) GetSource3f(source uint32, param int32, value1, value2, value3 *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSource3f(source uint32, param int32, value1, value2, value3 *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSource3i" class="hdr pkg hdr-method"><a href="#Device.GetSource3i" title="permalink">»</a>&nbsp;func (d *Device) GetSource3i(source uint32, param int32, value1, value2, value3 *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSource3i(source uint32, param int32, value1, value2, value3 *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSource3i64SOFT" class="hdr pkg hdr-method"><a href="#Device.GetSource3i64SOFT" title="permalink">»</a>&nbsp;func (d *Device) GetSource3i64SOFT(source uint32, param int32, value1, value2, value3 *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSource3i64SOFT(source uint32, param int32, value1, value2, value3 *int64)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourcedSOFT" class="hdr pkg hdr-method"><a href="#Device.GetSourcedSOFT" title="permalink">»</a>&nbsp;func (d *Device) GetSourcedSOFT(source uint32, param int32, value *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourcedSOFT(source uint32, param int32, value *float64)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourcedvSOFT" class="hdr pkg hdr-method"><a href="#Device.GetSourcedvSOFT" title="permalink">»</a>&nbsp;func (d *Device) GetSourcedvSOFT(source uint32, param int32, values *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourcedvSOFT(source uint32, param int32, values *float64)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourcef" class="hdr pkg hdr-method"><a href="#Device.GetSourcef" title="permalink">»</a>&nbsp;func (d *Device) GetSourcef(source uint32, param int32, value *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourcef(source uint32, param int32, value *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourcefv" class="hdr pkg hdr-method"><a href="#Device.GetSourcefv" title="permalink">»</a>&nbsp;func (d *Device) GetSourcefv(source uint32, param int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourcefv(source uint32, param int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourcei" class="hdr pkg hdr-method"><a href="#Device.GetSourcei" title="permalink">»</a>&nbsp;func (d *Device) GetSourcei(source uint32, param int32, value *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourcei(source uint32, param int32, value *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourcei64SOFT" class="hdr pkg hdr-method"><a href="#Device.GetSourcei64SOFT" title="permalink">»</a>&nbsp;func (d *Device) GetSourcei64SOFT(source uint32, param int32, value *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourcei64SOFT(source uint32, param int32, value *int64)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourcei64vSOFT" class="hdr pkg hdr-method"><a href="#Device.GetSourcei64vSOFT" title="permalink">»</a>&nbsp;func (d *Device) GetSourcei64vSOFT(source uint32, param int32, values *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourcei64vSOFT(source uint32, param int32, values *int64)</pre>
			
		</span>
	
		
		<h1 id="Device.GetSourceiv" class="hdr pkg hdr-method"><a href="#Device.GetSourceiv" title="permalink">»</a>&nbsp;func (d *Device) GetSourceiv(source uint32, param int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetSourceiv(source uint32, param int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.GetString" class="hdr pkg hdr-method"><a href="#Device.GetString" title="permalink">»</a>&nbsp;func (d *Device) GetString(param int32) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) GetString(param int32) string</pre>
			
		</span>
	
		
		<h1 id="Device.InitCapture" class="hdr pkg hdr-method"><a href="#Device.InitCapture" title="permalink">»</a>&nbsp;func (d *Device) InitCapture(frequency uint32, format, bufferSize int32) error <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) InitCapture(frequency uint32, format, bufferSize int32) error</pre>
			<p>
InitCapture initializes this device for capturing audio samples.
</p>

		</span>
	
		
		<h1 id="Device.IsBuffer" class="hdr pkg hdr-method"><a href="#Device.IsBuffer" title="permalink">»</a>&nbsp;func (d *Device) IsBuffer(buffer uint32) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) IsBuffer(buffer uint32) bool</pre>
			
		</span>
	
		
		<h1 id="Device.IsBufferFormatSupportedSOFT" class="hdr pkg hdr-method"><a href="#Device.IsBufferFormatSupportedSOFT" title="permalink">»</a>&nbsp;func (d *Device) IsBufferFormatSupportedSOFT(format int32) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) IsBufferFormatSupportedSOFT(format int32) bool</pre>
			
		</span>
	
		
		<h1 id="Device.IsEnabled" class="hdr pkg hdr-method"><a href="#Device.IsEnabled" title="permalink">»</a>&nbsp;func (d *Device) IsEnabled(capability int32) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) IsEnabled(capability int32) bool</pre>
			
		</span>
	
		
		<h1 id="Device.IsExtensionPresent" class="hdr pkg hdr-method"><a href="#Device.IsExtensionPresent" title="permalink">»</a>&nbsp;func (d *Device) IsExtensionPresent(name string) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) IsExtensionPresent(name string) bool</pre>
			
		</span>
	
		
		<h1 id="Device.IsSource" class="hdr pkg hdr-method"><a href="#Device.IsSource" title="permalink">»</a>&nbsp;func (d *Device) IsSource(source uint32) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) IsSource(source uint32) bool</pre>
			
		</span>
	
		
		<h1 id="Device.Listener3f" class="hdr pkg hdr-method"><a href="#Device.Listener3f" title="permalink">»</a>&nbsp;func (d *Device) Listener3f(param int32, value1, value2, value3 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Listener3f(param int32, value1, value2, value3 float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Listener3i" class="hdr pkg hdr-method"><a href="#Device.Listener3i" title="permalink">»</a>&nbsp;func (d *Device) Listener3i(param int32, value1, value2, value3 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Listener3i(param int32, value1, value2, value3 int32)</pre>
			
		</span>
	
		
		<h1 id="Device.Listenerf" class="hdr pkg hdr-method"><a href="#Device.Listenerf" title="permalink">»</a>&nbsp;func (d *Device) Listenerf(param int32, value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Listenerf(param int32, value float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Listenerfv" class="hdr pkg hdr-method"><a href="#Device.Listenerfv" title="permalink">»</a>&nbsp;func (d *Device) Listenerfv(param int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Listenerfv(param int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Listeneri" class="hdr pkg hdr-method"><a href="#Device.Listeneri" title="permalink">»</a>&nbsp;func (d *Device) Listeneri(param int32, value int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Listeneri(param int32, value int32)</pre>
			
		</span>
	
		
		<h1 id="Device.Listeneriv" class="hdr pkg hdr-method"><a href="#Device.Listeneriv" title="permalink">»</a>&nbsp;func (d *Device) Listeneriv(param int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Listeneriv(param int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.Source3dSOFT" class="hdr pkg hdr-method"><a href="#Device.Source3dSOFT" title="permalink">»</a>&nbsp;func (d *Device) Source3dSOFT(source uint32, param int32, value1, value2, value3 float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Source3dSOFT(source uint32, param int32, value1, value2, value3 float64)</pre>
			
		</span>
	
		
		<h1 id="Device.Source3f" class="hdr pkg hdr-method"><a href="#Device.Source3f" title="permalink">»</a>&nbsp;func (d *Device) Source3f(source uint32, param int32, value1, value2, value3 float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Source3f(source uint32, param int32, value1, value2, value3 float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Source3i" class="hdr pkg hdr-method"><a href="#Device.Source3i" title="permalink">»</a>&nbsp;func (d *Device) Source3i(source uint32, param int32, value1, value2, value3 int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Source3i(source uint32, param int32, value1, value2, value3 int32)</pre>
			
		</span>
	
		
		<h1 id="Device.Source3i64SOFT" class="hdr pkg hdr-method"><a href="#Device.Source3i64SOFT" title="permalink">»</a>&nbsp;func (d *Device) Source3i64SOFT(source uint32, param int32, value1, value2, value3 int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Source3i64SOFT(source uint32, param int32, value1, value2, value3 int64)</pre>
			
		</span>
	
		
		<h1 id="Device.SourcePause" class="hdr pkg hdr-method"><a href="#Device.SourcePause" title="permalink">»</a>&nbsp;func (d *Device) SourcePause(source uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourcePause(source uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourcePausev" class="hdr pkg hdr-method"><a href="#Device.SourcePausev" title="permalink">»</a>&nbsp;func (d *Device) SourcePausev(sources []uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourcePausev(sources []uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourcePlay" class="hdr pkg hdr-method"><a href="#Device.SourcePlay" title="permalink">»</a>&nbsp;func (d *Device) SourcePlay(source uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourcePlay(source uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourcePlayv" class="hdr pkg hdr-method"><a href="#Device.SourcePlayv" title="permalink">»</a>&nbsp;func (d *Device) SourcePlayv(sources []uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourcePlayv(sources []uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourceQueueBuffers" class="hdr pkg hdr-method"><a href="#Device.SourceQueueBuffers" title="permalink">»</a>&nbsp;func (d *Device) SourceQueueBuffers(source uint32, buffers []uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourceQueueBuffers(source uint32, buffers []uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourceRewind" class="hdr pkg hdr-method"><a href="#Device.SourceRewind" title="permalink">»</a>&nbsp;func (d *Device) SourceRewind(source uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourceRewind(source uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourceRewindv" class="hdr pkg hdr-method"><a href="#Device.SourceRewindv" title="permalink">»</a>&nbsp;func (d *Device) SourceRewindv(sources []uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourceRewindv(sources []uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourceStop" class="hdr pkg hdr-method"><a href="#Device.SourceStop" title="permalink">»</a>&nbsp;func (d *Device) SourceStop(source uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourceStop(source uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourceStopv" class="hdr pkg hdr-method"><a href="#Device.SourceStopv" title="permalink">»</a>&nbsp;func (d *Device) SourceStopv(sources []uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourceStopv(sources []uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourceUnqueueBuffers" class="hdr pkg hdr-method"><a href="#Device.SourceUnqueueBuffers" title="permalink">»</a>&nbsp;func (d *Device) SourceUnqueueBuffers(source uint32, buffers []uint32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourceUnqueueBuffers(source uint32, buffers []uint32)</pre>
			
		</span>
	
		
		<h1 id="Device.SourcedSOFT" class="hdr pkg hdr-method"><a href="#Device.SourcedSOFT" title="permalink">»</a>&nbsp;func (d *Device) SourcedSOFT(source uint32, param int32, value float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourcedSOFT(source uint32, param int32, value float64)</pre>
			
		</span>
	
		
		<h1 id="Device.SourcedvSOFT" class="hdr pkg hdr-method"><a href="#Device.SourcedvSOFT" title="permalink">»</a>&nbsp;func (d *Device) SourcedvSOFT(source uint32, param int32, values *float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SourcedvSOFT(source uint32, param int32, values *float64)</pre>
			
		</span>
	
		
		<h1 id="Device.Sourcef" class="hdr pkg hdr-method"><a href="#Device.Sourcef" title="permalink">»</a>&nbsp;func (d *Device) Sourcef(source uint32, param int32, value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Sourcef(source uint32, param int32, value float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Sourcefv" class="hdr pkg hdr-method"><a href="#Device.Sourcefv" title="permalink">»</a>&nbsp;func (d *Device) Sourcefv(source uint32, param int32, values *float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Sourcefv(source uint32, param int32, values *float32)</pre>
			
		</span>
	
		
		<h1 id="Device.Sourcei" class="hdr pkg hdr-method"><a href="#Device.Sourcei" title="permalink">»</a>&nbsp;func (d *Device) Sourcei(source uint32, param int32, value int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Sourcei(source uint32, param int32, value int32)</pre>
			
		</span>
	
		
		<h1 id="Device.Sourcei64SOFT" class="hdr pkg hdr-method"><a href="#Device.Sourcei64SOFT" title="permalink">»</a>&nbsp;func (d *Device) Sourcei64SOFT(source uint32, param int32, value int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Sourcei64SOFT(source uint32, param int32, value int64)</pre>
			
		</span>
	
		
		<h1 id="Device.Sourcei64vSOFT" class="hdr pkg hdr-method"><a href="#Device.Sourcei64vSOFT" title="permalink">»</a>&nbsp;func (d *Device) Sourcei64vSOFT(source uint32, param int32, values *int64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Sourcei64vSOFT(source uint32, param int32, values *int64)</pre>
			
		</span>
	
		
		<h1 id="Device.Sourceiv" class="hdr pkg hdr-method"><a href="#Device.Sourceiv" title="permalink">»</a>&nbsp;func (d *Device) Sourceiv(source uint32, param int32, values *int32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) Sourceiv(source uint32, param int32, values *int32)</pre>
			
		</span>
	
		
		<h1 id="Device.SpeedOfSound" class="hdr pkg hdr-method"><a href="#Device.SpeedOfSound" title="permalink">»</a>&nbsp;func (d *Device) SpeedOfSound(value float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) SpeedOfSound(value float32)</pre>
			
		</span>
	
		
		<h1 id="Device.StartCapture" class="hdr pkg hdr-method"><a href="#Device.StartCapture" title="permalink">»</a>&nbsp;func (d *Device) StartCapture() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) StartCapture()</pre>
			<p>
StartCapture starts capturing on this device.
</p>
<p>
This function will panic if the device is not yet initialized for capturing
audo samples via the InitCapture() method.
</p>
<p>
This function will panic if the device was already closed via the Close()
method.
</p>

		</span>
	
		
		<h1 id="Device.StopCapture" class="hdr pkg hdr-method"><a href="#Device.StopCapture" title="permalink">»</a>&nbsp;func (d *Device) StopCapture() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (d *Device) StopCapture()</pre>
			<p>
StopCapture stops capturing on this device.
</p>
<p>
This function will panic if the device is not yet initialized for capturing
audo samples via the InitCapture() method.
</p>
<p>
This function will panic if the device was already closed via the Close()
method.
</p>

		</span>
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/native-al/blob/dev/al.go" title="view source">al.go</a>
	
	<a href="https:/github.com/azul3d/native-al/blob/dev/alc.go" title="view source">alc.go</a>
	
	<a href="https:/github.com/azul3d/native-al/blob/dev/alcenum.go" title="view source">alcenum.go</a>
	
	<a href="https:/github.com/azul3d/native-al/blob/dev/alenum.go" title="view source">alenum.go</a>
	
	<a href="https:/github.com/azul3d/native-al/blob/dev/dispatcher.go" title="view source">dispatcher.go</a>
	
	<a href="https:/github.com/azul3d/native-al/blob/dev/doc.go" title="view source">doc.go</a>
	
	<a href="https:/github.com/azul3d/native-al/blob/dev/extenum.go" title="view source">extenum.go</a>
	
	<a href="https:/github.com/azul3d/native-al/blob/dev/extract.go" title="view source">extract.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files">
		<h2>Darwin Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-al/blob/dev/openal_darwin.go" title="view source">openal_darwin.go</a>
		</p>
	
		<h2>Darwin Amd64 Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-al/blob/dev/blob_darwin_amd64.go" title="view source">blob_darwin_amd64.go</a>
		</p>
	
		<h2>Linux Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-al/blob/dev/openal_linux.go" title="view source">openal_linux.go</a>
		</p>
	
		<h2>Linux Amd64 Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-al/blob/dev/blob_linux_amd64.go" title="view source">blob_linux_amd64.go</a>
		</p>
	
		<h2>Test Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-al/blob/dev/openal_test.go" title="view source">openal_test.go</a>
		</p>
	
		<h2>Windows Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-al/blob/dev/openal_windows.go" title="view source">openal_windows.go</a>
		</p>
	
		<h2>Windows Amd64 Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-al/blob/dev/blob_windows_amd64.go" title="view source">blob_windows_amd64.go</a>
		</p>
	</span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div>Unless noted otherwise, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a BSD license.</div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



