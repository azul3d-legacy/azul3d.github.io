

<!DOCTYPE html>
<html lang="en">
	<head>
		
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<meta name="description" content="A 3D game engine written in Go!">
		<meta name="author" content="The Azul3D Authors">

		
		<link rel="image_src" href="http://azul3d.org/content/symbol_256x256.png">
		<meta property="og:image" content="http://azul3d.org/content/symbol_256x256.png">

		
			<title>Azul3D</title>
		
		<link rel="shortcut icon" href="/content/favicon.png"> 

		
		<link rel="stylesheet" type="text/css" href="/content/reset.css">

		
		<link href='//fonts.googleapis.com/css?family=Audiowide' rel='stylesheet' type='text/css'>
		<link href='//fonts.googleapis.com/css?family=Cutive+Mono' rel='stylesheet' type='text/css'>

		
		<link href='/content/dejavusans_book/stylesheet.css' rel='stylesheet' type='text/css'>

		
		<link href='/content/brandico/brandico.css' rel='stylesheet' type='text/css'>

		
		

		
		<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

		
		<link rel="stylesheet" type="text/css" href="/content/stylesheet.css">
		<link rel="stylesheet" type="text/css" href="/content/mq.css">
	</head>
	<body>


<div id="top"></div>






































<div id="toparea">
	<div id="logo">
		<a href="/"><span class="biohazard">☣</span>
		<span>Azul3D</span></a>
	</div>

	<div id="shortbar">
		<a href="https://github.com/azul3d" target="_blank"><i class="icon-github menuIcon"></i><div class="title">GitHub</div></a>
		<a href="https://twitter.com/hashtag/azul3d" target="_blank"><i class="icon-twitter-bird menuIcon"></i><div class="title">Twitter</div></a>
		<a href="https://www.facebook.com/pages/Azul3D/651643168254798" target="_blank"><i class="icon-facebook menuIcon"></i><div class="title">Facebook</div></a>
		<a href="https://groups.google.com/forum/#!forum/azul3d" target="_blank" class="mail"><i class="menuIcon mailIcon">✉</i><div class="title">Mailing List</div></a>
	</div>
</div>

<div id="navigation">
	<h1>Navigation</h1>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/">Home</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/news">News</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/packages.html">Packages</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="/doc">Doc</a> | <a href="/doc/faq.html">FAQ</a></span></span>
	</span>
</div>


<div id="content-container">
	<div id="content" class="pkg-content">






<h1 class="hdr pkg hdr-general">Package glfw3</h1>
<span class="section pkg general">
	
		
			<p><em>Version 3.1</em></p>
		
	
	<span class="pkg import">import "azul3d.org/native/glfw.v3.1"</span>
	<span class="list">
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#versions">Versions</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#overview">Overview</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#index">Index</a></span></span>
		<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#package-files">Package Files</a></span></span>
	</span>
	

	
		
	
</span>



<h1 id="versions" class="hdr pkg hdr-versions"><a href="#versions" title="permalink">»</a>&nbsp;Versions <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg versions">
	
		<p>You are viewing the latest version of this package (v3.1).</p>
	
	<p>Other versions of this package are available as follows. <em>Dev</em> is the in-development version of this package and should not generally be used (see <a href="/doc/versioning.html#development-versions">here</a> for more details).</p>
	<span class="list">
		
			
			
			
				
					<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/glfw.v3.1" title="azul3d.org/native/glfw.v3.1">v3.1</a> (latest version)</span></span>
				
			
		
			
			
			
				<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="native/glfw.dev" title="azul3d.org/native/glfw.dev">dev</a> (in development)</span></span>
			
		
	</span>
</span>



<h1 id="overview" class="hdr pkg hdr-overview"><a href="#overview" title="permalink">»</a>&nbsp;Overview <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg overview">
	
</span>


<h1 id="index" class="hdr pkg hdr-index"><a href="#index" title="permalink">»</a>&nbsp;Index <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg index">
	<span class="list">
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#constants">Constants</a></span></span>
		
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DefaultWindowHints">func DefaultWindowHints()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DetachCurrentContext">func DetachCurrentContext()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ExtensionSupported">func ExtensionSupported(extension string) bool</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetJoystickAxes">func GetJoystickAxes(joy Joystick) []float32</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetJoystickButtons">func GetJoystickButtons(joy Joystick) []byte</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetJoystickName">func GetJoystickName(joy Joystick) string</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetMonitors">func GetMonitors() ([]*Monitor, error)</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetTime">func GetTime() (float64, error)</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetVersion">func GetVersion() (major, minor, revision int)</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetVersionString">func GetVersionString() string</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetX11Display">func GetX11Display() *C.Display</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Init">func Init() error</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#JoystickPresent">func JoystickPresent(joy Joystick) bool</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PollEvents">func PollEvents()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PostEmptyEvent">func PostEmptyEvent()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SetMonitorCallback">func SetMonitorCallback(cbfun func(monitor *Monitor, event MonitorEvent))</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SetTime">func SetTime(time float64)</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SwapInterval">func SwapInterval(interval int)</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Terminate">func Terminate()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#WaitEvents">func WaitEvents()</a></span></span>
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#WindowHint">func WindowHint(target Hint, hint int)</a></span></span>
		
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Action">type Action</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CharacterCallback">type CharacterCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CharacterModsCallback">type CharacterModsCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CloseCallback">type CloseCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorEnterCallback">type CursorEnterCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CursorPositionCallback">type CursorPositionCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#DropCallback">type DropCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ErrorCode">type ErrorCode</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FocusCallback">type FocusCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#FramebufferSizeCallback">type FramebufferSizeCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GLFWError">type GLFWError</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GLFWError.Error">func (e *GLFWError) Error() string</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GammaRamp">type GammaRamp</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Hint">type Hint</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#IconifyCallback">type IconifyCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#InputMode">type InputMode</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Joystick">type Joystick</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Key">type Key</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#KeyCallback">type KeyCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ModifierKey">type ModifierKey</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor">type Monitor</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetPrimaryMonitor">func GetPrimaryMonitor() (*Monitor, error)</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.GetGammaRamp">func (m *Monitor) GetGammaRamp() (*GammaRamp, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.GetName">func (m *Monitor) GetName() (string, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.GetPhysicalSize">func (m *Monitor) GetPhysicalSize() (width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.GetPosition">func (m *Monitor) GetPosition() (x, y int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.GetVideoMode">func (m *Monitor) GetVideoMode() (*VideoMode, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.GetVideoModes">func (m *Monitor) GetVideoModes() ([]*VideoMode, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.SetGamma">func (m *Monitor) SetGamma(gamma float32)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Monitor.SetGammaRamp">func (m *Monitor) SetGammaRamp(ramp *GammaRamp)</a></span></span>
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#MonitorEvent">type MonitorEvent</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#MouseButton">type MouseButton</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#MouseButtonCallback">type MouseButtonCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#PositionCallback">type PositionCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#RefreshCallback">type RefreshCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#ScrollCallback">type ScrollCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#SizeCallback">type SizeCallback</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#VideoMode">type VideoMode</a></span></span>
			
			
		
			<span class="item"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window">type Window</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#CreateWindow">func CreateWindow(width, height int, title string, monitor *Monitor, share *Window) (*Window, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#GetCurrentContext">func GetCurrentContext() *Window</a></span></span>
			
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.Destroy">func (w *Window) Destroy()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetAttribute">func (w *Window) GetAttribute(attrib Hint) (int, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetClipboardString">func (w *Window) GetClipboardString() (string, error)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetCursorPosition">func (w *Window) GetCursorPosition() (x, y float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetFramebufferSize">func (w *Window) GetFramebufferSize() (width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetGLXContext">func (w *Window) GetGLXContext() C.GLXContext</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetInputMode">func (w *Window) GetInputMode(mode InputMode) int</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetKey">func (w *Window) GetKey(key Key) Action</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetMonitor">func (w *Window) GetMonitor() *Monitor</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetMouseButton">func (w *Window) GetMouseButton(button MouseButton) Action</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetPosition">func (w *Window) GetPosition() (x, y int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetSize">func (w *Window) GetSize() (width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetUserPointer">func (w *Window) GetUserPointer() unsafe.Pointer</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetWGLContext">func (w *Window) GetWGLContext() C.HGLRC</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetWin32Window">func (w *Window) GetWin32Window() C.HWND</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.GetX11Window">func (w *Window) GetX11Window() C.Window</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.Hide">func (w *Window) Hide()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.Iconify">func (w *Window) Iconify()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.MakeContextCurrent">func (w *Window) MakeContextCurrent()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.Restore">func (w *Window) Restore()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetCharacterCallback">func (w *Window) SetCharacterCallback(cbfun CharacterCallback) (previous CharacterCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetCharacterModsCallback">func (w *Window) SetCharacterModsCallback(cbfun CharacterModsCallback) (previous CharacterModsCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetClipboardString">func (w *Window) SetClipboardString(str string)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetCloseCallback">func (w *Window) SetCloseCallback(cbfun CloseCallback) (previous CloseCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetCursorEnterCallback">func (w *Window) SetCursorEnterCallback(cbfun CursorEnterCallback) (previous CursorEnterCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetCursorPosition">func (w *Window) SetCursorPosition(xpos, ypos float64)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetCursorPositionCallback">func (w *Window) SetCursorPositionCallback(cbfun CursorPositionCallback) (previous CursorPositionCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetDropCallback">func (w *Window) SetDropCallback(cbfun DropCallback) (previous DropCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetFocusCallback">func (w *Window) SetFocusCallback(cbfun FocusCallback) (previous FocusCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetFramebufferSizeCallback">func (w *Window) SetFramebufferSizeCallback(cbfun FramebufferSizeCallback) (previous FramebufferSizeCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetIconifyCallback">func (w *Window) SetIconifyCallback(cbfun IconifyCallback) (previous IconifyCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetInputMode">func (w *Window) SetInputMode(mode InputMode, value int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetKeyCallback">func (w *Window) SetKeyCallback(cbfun KeyCallback) (previous KeyCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetMouseButtonCallback">func (w *Window) SetMouseButtonCallback(cbfun MouseButtonCallback) (previous MouseButtonCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetPosition">func (w *Window) SetPosition(xpos, ypos int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetPositionCallback">func (w *Window) SetPositionCallback(cbfun PositionCallback) (previous PositionCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetRefreshCallback">func (w *Window) SetRefreshCallback(cbfun RefreshCallback) (previous RefreshCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetScrollCallback">func (w *Window) SetScrollCallback(cbfun ScrollCallback) (previous ScrollCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetShouldClose">func (w *Window) SetShouldClose(value bool)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetSize">func (w *Window) SetSize(width, height int)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetSizeCallback">func (w *Window) SetSizeCallback(cbfun SizeCallback) (previous SizeCallback)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetTitle">func (w *Window) SetTitle(title string)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SetUserPointer">func (w *Window) SetUserPointer(pointer unsafe.Pointer)</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.ShouldClose">func (w *Window) ShouldClose() bool</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.Show">func (w *Window) Show()</a></span></span>
			
				<span class="item indent"><span class="biohazard">☣</span>&nbsp;&nbsp;<span class="content"><a href="#Window.SwapBuffers">func (w *Window) SwapBuffers()</a></span></span>
			
		
	</span>
</span>




<h1 id="constants" class="hdr pkg hdr-constants"><a href="#constants" title="permalink">»</a>&nbsp;Constants <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg constants">
	
		<pre>const (
	VersionMajor	= C.GLFW_VERSION_MAJOR		// This is incremented when the API is changed in non-compatible ways.
	VersionMinor	= C.GLFW_VERSION_MINOR		// This is incremented when features are added to the API but it remains backward-compatible.
	VersionRevision	= C.GLFW_VERSION_REVISION	// This is incremented when a bug fix release is made that does not contain any API changes.
)</pre>
		<p></p>
	
		<pre>const (
	CursorNormal	int	= C.GLFW_CURSOR_NORMAL
	CursorHidden	int	= C.GLFW_CURSOR_HIDDEN
	CursorDisabled	int	= C.GLFW_CURSOR_DISABLED
)</pre>
		<p>Cursor mode values
</p>
	
		<pre>const (
	OpenGLAPI	int	= C.GLFW_OPENGL_API
	OpenGLESAPI	int	= C.GLFW_OPENGL_ES_API
)</pre>
		<p>Values for the ClientApi hint.
</p>
	
		<pre>const (
	NoRobustness		int	= C.GLFW_NO_ROBUSTNESS
	NoResetNotification	int	= C.GLFW_NO_RESET_NOTIFICATION
	LoseContextOnReset	int	= C.GLFW_LOSE_CONTEXT_ON_RESET
)</pre>
		<p>Values for the ContextRobustness hint.
</p>
	
		<pre>const (
	OpenGLAnyProfile	int	= C.GLFW_OPENGL_ANY_PROFILE
	OpenGLCoreProfile	int	= C.GLFW_OPENGL_CORE_PROFILE
	OpenGLCompatProfile	int	= C.GLFW_OPENGL_COMPAT_PROFILE
)</pre>
		<p>Values for the OpenglProfile hint.
</p>
	
		<pre>const (
	True	int	= C.GL_TRUE
	False	int	= C.GL_FALSE
)</pre>
		<p>TRUE and FALSE values to use with hints.
</p>
	
		<pre>const (
	Release	Action	= C.GLFW_RELEASE	// The key or button was released.
	Press	Action	= C.GLFW_PRESS		// The key or button was pressed.
	Repeat	Action	= C.GLFW_REPEAT		// The key was held down until it repeated.
)</pre>
		<p></p>
	
		<pre>const (
	NotInitialized		ErrorCode	= C.GLFW_NOT_INITIALIZED	// GLFW has not been initialized.
	NoCurrentContext	ErrorCode	= C.GLFW_NO_CURRENT_CONTEXT	// No context is current.
	InvalidEnum		ErrorCode	= C.GLFW_INVALID_ENUM		// One of the enum parameters for the function was given an invalid enum.
	InvalidValue		ErrorCode	= C.GLFW_INVALID_VALUE		// One of the parameters for the function was given an invalid value.
	OutOfMemory		ErrorCode	= C.GLFW_OUT_OF_MEMORY		// A memory allocation failed.
	APIUnavailable		ErrorCode	= C.GLFW_API_UNAVAILABLE	// GLFW could not find support for the requested client API on the system.
	VersionUnavailable	ErrorCode	= C.GLFW_VERSION_UNAVAILABLE	// The requested client API version is not available.
	PlatformError		ErrorCode	= C.GLFW_PLATFORM_ERROR		// A platform-specific error occurred that does not match any of the more specific categories.
	FormatUnavailable	ErrorCode	= C.GLFW_FORMAT_UNAVAILABLE	// The clipboard did not contain data in the requested format.
)</pre>
		<p>Error codes.
</p>
	
		<pre>const (
	Focused		Hint	= C.GLFW_FOCUSED	// Specifies whether the window will be focused.
	Iconified	Hint	= C.GLFW_ICONIFIED	// Specifies whether the window will be minimized.
	Visible		Hint	= C.GLFW_VISIBLE	// Specifies whether the window will be initially visible.
	Resizable	Hint	= C.GLFW_RESIZABLE	// Specifies whether the window will be resizable by the user.
	Decorated	Hint	= C.GLFW_DECORATED	// Specifies whether the window will have window decorations such as a border, a close widget, etc.
	Floating	Hint	= C.GLFW_FLOATING	// Specifies whether the window will be always-on-top.
	AutoIconify	Hint	= C.GLFW_AUTO_ICONIFY	// Specifies whether fullscreen windows automatically iconify (and restore the previous video mode) on focus loss.
)</pre>
		<p>Window related hints.
</p>
	
		<pre>const (
	ClientAPI		Hint	= C.GLFW_CLIENT_API		// Specifies which client API to create the context for. Hard constraint.
	ContextVersionMajor	Hint	= C.GLFW_CONTEXT_VERSION_MAJOR	// Specifies the client API version that the created context must be compatible with.
	ContextVersionMinor	Hint	= C.GLFW_CONTEXT_VERSION_MINOR	// Specifies the client API version that the created context must be compatible with.
	ContextRobustness	Hint	= C.GLFW_CONTEXT_ROBUSTNESS	// Specifies the robustness strategy to be used by the context.
	OpenGLForwardCompatible	Hint	= C.GLFW_OPENGL_FORWARD_COMPAT	// Specifies whether the OpenGL context should be forward-compatible. Hard constraint.
	OpenGLDebugContext	Hint	= C.GLFW_OPENGL_DEBUG_CONTEXT
	OpenGLProfile		Hint	= C.GLFW_OPENGL_PROFILE	// Specifies which OpenGL profile to create the context for. Hard constraint.
)</pre>
		<p>Context related hints.
</p>
	
		<pre>const (
	ContextRevision	Hint	= C.GLFW_CONTEXT_REVISION
	RedBits		Hint	= C.GLFW_RED_BITS		// Specifies the desired bit depth of the default framebuffer.
	GreenBits	Hint	= C.GLFW_GREEN_BITS		// Specifies the desired bit depth of the default framebuffer.
	BlueBits	Hint	= C.GLFW_BLUE_BITS		// Specifies the desired bit depth of the default framebuffer.
	AlphaBits	Hint	= C.GLFW_ALPHA_BITS		// Specifies the desired bit depth of the default framebuffer.
	DepthBits	Hint	= C.GLFW_DEPTH_BITS		// Specifies the desired bit depth of the default framebuffer.
	StencilBits	Hint	= C.GLFW_STENCIL_BITS		// Specifies the desired bit depth of the default framebuffer.
	AccumRedBits	Hint	= C.GLFW_ACCUM_RED_BITS		// Specifies the desired bit depth of the accumulation buffer.
	AccumGreenBits	Hint	= C.GLFW_ACCUM_GREEN_BITS	// Specifies the desired bit depth of the accumulation buffer.
	AccumBlueBits	Hint	= C.GLFW_ACCUM_BLUE_BITS	// Specifies the desired bit depth of the accumulation buffer.
	AccumAlphaBits	Hint	= C.GLFW_ACCUM_ALPHA_BITS	// Specifies the desired bit depth of the accumulation buffer.
	AuxBuffers	Hint	= C.GLFW_AUX_BUFFERS		// Specifies the desired number of auxiliary buffers.
	Stereo		Hint	= C.GLFW_STEREO			// Specifies whether to use stereoscopic rendering. Hard constraint.
	Samples		Hint	= C.GLFW_SAMPLES		// Specifies the desired number of samples to use for multisampling. Zero disables multisampling.
	SRGBCapable	Hint	= C.GLFW_SRGB_CAPABLE		// Specifies whether the framebuffer should be sRGB capable.
	RefreshRate	Hint	= C.GLFW_REFRESH_RATE		// specifies the desired refresh rate for full screen windows. If set to zero, the highest available refresh rate will be used. This hint is ignored for windowed mode windows.
)</pre>
		<p>Framebuffer related hints.
</p>
	
		<pre>const (
	Cursor			InputMode	= C.GLFW_CURSOR			// See Cursor mode values
	StickyKeys		InputMode	= C.GLFW_STICKY_KEYS		// Value can be either 1 or 0
	StickyMouseButtons	InputMode	= C.GLFW_STICKY_MOUSE_BUTTONS	// Value can be either 1 or 0
)</pre>
		<p>Input modes
</p>
	
		<pre>const (
	Joystick1	Joystick	= C.GLFW_JOYSTICK_1
	Joystick2	Joystick	= C.GLFW_JOYSTICK_2
	Joystick3	Joystick	= C.GLFW_JOYSTICK_3
	Joystick4	Joystick	= C.GLFW_JOYSTICK_4
	Joystick5	Joystick	= C.GLFW_JOYSTICK_5
	Joystick6	Joystick	= C.GLFW_JOYSTICK_6
	Joystick7	Joystick	= C.GLFW_JOYSTICK_7
	Joystick8	Joystick	= C.GLFW_JOYSTICK_8
	Joystick9	Joystick	= C.GLFW_JOYSTICK_9
	Joystick10	Joystick	= C.GLFW_JOYSTICK_10
	Joystick11	Joystick	= C.GLFW_JOYSTICK_11
	Joystick12	Joystick	= C.GLFW_JOYSTICK_12
	Joystick13	Joystick	= C.GLFW_JOYSTICK_13
	Joystick14	Joystick	= C.GLFW_JOYSTICK_14
	Joystick15	Joystick	= C.GLFW_JOYSTICK_15
	Joystick16	Joystick	= C.GLFW_JOYSTICK_16
	JoystickLast	Joystick	= C.GLFW_JOYSTICK_LAST
)</pre>
		<p>Joystick IDs
</p>
	
		<pre>const (
	KeyUnknown	Key	= C.GLFW_KEY_UNKNOWN
	KeySpace	Key	= C.GLFW_KEY_SPACE
	KeyApostrophe	Key	= C.GLFW_KEY_APOSTROPHE
	KeyComma	Key	= C.GLFW_KEY_COMMA
	KeyMinus	Key	= C.GLFW_KEY_MINUS
	KeyPeriod	Key	= C.GLFW_KEY_PERIOD
	KeySlash	Key	= C.GLFW_KEY_SLASH
	Key0		Key	= C.GLFW_KEY_0
	Key1		Key	= C.GLFW_KEY_1
	Key2		Key	= C.GLFW_KEY_2
	Key3		Key	= C.GLFW_KEY_3
	Key4		Key	= C.GLFW_KEY_4
	Key5		Key	= C.GLFW_KEY_5
	Key6		Key	= C.GLFW_KEY_6
	Key7		Key	= C.GLFW_KEY_7
	Key8		Key	= C.GLFW_KEY_8
	Key9		Key	= C.GLFW_KEY_9
	KeySemicolon	Key	= C.GLFW_KEY_SEMICOLON
	KeyEqual	Key	= C.GLFW_KEY_EQUAL
	KeyA		Key	= C.GLFW_KEY_A
	KeyB		Key	= C.GLFW_KEY_B
	KeyC		Key	= C.GLFW_KEY_C
	KeyD		Key	= C.GLFW_KEY_D
	KeyE		Key	= C.GLFW_KEY_E
	KeyF		Key	= C.GLFW_KEY_F
	KeyG		Key	= C.GLFW_KEY_G
	KeyH		Key	= C.GLFW_KEY_H
	KeyI		Key	= C.GLFW_KEY_I
	KeyJ		Key	= C.GLFW_KEY_J
	KeyK		Key	= C.GLFW_KEY_K
	KeyL		Key	= C.GLFW_KEY_L
	KeyM		Key	= C.GLFW_KEY_M
	KeyN		Key	= C.GLFW_KEY_N
	KeyO		Key	= C.GLFW_KEY_O
	KeyP		Key	= C.GLFW_KEY_P
	KeyQ		Key	= C.GLFW_KEY_Q
	KeyR		Key	= C.GLFW_KEY_R
	KeyS		Key	= C.GLFW_KEY_S
	KeyT		Key	= C.GLFW_KEY_T
	KeyU		Key	= C.GLFW_KEY_U
	KeyV		Key	= C.GLFW_KEY_V
	KeyW		Key	= C.GLFW_KEY_W
	KeyX		Key	= C.GLFW_KEY_X
	KeyY		Key	= C.GLFW_KEY_Y
	KeyZ		Key	= C.GLFW_KEY_Z
	KeyLeftBracket	Key	= C.GLFW_KEY_LEFT_BRACKET
	KeyBackslash	Key	= C.GLFW_KEY_BACKSLASH
	KeyBracket	Key	= C.GLFW_KEY_RIGHT_BRACKET	// Kept for backward compatbility
	KeyRightBracket	Key	= C.GLFW_KEY_RIGHT_BRACKET
	KeyGraveAccent	Key	= C.GLFW_KEY_GRAVE_ACCENT
	KeyWorld1	Key	= C.GLFW_KEY_WORLD_1
	KeyWorld2	Key	= C.GLFW_KEY_WORLD_2
	KeyEscape	Key	= C.GLFW_KEY_ESCAPE
	KeyEnter	Key	= C.GLFW_KEY_ENTER
	KeyTab		Key	= C.GLFW_KEY_TAB
	KeyBackspace	Key	= C.GLFW_KEY_BACKSPACE
	KeyInsert	Key	= C.GLFW_KEY_INSERT
	KeyDelete	Key	= C.GLFW_KEY_DELETE
	KeyRight	Key	= C.GLFW_KEY_RIGHT
	KeyLeft		Key	= C.GLFW_KEY_LEFT
	KeyDown		Key	= C.GLFW_KEY_DOWN
	KeyUp		Key	= C.GLFW_KEY_UP
	KeyPageUp	Key	= C.GLFW_KEY_PAGE_UP
	KeyPageDown	Key	= C.GLFW_KEY_PAGE_DOWN
	KeyHome		Key	= C.GLFW_KEY_HOME
	KeyEnd		Key	= C.GLFW_KEY_END
	KeyCapsLock	Key	= C.GLFW_KEY_CAPS_LOCK
	KeyScrollLock	Key	= C.GLFW_KEY_SCROLL_LOCK
	KeyNumLock	Key	= C.GLFW_KEY_NUM_LOCK
	KeyPrintScreen	Key	= C.GLFW_KEY_PRINT_SCREEN
	KeyPause	Key	= C.GLFW_KEY_PAUSE
	KeyF1		Key	= C.GLFW_KEY_F1
	KeyF2		Key	= C.GLFW_KEY_F2
	KeyF3		Key	= C.GLFW_KEY_F3
	KeyF4		Key	= C.GLFW_KEY_F4
	KeyF5		Key	= C.GLFW_KEY_F5
	KeyF6		Key	= C.GLFW_KEY_F6
	KeyF7		Key	= C.GLFW_KEY_F7
	KeyF8		Key	= C.GLFW_KEY_F8
	KeyF9		Key	= C.GLFW_KEY_F9
	KeyF10		Key	= C.GLFW_KEY_F10
	KeyF11		Key	= C.GLFW_KEY_F11
	KeyF12		Key	= C.GLFW_KEY_F12
	KeyF13		Key	= C.GLFW_KEY_F13
	KeyF14		Key	= C.GLFW_KEY_F14
	KeyF15		Key	= C.GLFW_KEY_F15
	KeyF16		Key	= C.GLFW_KEY_F16
	KeyF17		Key	= C.GLFW_KEY_F17
	KeyF18		Key	= C.GLFW_KEY_F18
	KeyF19		Key	= C.GLFW_KEY_F19
	KeyF20		Key	= C.GLFW_KEY_F20
	KeyF21		Key	= C.GLFW_KEY_F21
	KeyF22		Key	= C.GLFW_KEY_F22
	KeyF23		Key	= C.GLFW_KEY_F23
	KeyF24		Key	= C.GLFW_KEY_F24
	KeyF25		Key	= C.GLFW_KEY_F25
	KeyKp0		Key	= C.GLFW_KEY_KP_0
	KeyKp1		Key	= C.GLFW_KEY_KP_1
	KeyKp2		Key	= C.GLFW_KEY_KP_2
	KeyKp3		Key	= C.GLFW_KEY_KP_3
	KeyKp4		Key	= C.GLFW_KEY_KP_4
	KeyKp5		Key	= C.GLFW_KEY_KP_5
	KeyKp6		Key	= C.GLFW_KEY_KP_6
	KeyKp7		Key	= C.GLFW_KEY_KP_7
	KeyKp8		Key	= C.GLFW_KEY_KP_8
	KeyKp9		Key	= C.GLFW_KEY_KP_9
	KeyKpDecimal	Key	= C.GLFW_KEY_KP_DECIMAL
	KeyKpDivide	Key	= C.GLFW_KEY_KP_DIVIDE
	KeyKpMultiply	Key	= C.GLFW_KEY_KP_MULTIPLY
	KeyKpSubtract	Key	= C.GLFW_KEY_KP_SUBTRACT
	KeyKpAdd	Key	= C.GLFW_KEY_KP_ADD
	KeyKpEnter	Key	= C.GLFW_KEY_KP_ENTER
	KeyKpEqual	Key	= C.GLFW_KEY_KP_EQUAL
	KeyLeftShift	Key	= C.GLFW_KEY_LEFT_SHIFT
	KeyLeftControl	Key	= C.GLFW_KEY_LEFT_CONTROL
	KeyLeftAlt	Key	= C.GLFW_KEY_LEFT_ALT
	KeyLeftSuper	Key	= C.GLFW_KEY_LEFT_SUPER
	KeyRightShift	Key	= C.GLFW_KEY_RIGHT_SHIFT
	KeyRightControl	Key	= C.GLFW_KEY_RIGHT_CONTROL
	KeyRightAlt	Key	= C.GLFW_KEY_RIGHT_ALT
	KeyRightSuper	Key	= C.GLFW_KEY_RIGHT_SUPER
	KeyMenu		Key	= C.GLFW_KEY_MENU
	KeyLast		Key	= C.GLFW_KEY_LAST
)</pre>
		<p>These key codes are inspired by the USB HID Usage Tables v1.12 (p. 53-60),
but re-arranged to map to 7-bit ASCII for printable keys (function keys are
put in the 256&#43; range).
</p>
	
		<pre>const (
	ModShift	ModifierKey	= C.GLFW_MOD_SHIFT
	ModControl	ModifierKey	= C.GLFW_MOD_CONTROL
	ModAlt		ModifierKey	= C.GLFW_MOD_ALT
	ModSuper	ModifierKey	= C.GLFW_MOD_SUPER
)</pre>
		<p>Modifier keys
</p>
	
		<pre>const (
	Connected	MonitorEvent	= C.GLFW_CONNECTED
	Disconnected	MonitorEvent	= C.GLFW_DISCONNECTED
)</pre>
		<p>Monitor events.
</p>
	
		<pre>const (
	MouseButton1		MouseButton	= C.GLFW_MOUSE_BUTTON_1
	MouseButton2		MouseButton	= C.GLFW_MOUSE_BUTTON_2
	MouseButton3		MouseButton	= C.GLFW_MOUSE_BUTTON_3
	MouseButton4		MouseButton	= C.GLFW_MOUSE_BUTTON_4
	MouseButton5		MouseButton	= C.GLFW_MOUSE_BUTTON_5
	MouseButton6		MouseButton	= C.GLFW_MOUSE_BUTTON_6
	MouseButton7		MouseButton	= C.GLFW_MOUSE_BUTTON_7
	MouseButton8		MouseButton	= C.GLFW_MOUSE_BUTTON_8
	MouseButtonLast		MouseButton	= C.GLFW_MOUSE_BUTTON_LAST
	MouseButtonLeft		MouseButton	= C.GLFW_MOUSE_BUTTON_LEFT
	MouseButtonRight	MouseButton	= C.GLFW_MOUSE_BUTTON_RIGHT
	MouseButtonMiddle	MouseButton	= C.GLFW_MOUSE_BUTTON_MIDDLE
)</pre>
		<p>Mouse buttons
</p>
	
</span>









	<h1 id="DefaultWindowHints" class="hdr pkg hdr-function"><a href="#DefaultWindowHints" title="permalink">»</a>&nbsp;func DefaultWindowHints() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func DefaultWindowHints()</pre>
		<p>
DefaultHints resets all window hints to their default values.
</p>
<p>
This function may only be called from the main thread.
</p>

	</span>

	<h1 id="DetachCurrentContext" class="hdr pkg hdr-function"><a href="#DetachCurrentContext" title="permalink">»</a>&nbsp;func DetachCurrentContext() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func DetachCurrentContext()</pre>
		<p>
DetachCurrentContext detaches the current context.
</p>

	</span>

	<h1 id="ExtensionSupported" class="hdr pkg hdr-function"><a href="#ExtensionSupported" title="permalink">»</a>&nbsp;func ExtensionSupported(extension string) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func ExtensionSupported(extension string) bool</pre>
		<p>
ExtensionSupported returns whether the specified OpenGL or context creation
API extension is supported by the current context. For example, on Windows
both the OpenGL and WGL extension strings are checked.
</p>
<p>
As this functions searches one or more extension strings on each call, it is
recommended that you cache its results if it&#39;s going to be used frequently.
The extension strings will not change during the lifetime of a context, so
there is no danger in doing this.
</p>

	</span>

	<h1 id="GetJoystickAxes" class="hdr pkg hdr-function"><a href="#GetJoystickAxes" title="permalink">»</a>&nbsp;func GetJoystickAxes(joy Joystick) []float32 <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetJoystickAxes(joy Joystick) []float32</pre>
		<p>
GetJoystickAxes returns a slice of axis values.
</p>

	</span>

	<h1 id="GetJoystickButtons" class="hdr pkg hdr-function"><a href="#GetJoystickButtons" title="permalink">»</a>&nbsp;func GetJoystickButtons(joy Joystick) []byte <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetJoystickButtons(joy Joystick) []byte</pre>
		<p>
GetJoystickButtons returns a slice of button values.
</p>

	</span>

	<h1 id="GetJoystickName" class="hdr pkg hdr-function"><a href="#GetJoystickName" title="permalink">»</a>&nbsp;func GetJoystickName(joy Joystick) string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetJoystickName(joy Joystick) string</pre>
		<p>
GetJoystickName returns the name, encoded as UTF-8, of the specified joystick.
</p>

	</span>

	<h1 id="GetMonitors" class="hdr pkg hdr-function"><a href="#GetMonitors" title="permalink">»</a>&nbsp;func GetMonitors() ([]*Monitor, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetMonitors() ([]*Monitor, error)</pre>
		<p>
GetMonitors returns a slice of handles for all currently connected monitors.
</p>

	</span>

	<h1 id="GetTime" class="hdr pkg hdr-function"><a href="#GetTime" title="permalink">»</a>&nbsp;func GetTime() (float64, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetTime() (float64, error)</pre>
		<p>
GetTime returns the value of the GLFW timer. Unless the timer has been set
using SetTime, the timer measures time elapsed since GLFW was initialized.
</p>
<p>
The resolution of the timer is system dependent, but is usually on the order
of a few micro- or nanoseconds. It uses the highest-resolution monotonic time
source on each supported platform.
</p>

	</span>

	<h1 id="GetVersion" class="hdr pkg hdr-function"><a href="#GetVersion" title="permalink">»</a>&nbsp;func GetVersion() (major, minor, revision int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetVersion() (major, minor, revision int)</pre>
		<p>
GetVersion retrieves the major, minor and revision numbers of the GLFW
library. It is intended for when you are using GLFW as a shared library and
want to ensure that you are using the minimum required version.
</p>
<p>
This function may be called before Init.
</p>

	</span>

	<h1 id="GetVersionString" class="hdr pkg hdr-function"><a href="#GetVersionString" title="permalink">»</a>&nbsp;func GetVersionString() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetVersionString() string</pre>
		<p>
GetVersionString returns a static string generated at compile-time according
to which configuration macros were defined. This is intended for use when
submitting bug reports, to allow developers to see which code paths are
enabled in a binary.
</p>
<p>
This function may be called before Init.
</p>

	</span>

	<h1 id="GetX11Display" class="hdr pkg hdr-function"><a href="#GetX11Display" title="permalink">»</a>&nbsp;func GetX11Display() *C.Display <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func GetX11Display() *C.Display</pre>
		
	</span>

	<h1 id="Init" class="hdr pkg hdr-function"><a href="#Init" title="permalink">»</a>&nbsp;func Init() error <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Init() error</pre>
		<p>
Init initializes the GLFW library. Before most GLFW functions can be used,
GLFW must be initialized, and before a program terminates GLFW should be
terminated in order to free any resources allocated during or after
initialization.
</p>
<p>
If this function fails, it calls Terminate before returning. If it succeeds,
you should call Terminate before the program exits.
</p>
<p>
Additional calls to this function after successful initialization but before
termination will succeed but will do nothing.
</p>
<p>
This function may take several seconds to complete on some systems, while on
other systems it may take only a fraction of a second to complete.
</p>
<p>
On Mac OS X, this function will change the current directory of the
application to the Contents/Resources subdirectory of the application&#39;s
bundle, if present.
</p>
<p>
This function may only be called from the main thread.
</p>

	</span>

	<h1 id="JoystickPresent" class="hdr pkg hdr-function"><a href="#JoystickPresent" title="permalink">»</a>&nbsp;func JoystickPresent(joy Joystick) bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func JoystickPresent(joy Joystick) bool</pre>
		<p>
GetJoystickPresent returns whether the specified joystick is present.
</p>

	</span>

	<h1 id="PollEvents" class="hdr pkg hdr-function"><a href="#PollEvents" title="permalink">»</a>&nbsp;func PollEvents() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func PollEvents()</pre>
		<p>
PollEvents processes only those events that have already been received and
then returns immediately. Processing events will cause the window and input
callbacks associated with those events to be called.
</p>
<p>
This function is not required for joystick input to work.
</p>
<p>
This function may not be called from a callback.
</p>
<p>
This function may only be called from the main thread.
</p>

	</span>

	<h1 id="PostEmptyEvent" class="hdr pkg hdr-function"><a href="#PostEmptyEvent" title="permalink">»</a>&nbsp;func PostEmptyEvent() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func PostEmptyEvent()</pre>
		<p>
PostEmptyEvent posts an empty event from the current thread to the main
thread event queue, causing WaitEvents to return.
</p>
<p>
If no windows exist, this function returns immediately.  For
synchronization of threads in applications that do not create windows, use
your threading library of choice.
</p>
<p>
This function may be called from secondary threads.
</p>

	</span>

	<h1 id="SetMonitorCallback" class="hdr pkg hdr-function"><a href="#SetMonitorCallback" title="permalink">»</a>&nbsp;func SetMonitorCallback(cbfun func(monitor *Monitor, event MonitorEvent)) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func SetMonitorCallback(cbfun func(monitor *Monitor, event MonitorEvent))</pre>
		<p>
SetMonitorCallback sets the monitor configuration callback, or removes the
currently set callback. This is called when a monitor is connected to or
disconnected from the system.
</p>

	</span>

	<h1 id="SetTime" class="hdr pkg hdr-function"><a href="#SetTime" title="permalink">»</a>&nbsp;func SetTime(time float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func SetTime(time float64)</pre>
		<p>
SetTime sets the value of the GLFW timer. It then continues to count up from
that value.
</p>
<p>
The resolution of the timer is system dependent, but is usually on the order
of a few micro- or nanoseconds. It uses the highest-resolution monotonic time
source on each supported platform.
</p>

	</span>

	<h1 id="SwapInterval" class="hdr pkg hdr-function"><a href="#SwapInterval" title="permalink">»</a>&nbsp;func SwapInterval(interval int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func SwapInterval(interval int)</pre>
		<p>
SwapInterval sets the swap interval for the current context, i.e. the number
of screen updates to wait before swapping the buffers of a window and
returning from SwapBuffers. This is sometimes called
&#39;vertical synchronization&#39;, &#39;vertical retrace synchronization&#39; or &#39;vsync&#39;.
</p>
<p>
Contexts that support either of the WGL_EXT_swap_control_tear and
GLX_EXT_swap_control_tear extensions also accept negative swap intervals,
which allow the driver to swap even if a frame arrives a little bit late.
You can check for the presence of these extensions using
ExtensionSupported. For more information about swap tearing,
see the extension specifications.
</p>
<p>
Some GPU drivers do not honor the requested swap interval, either because of
user settings that override the request or due to bugs in the driver.
</p>

	</span>

	<h1 id="Terminate" class="hdr pkg hdr-function"><a href="#Terminate" title="permalink">»</a>&nbsp;func Terminate() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func Terminate()</pre>
		<p>
Terminate destroys all remaining windows, frees any allocated resources and
sets the library to an uninitialized state. Once this is called, you must
again call Init successfully before you will be able to use most GLFW
functions.
</p>
<p>
If GLFW has been successfully initialized, this function should be called
before the program exits. If initialization fails, there is no need to call
this function, as it is called by Init before it returns failure.
</p>
<p>
This function may only be called from the main thread.
</p>

	</span>

	<h1 id="WaitEvents" class="hdr pkg hdr-function"><a href="#WaitEvents" title="permalink">»</a>&nbsp;func WaitEvents() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func WaitEvents()</pre>
		<p>
WaitEvents puts the calling thread to sleep until at least one event has been
received. Once one or more events have been recevied, it behaves as if
PollEvents was called, i.e. the events are processed and the function then
returns immediately. Processing events will cause the window and input
callbacks associated with those events to be called.
</p>
<p>
Since not all events are associated with callbacks, this function may return
without a callback having been called even if you are monitoring all
callbacks.
</p>
<p>
This function may not be called from a callback.
</p>
<p>
This function may only be called from the main thread.
</p>

	</span>

	<h1 id="WindowHint" class="hdr pkg hdr-function"><a href="#WindowHint" title="permalink">»</a>&nbsp;func WindowHint(target Hint, hint int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
		<pre>func WindowHint(target Hint, hint int)</pre>
		<p>
Hint function sets hints for the next call to CreateWindow. The hints,
once set, retain their values until changed by a call to Hint or
DefaultHints, or until the library is terminated with Terminate.
</p>
<p>
This function may only be called from the main thread.
</p>

	</span>





	
	<h1 id="Action" class="hdr pkg hdr-type"><a href="#Action" title="permalink">»</a>&nbsp;type Action <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Action int</pre>
		<p>
Action corresponds to a key or button action.
</p>

	</span>

	
	

	
	

	
	<h1 id="CharacterCallback" class="hdr pkg hdr-type"><a href="#CharacterCallback" title="permalink">»</a>&nbsp;type CharacterCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CharacterCallback func(w *Window, char rune)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="CharacterModsCallback" class="hdr pkg hdr-type"><a href="#CharacterModsCallback" title="permalink">»</a>&nbsp;type CharacterModsCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CharacterModsCallback func(w *Window, char rune, mods ModifierKey)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="CloseCallback" class="hdr pkg hdr-type"><a href="#CloseCallback" title="permalink">»</a>&nbsp;type CloseCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CloseCallback func(w *Window)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="CursorEnterCallback" class="hdr pkg hdr-type"><a href="#CursorEnterCallback" title="permalink">»</a>&nbsp;type CursorEnterCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CursorEnterCallback func(w *Window, entered bool)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="CursorPositionCallback" class="hdr pkg hdr-type"><a href="#CursorPositionCallback" title="permalink">»</a>&nbsp;type CursorPositionCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type CursorPositionCallback func(w *Window, xpos float64, ypos float64)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="DropCallback" class="hdr pkg hdr-type"><a href="#DropCallback" title="permalink">»</a>&nbsp;type DropCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type DropCallback func(w *Window, names []string)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="ErrorCode" class="hdr pkg hdr-type"><a href="#ErrorCode" title="permalink">»</a>&nbsp;type ErrorCode <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type ErrorCode int</pre>
		<p>
ErrorCode corresponds to an error code.
</p>

	</span>

	
	

	
	

	
	<h1 id="FocusCallback" class="hdr pkg hdr-type"><a href="#FocusCallback" title="permalink">»</a>&nbsp;type FocusCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type FocusCallback func(w *Window, focused bool)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="FramebufferSizeCallback" class="hdr pkg hdr-type"><a href="#FramebufferSizeCallback" title="permalink">»</a>&nbsp;type FramebufferSizeCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type FramebufferSizeCallback func(w *Window, width int, height int)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="GLFWError" class="hdr pkg hdr-type"><a href="#GLFWError" title="permalink">»</a>&nbsp;type GLFWError <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type GLFWError struct {
	Code	ErrorCode
	Desc	string
}</pre>
		<p>
GlfwError holds error code and description.
</p>

	</span>

	
	

	
	
		
		<h1 id="GLFWError.Error" class="hdr pkg hdr-method"><a href="#GLFWError.Error" title="permalink">»</a>&nbsp;func (e *GLFWError) Error() string <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (e *GLFWError) Error() string</pre>
			<p>
Error prints the error code and description in a readable format.
</p>

		</span>
	

	
	<h1 id="GammaRamp" class="hdr pkg hdr-type"><a href="#GammaRamp" title="permalink">»</a>&nbsp;type GammaRamp <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type GammaRamp struct {
	Red	[]uint16	// A slice of value describing the response of the red channel.
	Green	[]uint16	// A slice of value describing the response of the green channel.
	Blue	[]uint16	// A slice of value describing the response of the blue channel.
}</pre>
		<p>
GammaRamp describes the gamma ramp for a monitor.
</p>

	</span>

	
	

	
	

	
	<h1 id="Hint" class="hdr pkg hdr-type"><a href="#Hint" title="permalink">»</a>&nbsp;type Hint <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Hint int</pre>
		<p>
Hint corresponds to hints that can be set before creating a window.
</p>
<p>
Hint also corresponds to the attributes of the window that can be get after
its creation.
</p>

	</span>

	
	

	
	

	
	<h1 id="IconifyCallback" class="hdr pkg hdr-type"><a href="#IconifyCallback" title="permalink">»</a>&nbsp;type IconifyCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type IconifyCallback func(w *Window, iconified bool)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="InputMode" class="hdr pkg hdr-type"><a href="#InputMode" title="permalink">»</a>&nbsp;type InputMode <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type InputMode int</pre>
		<p>
InputMode corresponds to an input mode.
</p>

	</span>

	
	

	
	

	
	<h1 id="Joystick" class="hdr pkg hdr-type"><a href="#Joystick" title="permalink">»</a>&nbsp;type Joystick <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Joystick int</pre>
		<p>
Joystick corresponds to a joystick.
</p>

	</span>

	
	

	
	

	
	<h1 id="Key" class="hdr pkg hdr-type"><a href="#Key" title="permalink">»</a>&nbsp;type Key <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Key int</pre>
		<p>
Key corresponds to a keyboard key.
</p>

	</span>

	
	

	
	

	
	<h1 id="KeyCallback" class="hdr pkg hdr-type"><a href="#KeyCallback" title="permalink">»</a>&nbsp;type KeyCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type KeyCallback func(w *Window, key Key, scancode int, action Action, mods ModifierKey)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="ModifierKey" class="hdr pkg hdr-type"><a href="#ModifierKey" title="permalink">»</a>&nbsp;type ModifierKey <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type ModifierKey int</pre>
		<p>
ModifierKey corresponds to a modifier key.
</p>

	</span>

	
	

	
	

	
	<h1 id="Monitor" class="hdr pkg hdr-type"><a href="#Monitor" title="permalink">»</a>&nbsp;type Monitor <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Monitor struct {
	// contains filtered or unexported fields
}</pre>
		
	</span>

	
	
		<h1 id="GetPrimaryMonitor" class="hdr pkg hdr-function"><a href="#GetPrimaryMonitor" title="permalink">»</a>&nbsp;func GetPrimaryMonitor() (*Monitor, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func GetPrimaryMonitor() (*Monitor, error)</pre>
			<p>
GetPrimaryMonitor returns the primary monitor. This is usually the monitor
where elements like the Windows task bar or the OS X menu bar is located.
</p>

		</span>
	

	
	
		
		<h1 id="Monitor.GetGammaRamp" class="hdr pkg hdr-method"><a href="#Monitor.GetGammaRamp" title="permalink">»</a>&nbsp;func (m *Monitor) GetGammaRamp() (*GammaRamp, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) GetGammaRamp() (*GammaRamp, error)</pre>
			<p>
GetGammaRamp retrieves the current gamma ramp of the monitor.
</p>

		</span>
	
		
		<h1 id="Monitor.GetName" class="hdr pkg hdr-method"><a href="#Monitor.GetName" title="permalink">»</a>&nbsp;func (m *Monitor) GetName() (string, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) GetName() (string, error)</pre>
			<p>
GetName returns a human-readable name of the monitor, encoded as UTF-8.
</p>

		</span>
	
		
		<h1 id="Monitor.GetPhysicalSize" class="hdr pkg hdr-method"><a href="#Monitor.GetPhysicalSize" title="permalink">»</a>&nbsp;func (m *Monitor) GetPhysicalSize() (width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) GetPhysicalSize() (width, height int)</pre>
			<p>
GetPhysicalSize returns the size, in millimetres, of the display area of the
monitor.
</p>
<p>
Note: Some operating systems do not provide accurate information, either
because the monitor&#39;s EDID data is incorrect, or because the driver does not
report it accurately.
</p>

		</span>
	
		
		<h1 id="Monitor.GetPosition" class="hdr pkg hdr-method"><a href="#Monitor.GetPosition" title="permalink">»</a>&nbsp;func (m *Monitor) GetPosition() (x, y int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) GetPosition() (x, y int)</pre>
			<p>
GetPosition returns the position, in screen coordinates, of the upper-left
corner of the monitor.
</p>

		</span>
	
		
		<h1 id="Monitor.GetVideoMode" class="hdr pkg hdr-method"><a href="#Monitor.GetVideoMode" title="permalink">»</a>&nbsp;func (m *Monitor) GetVideoMode() (*VideoMode, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) GetVideoMode() (*VideoMode, error)</pre>
			<p>
GetVideoMode returns the current video mode of the monitor. If you
are using a full screen window, the return value will therefore depend on
whether it is focused.
</p>

		</span>
	
		
		<h1 id="Monitor.GetVideoModes" class="hdr pkg hdr-method"><a href="#Monitor.GetVideoModes" title="permalink">»</a>&nbsp;func (m *Monitor) GetVideoModes() ([]*VideoMode, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) GetVideoModes() ([]*VideoMode, error)</pre>
			<p>
GetVideoModes returns an array of all video modes supported by the monitor.
The returned array is sorted in ascending order, first by color bit depth
(the sum of all channel depths) and then by resolution area (the product of
width and height).
</p>

		</span>
	
		
		<h1 id="Monitor.SetGamma" class="hdr pkg hdr-method"><a href="#Monitor.SetGamma" title="permalink">»</a>&nbsp;func (m *Monitor) SetGamma(gamma float32) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) SetGamma(gamma float32)</pre>
			<p>
SetGamma generates a 256-element gamma ramp from the specified exponent and then calls
SetGamma with it.
</p>

		</span>
	
		
		<h1 id="Monitor.SetGammaRamp" class="hdr pkg hdr-method"><a href="#Monitor.SetGammaRamp" title="permalink">»</a>&nbsp;func (m *Monitor) SetGammaRamp(ramp *GammaRamp) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (m *Monitor) SetGammaRamp(ramp *GammaRamp)</pre>
			<p>
SetGammaRamp sets the current gamma ramp for the monitor.
</p>

		</span>
	

	
	<h1 id="MonitorEvent" class="hdr pkg hdr-type"><a href="#MonitorEvent" title="permalink">»</a>&nbsp;type MonitorEvent <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type MonitorEvent int</pre>
		<p>
MonitorEvent corresponds to a monitor configuration event.
</p>

	</span>

	
	

	
	

	
	<h1 id="MouseButton" class="hdr pkg hdr-type"><a href="#MouseButton" title="permalink">»</a>&nbsp;type MouseButton <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type MouseButton int</pre>
		<p>
MouseButton corresponds to a mouse button.
</p>

	</span>

	
	

	
	

	
	<h1 id="MouseButtonCallback" class="hdr pkg hdr-type"><a href="#MouseButtonCallback" title="permalink">»</a>&nbsp;type MouseButtonCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type MouseButtonCallback func(w *Window, button MouseButton, action Action, mod ModifierKey)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="PositionCallback" class="hdr pkg hdr-type"><a href="#PositionCallback" title="permalink">»</a>&nbsp;type PositionCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type PositionCallback func(w *Window, xpos int, ypos int)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="RefreshCallback" class="hdr pkg hdr-type"><a href="#RefreshCallback" title="permalink">»</a>&nbsp;type RefreshCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type RefreshCallback func(w *Window)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="ScrollCallback" class="hdr pkg hdr-type"><a href="#ScrollCallback" title="permalink">»</a>&nbsp;type ScrollCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type ScrollCallback func(w *Window, xoff float64, yoff float64)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="SizeCallback" class="hdr pkg hdr-type"><a href="#SizeCallback" title="permalink">»</a>&nbsp;type SizeCallback <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type SizeCallback func(w *Window, width int, height int)</pre>
		
	</span>

	
	

	
	

	
	<h1 id="VideoMode" class="hdr pkg hdr-type"><a href="#VideoMode" title="permalink">»</a>&nbsp;type VideoMode <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type VideoMode struct {
	Width		int	// The width, in pixels, of the video mode.
	Height		int	// The height, in pixels, of the video mode.
	RedBits		int	// The bit depth of the red channel of the video mode.
	GreenBits	int	// The bit depth of the green channel of the video mode.
	BlueBits	int	// The bit depth of the blue channel of the video mode.
	RefreshRate	int	// The refresh rate, in Hz, of the video mode.
}</pre>
		<p>
VideoMode describes a single video mode.
</p>

	</span>

	
	

	
	

	
	<h1 id="Window" class="hdr pkg hdr-type"><a href="#Window" title="permalink">»</a>&nbsp;type Window <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg type">
		<pre>type Window struct {
	// contains filtered or unexported fields
}</pre>
		
	</span>

	
	
		<h1 id="CreateWindow" class="hdr pkg hdr-function"><a href="#CreateWindow" title="permalink">»</a>&nbsp;func CreateWindow(width, height int, title string, monitor *Monitor, share *Window) (*Window, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func CreateWindow(width, height int, title string, monitor *Monitor, share *Window) (*Window, error)</pre>
			<p>
CreateWindow creates a window and its associated context. Most of the options
controlling how the window and its context should be created are specified
through Hint.
</p>
<p>
Successful creation does not change which context is current. Before you can
use the newly created context, you need to make it current using
MakeContextCurrent.
</p>
<p>
Note that the created window and context may differ from what you requested,
as not all parameters and hints are hard constraints. This includes the size
of the window, especially for full screen windows. To retrieve the actual
attributes of the created window and context, use queries like
GetWindowAttrib and GetWindowSize.
</p>
<p>
To create the window at a specific position, make it initially invisible using
the Visible window hint, set its position and then show it.
</p>
<p>
If a fullscreen window is active, the screensaver is prohibited from starting.
</p>
<p>
Windows: If the executable has an icon resource named GLFW_ICON, it will be
set as the icon for the window. If no such icon is present, the IDI_WINLOGO
icon will be used instead.
</p>
<p>
Mac OS X: The GLFW window has no icon, as it is not a document window, but the
dock icon will be the same as the application bundle&#39;s icon. Also, the first
time a window is opened the menu bar is populated with common commands like
Hide, Quit and About. The (minimal) about dialog uses information from the
application&#39;s bundle. For more information on bundles, see the Bundle
Programming Guide provided by Apple.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		<h1 id="GetCurrentContext" class="hdr pkg hdr-function"><a href="#GetCurrentContext" title="permalink">»</a>&nbsp;func GetCurrentContext() *Window <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg function">
			<pre>func GetCurrentContext() *Window</pre>
			<p>
GetCurrentContext returns the window whose context is current.
</p>

		</span>
	

	
	
		
		<h1 id="Window.Destroy" class="hdr pkg hdr-method"><a href="#Window.Destroy" title="permalink">»</a>&nbsp;func (w *Window) Destroy() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) Destroy()</pre>
			<p>
Destroy destroys the specified window and its context. On calling this
function, no further callbacks will be called for that window.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.GetAttribute" class="hdr pkg hdr-method"><a href="#Window.GetAttribute" title="permalink">»</a>&nbsp;func (w *Window) GetAttribute(attrib Hint) (int, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetAttribute(attrib Hint) (int, error)</pre>
			<p>
GetAttribute returns an attribute of the window. There are many attributes,
some related to the window and others to its context.
</p>

		</span>
	
		
		<h1 id="Window.GetClipboardString" class="hdr pkg hdr-method"><a href="#Window.GetClipboardString" title="permalink">»</a>&nbsp;func (w *Window) GetClipboardString() (string, error) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetClipboardString() (string, error)</pre>
			<p>
GetClipboardString returns the contents of the system clipboard, if it
contains or is convertible to a UTF-8 encoded string.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.GetCursorPosition" class="hdr pkg hdr-method"><a href="#Window.GetCursorPosition" title="permalink">»</a>&nbsp;func (w *Window) GetCursorPosition() (x, y float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetCursorPosition() (x, y float64)</pre>
			<p>
GetCursorPosition returns the last reported position of the cursor.
</p>
<p>
If the cursor is disabled (with CursorDisabled) then the cursor position is
unbounded and limited only by the minimum and maximum values of a double.
</p>
<p>
The coordinate can be converted to their integer equivalents with the floor
function. Casting directly to an integer type works for positive coordinates,
but fails for negative ones.
</p>

		</span>
	
		
		<h1 id="Window.GetFramebufferSize" class="hdr pkg hdr-method"><a href="#Window.GetFramebufferSize" title="permalink">»</a>&nbsp;func (w *Window) GetFramebufferSize() (width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetFramebufferSize() (width, height int)</pre>
			<p>
GetFramebufferSize retrieves the size, in pixels, of the framebuffer of the
specified window.
</p>

		</span>
	
		
		<h1 id="Window.GetGLXContext" class="hdr pkg hdr-method"><a href="#Window.GetGLXContext" title="permalink">»</a>&nbsp;func (w *Window) GetGLXContext() C.GLXContext <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetGLXContext() C.GLXContext</pre>
			
		</span>
	
		
		<h1 id="Window.GetInputMode" class="hdr pkg hdr-method"><a href="#Window.GetInputMode" title="permalink">»</a>&nbsp;func (w *Window) GetInputMode(mode InputMode) int <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetInputMode(mode InputMode) int</pre>
			<p>
GetInputMode returns the value of an input option of the window.
</p>

		</span>
	
		
		<h1 id="Window.GetKey" class="hdr pkg hdr-method"><a href="#Window.GetKey" title="permalink">»</a>&nbsp;func (w *Window) GetKey(key Key) Action <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetKey(key Key) Action</pre>
			<p>
GetKey returns the last reported state of a keyboard key. The returned state
is one of Press or Release. The higher-level state Repeat is only reported to
the key callback.
</p>
<p>
If the StickyKeys input mode is enabled, this function returns Press the first
time you call this function after a key has been pressed, even if the key has
already been released.
</p>
<p>
The key functions deal with physical keys, with key tokens named after their
use on the standard US keyboard layout. If you want to input text, use the
Unicode character callback instead.
</p>

		</span>
	
		
		<h1 id="Window.GetMonitor" class="hdr pkg hdr-method"><a href="#Window.GetMonitor" title="permalink">»</a>&nbsp;func (w *Window) GetMonitor() *Monitor <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetMonitor() *Monitor</pre>
			<p>
GetMonitor returns the handle of the monitor that the window is in
fullscreen on.
</p>

		</span>
	
		
		<h1 id="Window.GetMouseButton" class="hdr pkg hdr-method"><a href="#Window.GetMouseButton" title="permalink">»</a>&nbsp;func (w *Window) GetMouseButton(button MouseButton) Action <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetMouseButton(button MouseButton) Action</pre>
			<p>
GetMouseButton returns the last state reported for the specified mouse button.
</p>
<p>
If the StickyMouseButtons input mode is enabled, this function returns Press
the first time you call this function after a mouse button has been pressed,
even if the mouse button has already been released.
</p>

		</span>
	
		
		<h1 id="Window.GetPosition" class="hdr pkg hdr-method"><a href="#Window.GetPosition" title="permalink">»</a>&nbsp;func (w *Window) GetPosition() (x, y int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetPosition() (x, y int)</pre>
			<p>
GetPosition returns the position, in screen coordinates, of the upper-left
corner of the client area of the window.
</p>

		</span>
	
		
		<h1 id="Window.GetSize" class="hdr pkg hdr-method"><a href="#Window.GetSize" title="permalink">»</a>&nbsp;func (w *Window) GetSize() (width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetSize() (width, height int)</pre>
			<p>
GetSize returns the size, in screen coordinates, of the client area of the
specified window.
</p>

		</span>
	
		
		<h1 id="Window.GetUserPointer" class="hdr pkg hdr-method"><a href="#Window.GetUserPointer" title="permalink">»</a>&nbsp;func (w *Window) GetUserPointer() unsafe.Pointer <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetUserPointer() unsafe.Pointer</pre>
			<p>
GetUserPointer returns the current value of the user-defined pointer of the
window. The initial value is nil.
</p>

		</span>
	
		
		<h1 id="Window.GetWGLContext" class="hdr pkg hdr-method"><a href="#Window.GetWGLContext" title="permalink">»</a>&nbsp;func (w *Window) GetWGLContext() C.HGLRC <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetWGLContext() C.HGLRC</pre>
			
		</span>
	
		
		<h1 id="Window.GetWin32Window" class="hdr pkg hdr-method"><a href="#Window.GetWin32Window" title="permalink">»</a>&nbsp;func (w *Window) GetWin32Window() C.HWND <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetWin32Window() C.HWND</pre>
			
		</span>
	
		
		<h1 id="Window.GetX11Window" class="hdr pkg hdr-method"><a href="#Window.GetX11Window" title="permalink">»</a>&nbsp;func (w *Window) GetX11Window() C.Window <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) GetX11Window() C.Window</pre>
			
		</span>
	
		
		<h1 id="Window.Hide" class="hdr pkg hdr-method"><a href="#Window.Hide" title="permalink">»</a>&nbsp;func (w *Window) Hide() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) Hide()</pre>
			<p>
Hide hides the window, if it was previously visible. If the window is already
hidden or is in full screen mode, this function does nothing.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.Iconify" class="hdr pkg hdr-method"><a href="#Window.Iconify" title="permalink">»</a>&nbsp;func (w *Window) Iconify() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) Iconify()</pre>
			<p>
Iconfiy iconifies/minimizes the window, if it was previously restored. If it
is a full screen window, the original monitor resolution is restored until the
window is restored. If the window is already iconified, this function does
nothing.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.MakeContextCurrent" class="hdr pkg hdr-method"><a href="#Window.MakeContextCurrent" title="permalink">»</a>&nbsp;func (w *Window) MakeContextCurrent() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) MakeContextCurrent()</pre>
			<p>
MakeContextCurrent makes the context of the window current.
Originally GLFW 3 passes a null pointer to detach the context.
But since we&#39;re using receievers, DetachCurrentContext should
be used instead.
</p>

		</span>
	
		
		<h1 id="Window.Restore" class="hdr pkg hdr-method"><a href="#Window.Restore" title="permalink">»</a>&nbsp;func (w *Window) Restore() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) Restore()</pre>
			<p>
Restore restores the window, if it was previously iconified/minimized. If it
is a full screen window, the resolution chosen for the window is restored on
the selected monitor. If the window is already restored, this function does
nothing.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.SetCharacterCallback" class="hdr pkg hdr-method"><a href="#Window.SetCharacterCallback" title="permalink">»</a>&nbsp;func (w *Window) SetCharacterCallback(cbfun CharacterCallback) (previous CharacterCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetCharacterCallback(cbfun CharacterCallback) (previous CharacterCallback)</pre>
			<p>
SetCharacterCallback sets the character callback which is called when a
Unicode character is input.
</p>
<p>
The character callback is intended for Unicode text input. As it deals with
characters, it is keyboard layout dependent, whereas the
key callback is not. Characters do not map 1:1
to physical keys, as a key may produce zero, one or more characters. If you
want to know whether a specific physical key was pressed or released, see
the key callback instead.
</p>
<p>
The character callback behaves as system text input normally does and will
not be called if modifier keys are held down that would prevent normal text
input on that platform, for example a Super (Command) key on OS X or Alt key
on Windows. There is a character with modifiers callback that receives these events.
</p>

		</span>
	
		
		<h1 id="Window.SetCharacterModsCallback" class="hdr pkg hdr-method"><a href="#Window.SetCharacterModsCallback" title="permalink">»</a>&nbsp;func (w *Window) SetCharacterModsCallback(cbfun CharacterModsCallback) (previous CharacterModsCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetCharacterModsCallback(cbfun CharacterModsCallback) (previous CharacterModsCallback)</pre>
			<p>
SetCharacterModsCallback sets the character with modifiers callback which is called when a
Unicode character is input regardless of what modifier keys are used.
</p>
<p>
The character with modifiers callback is intended for implementing custom
Unicode character input. For regular Unicode text input, see the
character callback. Like the character callback, the character with modifiers callback
deals with characters and is keyboard layout dependent. Characters do not
map 1:1 to physical keys, as a key may produce zero, one or more characters.
If you want to know whether a specific physical key was pressed or released,
see the key callback instead.
</p>

		</span>
	
		
		<h1 id="Window.SetClipboardString" class="hdr pkg hdr-method"><a href="#Window.SetClipboardString" title="permalink">»</a>&nbsp;func (w *Window) SetClipboardString(str string) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetClipboardString(str string)</pre>
			<p>
SetClipboardString sets the system clipboard to the specified UTF-8 encoded
string.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.SetCloseCallback" class="hdr pkg hdr-method"><a href="#Window.SetCloseCallback" title="permalink">»</a>&nbsp;func (w *Window) SetCloseCallback(cbfun CloseCallback) (previous CloseCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetCloseCallback(cbfun CloseCallback) (previous CloseCallback)</pre>
			<p>
SetCloseCallback sets the close callback of the window, which is called when
the user attempts to close the window, for example by clicking the close
widget in the title bar.
</p>
<p>
The close flag is set before this callback is called, but you can modify it at
any time with SetShouldClose.
</p>
<p>
Mac OS X: Selecting Quit from the application menu will trigger the close
callback for all windows.
</p>

		</span>
	
		
		<h1 id="Window.SetCursorEnterCallback" class="hdr pkg hdr-method"><a href="#Window.SetCursorEnterCallback" title="permalink">»</a>&nbsp;func (w *Window) SetCursorEnterCallback(cbfun CursorEnterCallback) (previous CursorEnterCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetCursorEnterCallback(cbfun CursorEnterCallback) (previous CursorEnterCallback)</pre>
			<p>
SetCursorEnterCallback the cursor boundary crossing callback which is called
when the cursor enters or leaves the client area of the window.
</p>

		</span>
	
		
		<h1 id="Window.SetCursorPosition" class="hdr pkg hdr-method"><a href="#Window.SetCursorPosition" title="permalink">»</a>&nbsp;func (w *Window) SetCursorPosition(xpos, ypos float64) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetCursorPosition(xpos, ypos float64)</pre>
			<p>
SetCursorPosition sets the position of the cursor. The specified window must
be focused. If the window does not have focus when this function is called,
it fails silently.
</p>
<p>
If the cursor is disabled (with CursorDisabled) then the cursor position is
unbounded and limited only by the minimum and maximum values of a double.
</p>

		</span>
	
		
		<h1 id="Window.SetCursorPositionCallback" class="hdr pkg hdr-method"><a href="#Window.SetCursorPositionCallback" title="permalink">»</a>&nbsp;func (w *Window) SetCursorPositionCallback(cbfun CursorPositionCallback) (previous CursorPositionCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetCursorPositionCallback(cbfun CursorPositionCallback) (previous CursorPositionCallback)</pre>
			<p>
SetCursorPositionCallback sets the cursor position callback which is called
when the cursor is moved. The callback is provided with the position relative
to the upper-left corner of the client area of the window.
</p>

		</span>
	
		
		<h1 id="Window.SetDropCallback" class="hdr pkg hdr-method"><a href="#Window.SetDropCallback" title="permalink">»</a>&nbsp;func (w *Window) SetDropCallback(cbfun DropCallback) (previous DropCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetDropCallback(cbfun DropCallback) (previous DropCallback)</pre>
			<p>
SetDropCallback sets the drop callback which is called when an object
is dropped over the window.
</p>

		</span>
	
		
		<h1 id="Window.SetFocusCallback" class="hdr pkg hdr-method"><a href="#Window.SetFocusCallback" title="permalink">»</a>&nbsp;func (w *Window) SetFocusCallback(cbfun FocusCallback) (previous FocusCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetFocusCallback(cbfun FocusCallback) (previous FocusCallback)</pre>
			<p>
SetFocusCallback sets the focus callback of the window, which is called when
the window gains or loses focus.
</p>
<p>
After the focus callback is called for a window that lost focus, synthetic key
and mouse button release events will be generated for all such that had been
pressed. For more information, see SetKeyCallback and SetMouseButtonCallback.
</p>

		</span>
	
		
		<h1 id="Window.SetFramebufferSizeCallback" class="hdr pkg hdr-method"><a href="#Window.SetFramebufferSizeCallback" title="permalink">»</a>&nbsp;func (w *Window) SetFramebufferSizeCallback(cbfun FramebufferSizeCallback) (previous FramebufferSizeCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetFramebufferSizeCallback(cbfun FramebufferSizeCallback) (previous FramebufferSizeCallback)</pre>
			<p>
SetFramebufferSizeCallback sets the framebuffer resize callback of the specified
window, which is called when the framebuffer of the specified window is resized.
</p>

		</span>
	
		
		<h1 id="Window.SetIconifyCallback" class="hdr pkg hdr-method"><a href="#Window.SetIconifyCallback" title="permalink">»</a>&nbsp;func (w *Window) SetIconifyCallback(cbfun IconifyCallback) (previous IconifyCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetIconifyCallback(cbfun IconifyCallback) (previous IconifyCallback)</pre>
			<p>
SetIconifyCallback sets the iconification callback of the window, which is
called when the window is iconified or restored.
</p>

		</span>
	
		
		<h1 id="Window.SetInputMode" class="hdr pkg hdr-method"><a href="#Window.SetInputMode" title="permalink">»</a>&nbsp;func (w *Window) SetInputMode(mode InputMode, value int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetInputMode(mode InputMode, value int)</pre>
			<p>
Sets an input option for the window.
</p>

		</span>
	
		
		<h1 id="Window.SetKeyCallback" class="hdr pkg hdr-method"><a href="#Window.SetKeyCallback" title="permalink">»</a>&nbsp;func (w *Window) SetKeyCallback(cbfun KeyCallback) (previous KeyCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetKeyCallback(cbfun KeyCallback) (previous KeyCallback)</pre>
			<p>
SetKeyCallback sets the key callback which is called when a key is pressed,
repeated or released.
</p>
<p>
The key functions deal with physical keys, with layout independent key tokens
named after their values in the standard US keyboard layout. If you want to
input text, use the SetCharCallback instead.
</p>
<p>
When a window loses focus, it will generate synthetic key release events for
all pressed keys. You can tell these events from user-generated events by the
fact that the synthetic ones are generated after the window has lost focus,
i.e. Focused will be false and the focus callback will have already been
called.
</p>

		</span>
	
		
		<h1 id="Window.SetMouseButtonCallback" class="hdr pkg hdr-method"><a href="#Window.SetMouseButtonCallback" title="permalink">»</a>&nbsp;func (w *Window) SetMouseButtonCallback(cbfun MouseButtonCallback) (previous MouseButtonCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetMouseButtonCallback(cbfun MouseButtonCallback) (previous MouseButtonCallback)</pre>
			<p>
SetMouseButtonCallback sets the mouse button callback which is called when a
mouse button is pressed or released.
</p>
<p>
When a window loses focus, it will generate synthetic mouse button release
events for all pressed mouse buttons. You can tell these events from
user-generated events by the fact that the synthetic ones are generated after
the window has lost focus, i.e. Focused will be false and the focus
callback will have already been called.
</p>

		</span>
	
		
		<h1 id="Window.SetPosition" class="hdr pkg hdr-method"><a href="#Window.SetPosition" title="permalink">»</a>&nbsp;func (w *Window) SetPosition(xpos, ypos int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetPosition(xpos, ypos int)</pre>
			<p>
SetPosition sets the position, in screen coordinates, of the upper-left corner
of the client area of the window.
</p>
<p>
If it is a full screen window, this function does nothing.
</p>
<p>
If you wish to set an initial window position you should create a hidden
window (using Hint and Visible), set its position and then show it.
</p>
<p>
It is very rarely a good idea to move an already visible window, as it will
confuse and annoy the user.
</p>
<p>
The window manager may put limits on what positions are allowed.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.SetPositionCallback" class="hdr pkg hdr-method"><a href="#Window.SetPositionCallback" title="permalink">»</a>&nbsp;func (w *Window) SetPositionCallback(cbfun PositionCallback) (previous PositionCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetPositionCallback(cbfun PositionCallback) (previous PositionCallback)</pre>
			<p>
SetPositionCallback sets the position callback of the window, which is called
when the window is moved. The callback is provided with the screen position
of the upper-left corner of the client area of the window.
</p>

		</span>
	
		
		<h1 id="Window.SetRefreshCallback" class="hdr pkg hdr-method"><a href="#Window.SetRefreshCallback" title="permalink">»</a>&nbsp;func (w *Window) SetRefreshCallback(cbfun RefreshCallback) (previous RefreshCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetRefreshCallback(cbfun RefreshCallback) (previous RefreshCallback)</pre>
			<p>
SetRefreshCallback sets the refresh callback of the window, which
is called when the client area of the window needs to be redrawn, for example
if the window has been exposed after having been covered by another window.
</p>
<p>
On compositing window systems such as Aero, Compiz or Aqua, where the window
contents are saved off-screen, this callback may be called only very
infrequently or never at all.
</p>

		</span>
	
		
		<h1 id="Window.SetScrollCallback" class="hdr pkg hdr-method"><a href="#Window.SetScrollCallback" title="permalink">»</a>&nbsp;func (w *Window) SetScrollCallback(cbfun ScrollCallback) (previous ScrollCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetScrollCallback(cbfun ScrollCallback) (previous ScrollCallback)</pre>
			<p>
SetScrollCallback sets the scroll callback which is called when a scrolling
device is used, such as a mouse wheel or scrolling area of a touchpad.
</p>

		</span>
	
		
		<h1 id="Window.SetShouldClose" class="hdr pkg hdr-method"><a href="#Window.SetShouldClose" title="permalink">»</a>&nbsp;func (w *Window) SetShouldClose(value bool) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetShouldClose(value bool)</pre>
			<p>
SetShouldClose sets the value of the close flag of the window. This can be
used to override the user&#39;s attempt to close the window, or to signal that it
should be closed.
</p>

		</span>
	
		
		<h1 id="Window.SetSize" class="hdr pkg hdr-method"><a href="#Window.SetSize" title="permalink">»</a>&nbsp;func (w *Window) SetSize(width, height int) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetSize(width, height int)</pre>
			<p>
SetSize sets the size, in screen coordinates, of the client area of the
window.
</p>
<p>
For full screen windows, this function selects and switches to the resolution
closest to the specified size, without affecting the window&#39;s context. As the
context is unaffected, the bit depths of the framebuffer remain unchanged.
</p>
<p>
The window manager may put limits on what window sizes are allowed.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.SetSizeCallback" class="hdr pkg hdr-method"><a href="#Window.SetSizeCallback" title="permalink">»</a>&nbsp;func (w *Window) SetSizeCallback(cbfun SizeCallback) (previous SizeCallback) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetSizeCallback(cbfun SizeCallback) (previous SizeCallback)</pre>
			<p>
SetSizeCallback sets the size callback of the window, which is called when
the window is resized. The callback is provided with the size, in screen
coordinates, of the client area of the window.
</p>

		</span>
	
		
		<h1 id="Window.SetTitle" class="hdr pkg hdr-method"><a href="#Window.SetTitle" title="permalink">»</a>&nbsp;func (w *Window) SetTitle(title string) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetTitle(title string)</pre>
			<p>
SetTitle sets the window title, encoded as UTF-8, of the window.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.SetUserPointer" class="hdr pkg hdr-method"><a href="#Window.SetUserPointer" title="permalink">»</a>&nbsp;func (w *Window) SetUserPointer(pointer unsafe.Pointer) <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SetUserPointer(pointer unsafe.Pointer)</pre>
			<p>
SetUserPointer sets the user-defined pointer of the window. The current value
is retained until the window is destroyed. The initial value is nil.
</p>

		</span>
	
		
		<h1 id="Window.ShouldClose" class="hdr pkg hdr-method"><a href="#Window.ShouldClose" title="permalink">»</a>&nbsp;func (w *Window) ShouldClose() bool <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) ShouldClose() bool</pre>
			<p>
ShouldClose returns the value of the close flag of the specified window.
</p>

		</span>
	
		
		<h1 id="Window.Show" class="hdr pkg hdr-method"><a href="#Window.Show" title="permalink">»</a>&nbsp;func (w *Window) Show() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) Show()</pre>
			<p>
Show makes the window visible, if it was previously hidden. If the window is
already visible or is in full screen mode, this function does nothing.
</p>
<p>
This function may only be called from the main thread.
</p>

		</span>
	
		
		<h1 id="Window.SwapBuffers" class="hdr pkg hdr-method"><a href="#Window.SwapBuffers" title="permalink">»</a>&nbsp;func (w *Window) SwapBuffers() <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg method">
			<pre>func (w *Window) SwapBuffers()</pre>
			<p>
SwapBuffers swaps the front and back buffers of the window. If the
swap interval is greater than zero, the GPU driver waits the specified number
of screen updates before swapping the buffers.
</p>

		</span>
	



<h1 id="package-files" class="hdr pkg hdr-files"><a href="#package-files" title="permalink">»</a>&nbsp;Package Files <span class="toplink">(<a href="#top">top</a>)</span></h1>
<span class="section pkg files">
	<p>
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/build.go" title="view source">build.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/clipboard.go" title="view source">clipboard.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/context.go" title="view source">context.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/error.go" title="view source">error.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/glfw.go" title="view source">glfw.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/input.go" title="view source">input.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/monitor.go" title="view source">monitor.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/time.go" title="view source">time.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/util.go" title="view source">util.go</a>
	
	<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/window.go" title="view source">window.go</a>
	</p>

	<h2><span class="linkarea">(<a href="#" id="tagged-files-toggle">show tagged files</a>)</span></h2>
	<span id="tagged-files">
		<h2>Darwin Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/cocoaclipboard_darwin.go" title="view source">cocoaclipboard_darwin.go</a>
		
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/cocoainit_darwin.go" title="view source">cocoainit_darwin.go</a>
		
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/cocoamonitor_darwin.go" title="view source">cocoamonitor_darwin.go</a>
		
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/cocoawindow_darwin.go" title="view source">cocoawindow_darwin.go</a>
		
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/iokitjoystick_darwin.go" title="view source">iokitjoystick_darwin.go</a>
		
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/native_darwin.go" title="view source">native_darwin.go</a>
		
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/nsglcontext_darwin.go" title="view source">nsglcontext_darwin.go</a>
		</p>
	
		<h2>Linbsd Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/native_linbsd.go" title="view source">native_linbsd.go</a>
		</p>
	
		<h2>Windows Files</h2>
		<p>
		<a href="https:/github.com/azul3d/native-glfw/blob/v3.1/native_windows.go" title="view source">native_windows.go</a>
		</p>
	</span>
</span>


<script>
$(function() {
	$("#tagged-files").slideUp();
	var toggle = true;
	$("#tagged-files-toggle").click(function(event) {
		event.preventDefault();
		toggle = !toggle;
		if(toggle) {
			$("#tagged-files").slideUp();
			$("#tagged-files-toggle").html("show tagged files");
		} else {
			$("#tagged-files").slideDown();
			$("#tagged-files-toggle").html("hide tagged files");
		}
	});
});
</script>

	</div>
</div>


<div id="footer">
	<div>© 2014 The Azul3D Authors, All Rights Reserved.</div>
	<div><a href="/doc/license.html">License</a> | <a href="/doc/authors.html">Authors</a></div>
</div>


<script>
$(document).ready(function() {
	$("body").css("opacity", 0);

	 
	var ValidIpAddressRegex = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$";
	var redirect = window.location.hostname != 'azul3d.org';
	if(location.hostname == "localhost" || location.hostname.search(ValidIpAddressRegex) != -1) {
		
		
		redirect = false;
	}
	if(redirect){
	    window.top.location.href = 'http://azul3d.org'; 
	}
});

$(window).ready(function() {
	var fadeIn = function(self, delay) {
		self.css("opacity", 0).delay(delay).animate({opacity: 1}, "slow");
	}

	var fromSameSite = document.referrer.indexOf(location.protocol + "//" + location.host) === 0;


	
	
	var longPage = $(document).height() > $(window).height() * 3;
	if(fromSameSite || longPage) {
		fadeIn($("body"), 10);
	} else {
		var workingIndex = 0;
		var speed = 75;
		$("#content").children().each(function(index) {
			fadeIn($(this), 1000 + (speed * workingIndex));
			workingIndex++;
			if($(this).hasClass("list")) {
				$(this).children().each(function(index) {
					fadeIn($(this), 1000 + (speed * workingIndex));
					workingIndex++;
				});
			}
		});

		var w = $("#shortbar").width();
		$("#shortbar").css({
			right: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			right: "0px",
			opacity: 1
			}, "slow");

		var w = $("#navigation").width();
		$("#navigation").css({
			left: -w-1 + "px",
			opacity: 0
		}).delay(10).animate({
			left: "0px",
			opacity: 1
			}, "slow");

		fadeIn($("#logo"), 10);
		fadeIn($("body"), 10);
	}
})
</script>
	</body>
</html>



